{
    "target": "com.apple.kernel",
    "total": 4469,
    "version": {
        "max": "24.2.0",
        "min": "24.1.0"
    },
    "signatures": [
        {
            "args": 1,
            "anchors": [
                {
                    "string": "dtrace: fbt: No return probe for %s, walked to next routine at 0x%016llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "fbt_provide_probe",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Kernel stack memory corruption detected @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "stack_protector.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__stack_chk_fail",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "kdp_packet bad len %lu\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "kdp_packet bad len pkt %lu hdr %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "kdp_packet reply recvd req %x seq %x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "kdp_packet bad request %x len %d seq %x key %x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "kdp_packet",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "A trap was already set at that address, not setting new breakpoint\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "kdp_set_breakpoint_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kdp_remove_all_breakpoints: found extant breakpoints, removing them.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "kdp_remove_all_breakpoints",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kdp_unknown request %x len %d seq %x key %x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "kdp_unknown",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "stackshot_maxsz",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "-panic_on_exception_triage",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "-show_pointers",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "-no_slto_panic",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "kernel_bootstrap: result = %08X @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "kernel_bootstrap_thread",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "bsd_setthreadname"
                }
            ],
            "symbol": "kernel_bootstrap",
            "prototype": "",
            "backtrace": [
                "machine_startup",
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "stackshot_tries",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kcdata_add_uint64_with_description"
                }
            ],
            "symbol": "stackshot_push_duration_and_latency",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "stackshot_in_flags",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kcdata_add_uint64_with_description"
                },
                {
                    "string": "stackshot_in_pid",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kcdata_add_uint32_with_description"
                },
                {
                    "string": "system_state_flags",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kcdata_add_uint64_with_description"
                },
                {
                    "string": "stackshot_pagetable_mask",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kcdata_add_uint32_with_description"
                },
                {
                    "string": "stackshot_size_estimate",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kcdata_add_uint32_with_description"
                },
                {
                    "string": "stackshot_size_estimate_adj",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kcdata_add_uint32_with_description"
                },
                {
                    "string": "stackshot_tasks_count",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kcdata_add_uint64_with_description"
                },
                {
                    "string": "stackshot_threads_count",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kcdata_add_uint64_with_description"
                }
            ],
            "symbol": "kdp_stackshot_kcdata_format",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "_panicd_ip",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "_router_ip",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "panicd_port",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "_panicd_corename",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                }
            ],
            "symbol": "kdp_register_send_receive",
            "prototype": "",
            "backtrace": [
                "kdp_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kdp_ip_addr",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                }
            ],
            "symbol": "kdp_set_interface",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "octet",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlen"
                },
                {
                    "string": "%s%c%s%c%s%c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "Unable to create core header packet.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kdb_printf"
                },
                {
                    "string": "dumpinfo does not fit into KDP packet.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kdb_printf"
                }
            ],
            "symbol": "create_panic_header",
            "prototype": "",
            "backtrace": [
                "kdp_send_crashdump_pkt"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "Cannot contact panic server, timing out.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "TX retry #%d ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Unable to get panic header.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Protocol features: 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Panic server returned error %d, retrying\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "RX retry ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "\nTotal number of packets transmitted: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Avg. superblock transfer abstime 0x%llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Minimum superblock transfer abstime: 0x%llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Maximum superblock transfer abstime: 0x%llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "kdp_send_crashdump_pkt",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "kdp_set_dump_info: Skipping invalid panicd port %d (using %d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kdb_printf"
                }
            ],
            "symbol": "kdp_set_dump_info",
            "prototype": "",
            "backtrace": [
                "kdp_dumpinfo"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "System dump aborted.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kdb_printf"
                },
                {
                    "string": "Entering system dump routine\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Error: No transport device registered for kernel crashdump\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcpy"
                },
                {
                    "string": "A dump server was not specified in the boot-args, terminating kernel core dump.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kdb_printf"
                },
                {
                    "string": "kdp_panic_dump: unexpected pending input packet",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kdp_panic"
                },
                {
                    "string": "paniclog",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcpy"
                },
                {
                    "string": "systemlog",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcpy"
                },
                {
                    "string": "%s-%s-%d.%d.%d.%d-%x%s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "inet_aton() failed interpreting %s as a panic server IP\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kdb_printf"
                },
                {
                    "string": "Attempting connection to panic server configured at IP %s, port %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kdb_printf"
                },
                {
                    "string": "Resolved %s's (or proxy's) link level address\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kdb_printf"
                },
                {
                    "string": "inet_aton() failed interpreting %s as an IP\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kdb_printf"
                },
                {
                    "string": "Routing through specified router IP %s (%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kdb_printf"
                },
                {
                    "string": "Transmitting packets to link level address: %02x:%02x:%02x:%02x:%02x:%02x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kdb_printf"
                },
                {
                    "string": "Kernel map size is %llu\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kdb_printf"
                },
                {
                    "string": "Sending write request for %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kdb_printf"
                },
                {
                    "string": "Transmitting panic log, please wait: ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kdb_printf_unbuffered"
                },
                {
                    "string": "Please file a bug report on this panic, if possible.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Transmitting system log, please wait: ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kdb_printf_unbuffered"
                },
                {
                    "string": "custom",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcpy"
                }
            ],
            "symbol": "kdp_panic_dump",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "; UUID=",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcat"
                },
                {
                    "string": "; stext=",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcat"
                },
                {
                    "string": "Serial requested, consistent debug disabled or debug boot arg not present, configuring debugging over serial\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Initializing serial KDP\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "kdp_init",
            "prototype": "",
            "backtrace": [
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kdp_poll",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kdp_panic"
                },
                {
                    "string": "kdp_poll: no debugger device\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "kdp_poll",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kdp_raise_exception with NULL state\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s exception (%x,%x,%x)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "kdp_raise_exception",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kdp_panic"
                },
                {
                    "string": "Debugger re-entry scheduled in %d milliseconds\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Using serial KDP.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "\nWaiting for remote debugger connection.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Options.....    Type\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "------------    ----\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "continue....    'c'\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "reboot......    'r'\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Continuing...\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Rebooting...\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Connected to remote debugger.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "kdp: exception ack timeout\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "kdp_send: no input packet",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kdp_panic"
                },
                {
                    "string": "kdp: bad sequence %d (want %d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "kdp_raise_exception",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kdp_reply: no input packet",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kdp_panic"
                },
                {
                    "string": "kdp_send: packet too large (%d > %u)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kdp_panic"
                }
            ],
            "symbol": "kdp_reply",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: cannot exclude region starting at %p with size %zu (zero or overflowing size) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: cannot exclude region starting at %p with size %zu (not page aligned) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kdp_core_exclude_region",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kdp_core_handle_new_encryption_key failed to re-initialize encryption stage. Error 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "kdp_core_handle_new_encryption_key failed to read the existing corefile header. Error 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "kdp_core_handle_new_encryption_key failed to update the existing corefile header. Error 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "kdp_core_handle_new_encryption_key failed to write the corefile header. Error 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "kdp_core_handle_new_encryption_key failed to write the next public key. Error 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "kdp_core_handle_new_encryption_key failed to zero-out the public key region. Error 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "kdp_core_handle_new_encryption_key",
            "prototype": "",
            "backtrace": [
                "sysctl_coredump_encryption_key_update"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kdp_core_polled_io_polled_file_available failed to read corefile header. Error 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "kdp_core_polled_io_polled_file_available failed to read the public key. Error 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "kdp_core_polled_io_polled_file_available",
            "prototype": "",
            "backtrace": [
                "__ZL20IOOpenPolledCoreFilePvS_"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "KDPCoreStageInit",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "lck_grp_init_flags"
                },
                {
                    "string": "apple_encrypted_archive interface registration callback is already set @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "compression interface registration callback is already set @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kdp_core_init",
            "prototype": "",
            "backtrace": [
                "kdp_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(kern_dump_update_header) outproc(KDP_SEEK, NULL, %lu, %p) foffset = 0x%llx returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "(kern_dump_update_header) outproc(KDP_DATA, NULL, %lu, %p) returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "(kern_dump_update_header) outproc data flush returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "(kern_dump_update_header) outproc explicit flush returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                }
            ],
            "symbol": "kern_dump_update_header",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "outproc(KDP_WRQ, NULL, 0, NULL) returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "(do_kern_dump write public key) returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "(do_kern_dump seek begin) outproc(KDP_SEEK, NULL, %lu, %p) foffset = 0x%llx returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "Writing local cores...\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "Transmitting kernel state, please wait:\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "(do_kern_dump seek logfile) outproc(KDP_SEEK, NULL, %lu, %p) foffset = 0x%llx returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "(do_kern_dump paniclog) outproc(KDP_DATA, NULL, %lu, %p) returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "(do_kern_dump coredump log) outproc(KDP_DATA, NULL, %lu, %p) returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "(do_kern_dump close) outproc(KDP_EOF, NULL, 0, 0) returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "We were in the middle of initializing LZ4 stage. Cannot write a coredump to disk\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "LZ4 stage is not yet initialized. Cannot write a coredump to disk\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "We were in the middle of initializing encryption. Marking it as unavailable\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "We were in the middle of initializing the disk stage. Cannot write a coredump to disk\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "Corefile is not yet initialized. Cannot write a coredump to disk\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "Zlib stage is not initialized. Cannot write a coredump to the network\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "Zlib stage is not initialized. Cannot write a coredump to shared memory\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "(kern_dump_write_public_key) outproc(KDP_SEEK, NULL, %lu, %p) foffset = 0x%llx returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "(kern_dump_write_public_key) outproc(KDP_DATA, NULL, %llu, NULL) returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "(kern_dump_write_public_key) outproc data flush returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "(kern_dump_write_public_key) outproc explicit flush returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "\nBeginning dump of panic region of size 0x%zx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "Skipping panic region dump\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "Failed to write panic region to file, kdp_coreoutput(outstate, %zu, %p) returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "Failed to flush panic region data : kdp_core_output(%p, 0, NULL) returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "panic_region",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__strncpy_chk"
                },
                {
                    "string": "Failed to record panic region in corefile header, kern_dump_record_file returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "Recorded panic region in corefile at offset 0x%llx, compressed to %llu bytes\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "Failed to seek to panic region file offset 0x%llx, kern_dump_seek_to_next_file returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                }
            ],
            "symbol": "do_kern_dump",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "(kdp_core_init_encryption_stage) Failed to initialize the encryption stage. Error 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "kdp_core_init_encryption_stage",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: skipping kernel because excluded regions list is locked\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "kern_dump_init",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                }
            ],
            "symbol": "kern_dump_init",
            "prototype": "",
            "backtrace": [
                "kdp_core_init",
                "kdp_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "save_summary: pmap traversal failed: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                }
            ],
            "symbol": "kern_dump_save_summary",
            "prototype": "",
            "backtrace": [
                "kdp_core_init",
                "kdp_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "save_seg_desc: pmap traversal failed: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                }
            ],
            "symbol": "kern_dump_save_seg_descriptions",
            "prototype": "",
            "backtrace": [
                "kdp_core_init",
                "kdp_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "save_seg_data: pmap traversal failed: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                }
            ],
            "symbol": "kern_dump_save_segment_data",
            "prototype": "",
            "backtrace": [
                "kdp_core_init",
                "kdp_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: context allocation failure\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "user_dump_init",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "%s: no task is set\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "%s: skipping inactive task\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "%s: skipping locked task\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "%s: skipping task with locked vm map\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                }
            ],
            "symbol": "user_dump_init",
            "prototype": "",
            "backtrace": [
                "kern_register_userspace_coredump",
                "exec_mach_imgact",
                "exec_activate_image"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "user_dump_save_summary",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                }
            ],
            "symbol": "user_dump_save_summary",
            "prototype": "",
            "backtrace": [
                "kern_register_userspace_coredump",
                "exec_mach_imgact",
                "exec_activate_image"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "user_dump_save_seg_descriptions",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                }
            ],
            "symbol": "user_dump_save_seg_descriptions",
            "prototype": "",
            "backtrace": [
                "kern_register_userspace_coredump",
                "exec_mach_imgact",
                "exec_activate_image"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "user_dump_save_segment_data",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                }
            ],
            "symbol": "user_dump_save_segment_data",
            "prototype": "",
            "backtrace": [
                "kern_register_userspace_coredump",
                "exec_mach_imgact",
                "exec_activate_image"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "panic context",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "user_dump_save_note_descriptions",
            "prototype": "",
            "backtrace": [
                "kern_register_userspace_coredump",
                "exec_mach_imgact",
                "exec_activate_image"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "AEA kext returned an error while calculating state size.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Failed to allocate memory (%zu bytes) for the AEA stage. Error 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "WARNING: Coredump encryption failed to initialize. aea_initialize_state() returned %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "aea_stage_initialize",
            "prototype": "",
            "backtrace": [
                "kdp_core_init_encryption_stage"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(aea_stage_reset) aea_close() returned %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                }
            ],
            "symbol": "aea_stage_reset",
            "prototype": "",
            "backtrace": [
                "aea_stage_initialize",
                "kdp_core_init_encryption_stage"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(aea_stage_outproc) aea_close() returned %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "(aea_stage_outproc) aea_open() returned %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "(aea_stage_outproc) aea_write() returned %zd\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                }
            ],
            "symbol": "aea_stage_outproc",
            "prototype": "",
            "backtrace": [
                "aea_stage_initialize",
                "kdp_core_init_encryption_stage"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "(aea_write_callback) next stage outproc returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                }
            ],
            "symbol": "aea_write_callback",
            "prototype": "",
            "backtrace": [
                "aea_stage_outproc",
                "aea_stage_initialize",
                "kdp_core_init_encryption_stage"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "(aea_read_callback) next stage read proc returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                }
            ],
            "symbol": "aea_read_callback",
            "prototype": "",
            "backtrace": [
                "aea_stage_outproc",
                "aea_stage_initialize",
                "kdp_core_init_encryption_stage"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(aea_availability_callback) Failed to handle availability of encryption. Error 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "aea_availability_callback",
            "prototype": "",
            "backtrace": [
                "kdp_core_init",
                "kdp_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "buffer_stage_initialize failed to allocate memory. Error 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "buffer_stage_initialize",
            "prototype": "",
            "backtrace": [
                "kdp_core_init",
                "kdp_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "buffer_stage_outproc (during forwarding) returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                }
            ],
            "symbol": "buffer_stage_outproc",
            "prototype": "",
            "backtrace": [
                "buffer_stage_initialize",
                "kdp_core_init",
                "kdp_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 4,
            "anchors": [
                {
                    "string": "(disk_stage_write) disk_stage_read (during seek) returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "(disk_stage_write) IOPolledFileSeek(0x%llx) returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "(disk_stage_write) disk_stage_read (during final chunk seek) returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "(disk_stage_write) IOPolledFileWrite(gIOPolledCoreFileVars, %p, 0x%llx, NULL) returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "(disk_stage_write) IOPolledFileWrite (during final flush) returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                }
            ],
            "symbol": "disk_stage_write",
            "prototype": "",
            "backtrace": [
                "aea_write_callback",
                "aea_stage_outproc",
                "aea_stage_initialize",
                "kdp_core_init_encryption_stage"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(disk_stage_read) IOPolledFileWrite (during seek) returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "(disk_stage_read) IOPolledFileSeek(0x%llx) returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "(disk_stage_read) Kickstarting IOPolledFileRead(0) returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                }
            ],
            "symbol": "disk_stage_read",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "IOPolledFileSeek(gIOPolledCoreFileVars, 0) returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "IOPolledFilePollersOpen returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "IOPolledFileWrite (during seek) returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "IOPolledFileSeek(0x%llx) returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "IOPolledFileWrite(gIOPolledCoreFileVars, %p, 0x%llx, NULL) returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "IOPolledFileFlush() returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "IOPolledFileWrite (during EOF) returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "IOPolledFilePollersClose (during EOF) returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                }
            ],
            "symbol": "disk_stage_outproc",
            "prototype": "",
            "backtrace": [
                "kdp_core_polled_io_polled_file_available",
                "__ZL20IOOpenPolledCoreFilePvS_"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(%s) Failed to handle availability of LZ4. Error 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "lz4_stage_registration_callback",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "lz4_stage_registration_callback",
            "prototype": "",
            "backtrace": [
                "kdp_core_init",
                "kdp_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 4,
            "anchors": [
                {
                    "string": "kdp_send_crashdump_data returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                }
            ],
            "symbol": "net_stage_outproc",
            "prototype": "",
            "backtrace": [
                "kdp_core_init",
                "kdp_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "progress_notify_stage_initialize failed to allocate memory. Error 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "progress_notify_stage_initialize",
            "prototype": "",
            "backtrace": [
                "kdp_core_init",
                "kdp_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s (during forwarding) returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "progress_notify_stage_outproc",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                }
            ],
            "symbol": "progress_notify_stage_outproc",
            "prototype": "",
            "backtrace": [
                "progress_notify_stage_initialize",
                "kdp_core_init",
                "kdp_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "handshake structure not initialized\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "Waiting for hardware shared memory debugger, handshake structure is at virt: %p, phys %p\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                }
            ],
            "symbol": "panic_spin_shmcon",
            "prototype": "",
            "backtrace": [
                "handle_debugger_trap"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "EOF Flush: Detected stale/invalid seq num. Expected: %d, received %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "Setting coredump status as done!\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                }
            ],
            "symbol": "shmem_stage_outproc",
            "prototype": "",
            "backtrace": [
                "shmem_stage_initialize",
                "kdp_core_init",
                "kdp_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Detected remote error, terminating...\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "Detected stale/invalid seq num. Expected: %d, received %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "Kernel timed out waiting for hardware debugger to update handshake structure.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "No contact in %d seconds\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                }
            ],
            "symbol": "shmem_dbg_process_buffers",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kdp_core zlib memory 0x%lx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "zlib_stage_initialize failed to allocate memory. Error 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "zlib_stage_initialize",
            "prototype": "",
            "backtrace": [
                "kdp_core_init",
                "kdp_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ZERR %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                }
            ],
            "symbol": "zlib_stage_outproc",
            "prototype": "",
            "backtrace": [
                "zlib_stage_initialize",
                "kdp_core_init",
                "kdp_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s failed to allocate memory. Error 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "memory_backing_aware_buffer_stage_initialize",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "memory_backing_aware_buffer_stage_initialize",
            "prototype": "",
            "backtrace": [
                "kdp_core_init",
                "kdp_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s (passing along request) returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "%s kvtophys() for address %p returned NULL\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "%s next stage output failed\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                }
            ],
            "symbol": "memory_backing_aware_buffer_stage_outproc",
            "prototype": "",
            "backtrace": [
                "memory_backing_aware_buffer_stage_initialize",
                "kdp_core_init",
                "kdp_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "secure_core: Unable to seek to the start of file: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "Failed to dump coprocessor cores\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "Failed to dump userspace process cores\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                }
            ],
            "symbol": "kern_do_coredump",
            "prototype": "",
            "backtrace": [
                "do_kern_dump"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Registered coredump handler for %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "kern_register_coredump_helper_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "\nBeginning coredump of %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "coredump_init returned KERN_NODE_DOWN, skipping this core\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "(%s) : coredump_init failed with %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "(%s) : save_note_note_summary failed with %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "(%s) : get_summary failed with %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "Skipping coredump\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "(%s) : header size not populated after coredump_get_summary\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "(%s) : save_segment_descriptions failed with %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "(%s) : save_segment_descriptions returned without all segment descriptions written, %llu of %llu remaining\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "main bin spec",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "coredump_save_note_description"
                },
                {
                    "string": "kern ver str",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "coredump_save_note_description"
                },
                {
                    "string": "(%s) : coredump_save_note_description returned %d while writing binary info LC_NOTE description",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "(%s) : kcc_coredump_save_note_descriptions failed with %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "(%s) : save_note_descriptions returned without all note descriptions written, %llu of %llu remaining\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "(%s) : save_thread_state failed with %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "(%s) : save_thread_state returned without all thread descriptions written, %llu of %llu remaining\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "(kern_coredump_routine) : failed to write zero fill padding (%llu bytes remaining) : kdp_core_output(%p, %llu, NULL) returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "coredump_save_segment_data failed with %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "(kern_coredump_routine) : save_segment_data returned without all segment data written, %llu of %llu remaining\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "(%s) : kcc_coredump_save_sw_vers_detail_cb failed with 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "(%s) : kcc_coredump_save_sw_vers failed with 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "(%s) : kcc_coredump_save_note_data failed with 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "(%s) : kcc_coredump_save_note_data returned without all note data written, %llu of %llu remaining\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "(kern_coredump_routine) : failed to flush final core data : kdp_core_output(%p, 0, NULL) returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "Done\nCoredump complete of %s, dumped %llu segments (%llu bytes), %llu threads (%llu bytes) overall uncompressed file length %llu bytes.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "\nCore dump took %llu cycles\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "\n(kern_coredump_routine) : kern_dump_record_file failed with %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": " Compressed file length is %llu bytes\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                }
            ],
            "symbol": "kern_coredump_routine",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s(0x%llx, 0x%llx, %p) : called with invalid addresses : start 0x%llx >= end 0x%llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "%s(0x%llx, 0x%llx, %p) : coredump_save_segment_descriptions() called too many times, %llu segment descriptions already recorded\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "%s(0x%llx, 0x%llx, %p) : ran out of space to save commands with %llu of %llu remaining\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "%s(0x%llx, 0x%llx, %p) : failed to write segment %llu of %llu. kdp_core_output(%p, %lu, %p) returned error %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "%s(0x%llx, 0x%llx, %p) : called with invalid addresses for 32-bit : start 0x%llx, end 0x%llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "%s(0x%llx, 0x%llx, %p) : failed to write segment %llu of %llu : kdp_core_output(%p, %lu, %p) returned  error 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                }
            ],
            "symbol": "coredump_save_segment_descriptions",
            "prototype": "",
            "backtrace": [
                "kern_coredump_routine"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s() called with invalid data_owner\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "%s() called too many times, %llu note descriptions already recorded\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "%s() : failed to write note %llu of %llu : kdp_core_output() returned  error 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                }
            ],
            "symbol": "coredump_save_note_description",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s() : found %d expected LC_THREAD (%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "%s() : ran out of space to save threads with %llu of %llu remaining\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "%s() : failed to write thread data : kdp_core_output() returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                }
            ],
            "symbol": "coredump_save_thread_state",
            "prototype": "",
            "backtrace": [
                "kern_coredump_routine"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s() : failed to write main bin spec structure : coredump_save_note_data() returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "coredump_save_sw_vers",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                }
            ],
            "symbol": "coredump_save_sw_vers",
            "prototype": "",
            "backtrace": [
                "kern_coredump_routine"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s(%p, %llu, %p) : called with invalid length %llu\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "%s() : failed to write legacy bin spec version : coredump_save_note_data() returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "%s() : failed to write sw_vers string : coredump_save_note_data() returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "%s() : failed to write zero fill padding : kdp_core_output(%p, %llu, NULL) returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                }
            ],
            "symbol": "coredump_save_sw_vers_legacy",
            "prototype": "",
            "backtrace": [
                "kern_coredump_routine"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Skipping userspace coredump, coredump list is locked\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                },
                {
                    "string": "Failed to seek to beginning of next core\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_coredump_log"
                }
            ],
            "symbol": "kern_do_auxiliary_coredump",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ipc_entry_dealloc() @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ipc_entry_dealloc",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "corrupt hi_mod: %d, obase: %p, ocount: %d\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ipc_entry_grow_table",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ipc_eventlink_wait_block @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ipc_eventlink.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ipc_eventlink_signal_wait_until_trap_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "BUG in process %s[%d]: attempt to acquire an additional legacy external boost assertion without holding an existing legacy external assertion. (%d total, %d external, %d legacy-external)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "ipc_importance_task_hold_legacy_external_assertion",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "BUG in process %s[%d]: over-released legacy external boost assertions (%d total, %d external, %d legacy-external)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "ipc_importance_task_drop_legacy_external_assertion",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "disabling imp_receiver on task with pending importance boosts! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ipc_importance_task_mark_receiver",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "disabling de-nap on task with pending de-nap boosts! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ipc_importance_task_mark_denap_receiver",
            "prototype": "",
            "backtrace": [
                "proc_set_task_spawnpolicy",
                "posix_spawn"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "iit unexpected zero refs: %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "iit_over_release_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "Importance for ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "scnprintf"
                },
                {
                    "string": "pid %d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "hw_lock_lock"
                },
                {
                    "string": " (%d of %d boosts) %s from ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "hw_lock_lock"
                },
                {
                    "string": "donated",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "hw_lock_lock"
                },
                {
                    "string": "linked",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "hw_lock_lock"
                }
            ],
            "symbol": "ipc_importance_extract_content",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Invalid ipc_control_port_options boot-arg: pinned control port cannot be enabled without immovability enforcement. Ignoring 1p pinning boot-arg.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "Invalid ipc_control_port_options boot-arg: pinned control port cannot be enabled without immovability enforcement. Ignoring 3p pinning boot-arg.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "ipc_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "size too large for the fast kmsg zone (%d) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "non-zero aux size for kmsg type IKM_TYPE_KDATA_OOL. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ipc_kmsg_alloc",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IPC kmsg header signature mismatch: kmsg=%p, hdr=%p, id=%d, sig=0x%08x (expected 0x%08x) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ikm_signature_check_panic",
            "prototype": "",
            "backtrace": [
                "ipc_kmsg_validate_signature"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Invalid descriptor type (%p: %d) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ipc_kmsg_descriptor_invalid_type_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "Inconsistent OOL/copyout size on %p: expected %d, got %lld @%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ipc_kmsg_copyout_descriptors",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ipc_mqueue_send @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ipc_mqueue_send_locked",
            "prototype": "",
            "backtrace": [
                "ipc_kmsg_send"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Unknown waitq type (%p/0x%x) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ipc_mqueue_receive_on_thread: sleep walking @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ipc_mqueue_receive_on_thread_and_unlock",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ipc_object_copyin_from_kernel: strange rights @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ipc_object_copyin_from_kernel",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ipc_object_destroy: strange rights @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ipc_object_destroy",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ipc_object_destroy_dest: strange rights @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ipc_object_destroy_dest",
            "prototype": "",
            "backtrace": [
                "ipc_kmsg_clean_header"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ipc_object_copyout_dest: strange rights @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ipc_object_copyout_dest",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ipc object %p is neither a port or a port-set @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ipc_object_validate_preflight_panic",
            "prototype": "",
            "backtrace": [
                "ipc_object_lock_allow_invalid",
                "ipc_right_lookup_read"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Using inactive port %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ipc_port_inactive_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "send right",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "send-once right",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "port %p %s count overflow (delta: %d) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ipc_right_delta_overflow_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ipc_port_destroy: invalid state @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ipc_port_destroy",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Trying to free an active port. port %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ipc_port_finalize",
            "prototype": "",
            "backtrace": [
                "ipc_object_free"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "found receive right in space %p for port %p owned by space %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ipc_port_translate_receive_panic",
            "prototype": "",
            "backtrace": [
                "ipc_port_translate_receive"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ipc_right_terminate: strange type - 0x%x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ipc_right_terminate",
            "prototype": "",
            "backtrace": [
                "ipc_space_terminate"
            ]
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "ipc_right_destroy: strange type @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ipc_right_destroy",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "ipc_right_delta: strange right %d for 0x%x (%p) in space:%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ipc_right_delta",
            "prototype": "",
            "backtrace": [
                "mach_port_mod_refs"
            ]
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "ipc_right_copyin_check: strange rights @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ipc_right_copyin_check_reply",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ipc_right_copyout: Copyout kobject/kolabel as receive right @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Service port name = 0x%x doesnt match the stored launchd port name = 0x%x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ipc_right_copyout: strange rights @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ipc_right_copyout",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "voucher recipe underfow @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "mach_voucher_extract_all_attr_recipes",
            "prototype": "",
            "backtrace": [
                "_Xmach_voucher_extract_all_attr_recipes"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Cannot grow ipc space beyond IVAC_ENTRIES_MAX. Some process is leaking vouchers @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Failed to grow ivac table to size %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ivace_reference_by_value",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%d,%llu,%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "mach_port_kobject_description_from_user",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "mach_port_get_refs: strange rights @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "mach_port.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "mach_port_get_refs",
            "prototype": "",
            "backtrace": [
                "_Xmach_port_get_refs"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "com.apple.UNCUserNotificationAgent",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strcmp"
                },
                {
                    "string": "com.apple.syncservices.uihandler",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strcmp"
                },
                {
                    "string": "com.apple.syncservices.ConflictResolver",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strcmp"
                },
                {
                    "string": "com.apple.syncservices.SyncServer",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strcmp"
                }
            ],
            "symbol": "mach_port_construct",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.developer.arcade-operations",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "get_threadtask"
                }
            ],
            "symbol": "arcade_prepare",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.arcade.fpsd",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ipc_port_release_send"
                },
                {
                    "string": "arcade: received register request",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "arcade_register_new_upcall",
            "prototype": "",
            "backtrace": [
                "_Xarcade_register_new_upcall",
                "arcade_register_server_routine"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "arcade_upcall_refresh(get fairplayd) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "arcade.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "arcade: subscription validation upcall returned %#x",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "arcade: unable to make subscription upcall, error %#x",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "arcade_ast",
            "prototype": "",
            "backtrace": [
                "ast_taken_user",
                "user_take_ast"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ast.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ast_taken_user",
            "prototype": "",
            "backtrace": [
                "user_take_ast"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "backtrace: unknown packing format %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "backtrace.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "backtrace_internal",
            "prototype": "",
            "backtrace": [
                "backtrace"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "unable to allocate initial VA: %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__btlib_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "couldn't find stack %p in library %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__btlib_remove_notfound_panic",
            "prototype": "",
            "backtrace": [
                "__btlib_remove_locked",
                "__btlib_rehash_and_lock",
                "__btlib_callout",
                "__btlib_init"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "clock_initialize_calendar",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s WARNING: UTC time is less then sys time, (%lu s %d u) UTC (%lu s %d u) sys\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "clock_initialize_calendar",
            "prototype": "",
            "backtrace": [
                "IOKitInitializeTime",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "clock_alarm_deliver @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "clock_oldops.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "alarm_done",
            "prototype": "",
            "backtrace": [
                "clock_oldconfig",
                "machine_init",
                "kernel_bootstrap",
                "machine_startup",
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Per-coalition ledgers",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_template_create"
                },
                {
                    "string": "couldn't create coalition ledger template @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "couldn't create entries for coaliton ledger template @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Coalition task ledgers",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_template_copy"
                },
                {
                    "string": "couldn't create coalition task ledger template @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "init_coalition_ledgers",
            "prototype": "",
            "backtrace": [
                "coalitions_init",
                "kernel_bootstrap",
                "machine_startup",
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "failed to adopt task %p into default coalition: %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "coalitions_adopt_init_task",
            "prototype": "",
            "backtrace": [
                "task_create_internal"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "failed to adopt task %p into corpse coalition: %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "created task is not a member of a resource coalition @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "task_create_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "deallocating task %p was not a member of a resource coalition @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "task_release_coalitions",
            "prototype": "",
            "backtrace": [
                "task_deallocate_internal"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: could not create init %s coalition: kr:%d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: could not create corpse %s coalition: kr:%d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "coalitions_init",
            "prototype": "",
            "backtrace": [
                "kernel_bootstrap",
                "machine_startup",
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "unknown coalition policy: %d %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "jetsam_coalition_set_policy",
            "prototype": "",
            "backtrace": [
                "sys_coalition_policy_set"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "unknown coalition policy: %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "jetsam_coalition_get_policy",
            "prototype": "",
            "backtrace": [
                "sys_coalition_policy_get"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "i_coal_resource_adopt_task",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "i_coal_resource_adopt_task",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "i_coal_resource_remove_task",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "i_coal_resource_remove_task",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: task %p attempting to set role %d in coalition %p to which it does not belong! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: invalid role(%d) for task @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "i_coal_jetsam_set_taskrole",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "WARNING: more than %d pids in coalition %llu\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "coalition_get_sort_list",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "table %p ran out of compact IDs @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "compact_id.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "compact_id_get_locked",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "daemon.core-analytics-events",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "telemetry_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Unknown CA event type: %s. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "core_analytics.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "core_analytics_event_size",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d Assertion failed: %s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "Assert",
            "prototype": "",
            "backtrace": [
                "panic"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "register_additional_panic_data_buffer called with buffer already registered @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "register_additional_panic_data_buffer called with invalid producer_name @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "register_additional_panic_data_buffer called with invalid buffer pointer @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "register_additional_panic_data_buffer called with invalid length @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "register_additional_panic_data_buffer",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "/var/tmp/panic.trace",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kdbg_dump_trace_to_file"
                }
            ],
            "symbol": "panic_trap_to_debugger",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Kernel UUID: %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "ECC Corrections:%u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "Compressor Info: %u%% of compressed pages limit (%s) and %u%% of segments limit (%s) with %d swapfiles and %s swap space\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "Debugger message: %.1200s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "Device: %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "Not set yet",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "Hardware Model: %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "ECID: %02X%02X%02X%02X%02X%02X%02X%02X\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "AppleHWAccess Thread: 0x%llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "AppleHWAccess last access: no access data, this is unexpected.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "AppleHWAccess last access: %s of size %u at address 0x%llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "Boot args: %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "Memory ID: 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "OS release type: %.256s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "OS version: %.256s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "Kernel version: %.512s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "Fileset Kernelcache UUID: ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "KernelCache UUID: ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "Boot session UUID: %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "Boot session UUID not yet initialized\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "iBoot version: %.128s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "secure boot?: %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "roots installed: %lld\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "%s data: ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "Paniclog version: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "Total cpu_usage: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "Thread task pri cpu_usage\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "task->map",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic_validate_ptr"
                },
                {
                    "string": "task->map->pmap",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic_validate_ptr"
                },
                {
                    "string": "Panicked task %p: %lld pages, %d threads: ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "Panicked task %p: %d threads: ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "pid %d: %s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "unknown task",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "Panicked thread: %p, backtrace: 0x%llx, tid: %llu\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "Could not print panicked thread backtrace:frame pointer outside kernel vm.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "%.14s (%.14s)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "!! debugger synchronization failed, no stackshot !!\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "!! panicked during stackshot, skipping panic stackshot !!\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "\n** Stackshot Succeeded ** Bytes Traced %d (Uncompressed %d) **\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "\n** Stackshot Succeeded ** Bytes Traced %d **\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "\n** Stackshot Incomplete ** Bytes Filled %llu, err %d **\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "\n!! Stackshot Failed !! Bytes Traced %d, err %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "\n!! Stackshot Failed !!\nkcdata_memory_static_init returned %d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "CORE %u is offline, skipping\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "CORE %u recently retired instr at 0x%016llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "TPIDRx_ELy = {1: 0x%016llx  0: 0x%016llx  0ro: 0x%016llx }\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "CORE %u PVH locks held: ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "None\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "%u - ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "%u, %u - ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "First lock was acquired at PC=0x%016llx, LR=0x%016llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "CORE %u is the one that panicked. Check the full backtrace for details.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "CORE %u: PC=0x%016llx, LR=0x%016llx, FP=0x%016llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "%s\t  Could not read LR from frame at 0x%016llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "%s\t  Could not read FP from frame at 0x%016llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "%s\t  lr: 0x%016llx  fp: 0x%016llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "Backtrace continues...\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                }
            ],
            "symbol": "SavePanicInfo",
            "prototype": "",
            "backtrace": [
                "handle_debugger_trap"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "KernelCache slide: 0x%016lx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "KernelCache base:  %p\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "Kernel text exec slide: 0x%016lx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "Kernel text exec base:  0x%016lx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                }
            ],
            "symbol": "panic_display_kernel_aslr",
            "prototype": "",
            "backtrace": [
                "SavePanicInfo",
                "handle_debugger_trap"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Couldn't obtain preoslog region: result = %d, preoslog_pa = %p, preoslog_size = %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "sysctl_debug_get_preoslog",
            "prototype": "",
            "backtrace": [
                "sysctl_kern_debug_get_preoslog"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "/arm-io/wdt",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTLookupEntry"
                },
                {
                    "string": "awl-scratch-supported",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTGetPropertyInternal"
                }
            ],
            "symbol": "set_awl_scratch_exists_flag_and_subscribe_for_pm",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Nested panic detected - entry count: %d panic_caller: 0x%016lx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "Nested panic string:\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "\n<end nested panic string>\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Nested panic count exceeds limit %d, machine will reset or spin\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "\nNested panic stall. Stage 1 bailout. Please go to https://panic.apple.com to report this panic\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "\nIn Nested panic stall. Stage 2 bailout. Please go to https://panic.apple.com to report this panic\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                }
            ],
            "symbol": "check_and_handle_nested_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "skipping local kernel core because core file could not be opened prior to panic (mode : 0x%x, error : 0x%x)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "skipping local kernel core because the PPL is not in KERNEL state\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "Original panic string:\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic_debugger_log"
                }
            ],
            "symbol": "handle_debugger_trap",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "daemon.mcc_error-events",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "mpsc_daemon_queue_init_with_thread"
                }
            ],
            "symbol": "mcc_logging_init",
            "prototype": "",
            "backtrace": [
                "panic_with_options_and_initiator",
                "panic_with_options"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Count of %u on ecc event is too large. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ecc_logging.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ecc_log_record_event",
            "prototype": "",
            "backtrace": [
                "generic_platform_error_handler"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "cannot translate task id token from a kernel thread @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "energy_perf.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "task_id_token_to_energy_id",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mach_exception_raise_identity_protected() must be code64 @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "mach_exception_raise_state_identity_protected() must be code64 @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "bad exception behavior! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "exception_deliver",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "called exception_triage when it was forbidden by the boot environment @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "exception_triage_thread",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "DEBUG4K thread %p task %p map %p exception %d codes 0x%llx 0x%llx @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "pac_exception_triage",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: process %s[%d] hit a pac violation\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "exception_triage",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "attempted to set invalid special port %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "host.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kernel_set_special_port",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.private.xpc.launchd.event-monitor",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "mac_task_check_set_host_special_port"
                }
            ],
            "symbol": "host_set_special_port",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.developer.driverkit.family.hid.eventservice",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "host_get_special_port_from_user",
            "prototype": "",
            "backtrace": [
                "_Xhost_get_special_port_from_user"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.private.set-atm-diagnostic-flag",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "host_set_atm_diagnostic_flag",
            "prototype": "",
            "backtrace": [
                "_Xhost_set_atm_diagnostic_flag"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "port %p is an invalid host port @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "host_port_copy_send",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "trying to register kobject(%d) twice @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ipc_kobject_register_startup",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "the msgh_ids in mig_e[] aren't valid! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "mig subsystem %d (%p) replies are too large (%d > %d) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "message id = %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "multiple entries with the same msgh_id @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "the mig dispatch table is too small @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "kroutine must have precise size %d %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "mig_table_max_displ = %d mach_kobj_count = %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "mig_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ipc_kobject_server: strange destination rights @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ipc_kobject_server",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: unexpected kotype of port %p: want %d, got %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ipc_kobject_enable",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ipc_kobject_enable",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "trying to destroy a permanent port %p with kobject type: %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ipc_kobject_destroy",
            "prototype": "",
            "backtrace": [
                "ipc_port_destroy"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "ipc_kobject_label_check: attempted receive right copyout for labeled kobject @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "subst-once port %p was consumed twice @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "unexpected label: %llx @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ipc_kobject_label_check",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "port %p: invalid kobject type, got %d wanted %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "port %p: invalid kobject, got %p wanted %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ipc_kobject_require_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "unexpected make-send count: %p[%d], %d, %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ipc_kobject_dealloc_bad_mscount_panic",
            "prototype": "",
            "backtrace": [
                "ipc_kobject_dealloc_port_and_unlock"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "unexpected send right count: %p[%d], %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ipc_kobject_dealloc_bad_srights_panic",
            "prototype": "",
            "backtrace": [
                "ipc_kobject_dealloc_port_and_unlock"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "mach_msg_rpc_from_kernel @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "kernel_mach_msg_rpc @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kernel_mach_msg_rpc_common",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mach_task_self() name changed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "task_self_trap",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "userspace has control access to a kernel map %p through task %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "convert_port_to_map_with_flavor",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "strange thread flavor @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "convert_port_to_thread_with_flavor_locked",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "com.apple.private.set-exception-port",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "get_bsdtask_info"
                },
                {
                    "string": "Allowing set_exception_ports from [%s] on [%s] for entitled process/debugger\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "com.apple.security.only-one-exception-port",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "task_is_hardened_binary"
                },
                {
                    "string": "Disallowing set_exception_ports from [%s] on [%s] due to only_one_exception_port policy\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "set_exception_ports_validation",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s.%u",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "scnprintf"
                }
            ],
            "symbol": "kalloc_zone_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "kalloc_type_view_copy: Insufficient space in scratch buffer @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kalloc_type_view_copy",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "__text",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "getsectbynamefromheader"
                },
                {
                    "string": "kalloc_type_view_parse: couldn't find kext @ offset:%lx @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "kalloc_type_view_parse: No support for non-split seg KCs @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kalloc_type_view_parse",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kalloc_type_apply_policy: assigned %u zones wasted %u zones\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "kalloc_type_distribute_budget",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kalloc.type%u.%zu",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_zalloc_permanent"
                },
                {
                    "string": "kalloc.%zu",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "kalloc_type_create_zone_for_size",
            "prototype": "",
            "backtrace": [
                "kalloc_type_create_zones_fixed",
                "kalloc_type_view_init_fixed",
                "kalloc_init"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kt_var_heaps is too small @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kalloc_type_view_init_var",
            "prototype": "",
            "backtrace": [
                "kalloc_init"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kalloc_heap_startup_init: invalid KHEAP_ID: %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kheap_startup_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "KT_NOSHARED used w/o private accounting for view %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kalloc_type_assign_zone_fixed",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Size\ttotal_sig\tunique_signatures\tzones\tzones_sig\tzones_type\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%u\t%u\t%u\t%u\t%u\t%u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "kalloc_type_create_zones_fixed",
            "prototype": "",
            "backtrace": [
                "kalloc_type_view_init_fixed",
                "kalloc_init"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kalloc_data_require failed: address %p in [%s%s] @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "kalloc_data_require failed: address %p in [%s%s], size too large %zd > %zd @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "kalloc_data_require failed: address %p not in zone native map @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kalloc_data_require_panic",
            "prototype": "",
            "backtrace": [
                "kalloc_data_require"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kfree: addr %p trying to free with nonsensical size %zd @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kfree_size_invalid_panic",
            "prototype": "",
            "backtrace": [
                "kfree_ext"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kfree: addr %p, size %zd (offs:%zd) found in zone '%s%s' with elem_size %zd @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "kfree: addr %p, size %zd (offs:%zd) not found in any zone @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kfree_size_confusion_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "kfree: addr %p found in kalloc type zone '%s'but being freed to %s heap @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "kfree: addr %p, size %zd found in regular zone '%s%s' @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "kfree: addr %p, size %zd found in heap %s* instead of %s* @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kfree_heap_confusion_panic",
            "prototype": "",
            "backtrace": [
                "kfree_zone"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "krealloc: addr %p trying to free with nonsensical size %zd @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "krealloc_size_invalid_panic",
            "prototype": "",
            "backtrace": [
                "krealloc_ext"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kern_apfs_reflock_t %p was already destroyed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "kern_apfs_reflock_t %p was allocated. kern_apfs_reflock_free should be called instead of kern_apfs_reflock_destroy @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "kern_apfs_reflock_t %p: destroying a reflock currently locked by ctid %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "kern_apfs_reflock_t %p: destroying a reflock with threads currently waiting or in the process of waiting @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kern_apfs_reflock_destroy",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "kern_apfs_reflock_t %p was not allocated. kern_apfs_reflock_destroy should be called instead of kern_apfs_reflock_free @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "kern_apfs_reflock_t %p is already in the process of being freed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "kern_apfs_reflock_t %p: freeing a reflock currently locked by ctid %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kern_apfs_reflock_free",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Cannot use KERN_APFS_REFLOCK_IN_FORCE and KERN_APFS_REFLOCK_IN_LOCK_IF_FIRST together @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "kern_apfs_reflock: too many refs for %p thread %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kern_apfs_reflock_try_get_ref",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Cannot use KERN_APFS_REFLOCK_IN_FORCE and KERN_APFS_REFLOCK_IN_LOCK_IF_LAST together @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "kern_apfs_reflock: over releasing reflock %p thread %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kern_apfs_reflock_try_put_ref",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Trying to lock a reflock owned by the same thread %p, reflock %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kern_apfs_reflock_try_lock",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "kern_apfs_reflock: kern_apfs_rl_waiters are 0 when trying to wait reflock %p thread %p. Probably a try* function with a positive will_wait wasn't called before waiting. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Trying to wait on a reflock owned by the same thread %p, reflock %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kern_apfs_reflock_wait_for_unlock",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Unlocking swiref_t %p from thread ctid %u owned by ctid %u @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kern_apfs_reflock_unlock",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "Attempt to create a ledger template with more than MAX_LEDGER_ENTRIES. MAX_LEDGER_ENTRIES=%lu, old_cnt=%u, new_cnt=%u\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ledger_entry_add_with_flags",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "ledger_entry_check_new_balance(%p,%d): negative ledger %p credit:%lld debit:0 balance:%lld @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ledger_entry_check_new_balance(%p,%d): negative ledger %p credit:%lld debit:%lld balance:%lld @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ledger_entry_check_new_balance",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Compatibility APIs",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "lck_grp_init_flags"
                }
            ],
            "symbol": "lck_group_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "lck_debug_state: feature %d imbalance @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "lock_group.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "lck_grp_disable_feature",
            "prototype": "",
            "backtrace": [
                "lockstat_disable"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "Mutex to destroy still has waiters: %p: <0x%06x 0x%02x 0x%08x 0x%08x/%p 0x%04x 0x%04x> @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "lck_mtx_destroy",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "lck_mtx_assert(): invalid arg (%u) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "lck_mtx_assert",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Invalid/destroyed mutex %p: <0x%06x 0x%02x 0x%08x 0x%08x/%p 0x%04x 0x%04x> @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__lck_mtx_invalid_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Mutex interlock[%p] timeout after %llu ticks; current owner: %p, <0x%06x 0x%02x 0x%08x 0x%08x 0x%04x 0x%04x>, start time: %llu, now: %llu, timeout: %llu @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "lck_mtx_ilk_timeout_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Mutex %p is held as a full-mutex (spin-always lock attempted) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__lck_mtx_lock_is_sleepable_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Mutex %p is unexpectedly not owned by thread %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__lck_mtx_not_owned_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Mutex %p is unexpectedly owned by thread %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__lck_mtx_owned_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Invalid/destroyed ptr spinlock %p: <%p %d 0x%04x> @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__hw_lck_ptr_invalid_panic",
            "prototype": "",
            "backtrace": [
                "__smr_shash_rehash_with_target",
                "__smr_shash_rehash",
                "smr_shash_init"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Ptr spinlock[%p] timeout after %llu ticks; ptr_value: %p, mcs_tail: 0x%04x, start time: %llu, now: %llu, timeout: %llu @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "hw_lck_ptr_timeout_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "Releasing non-exclusive RW lock without a reader refcount! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "lck_rw_done",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "lck_rw_unlock(): Invalid RW lock type: %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "lck_rw_unlock",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s was called with an invalid blocking type @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "kdp_rwlck_find_owner",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kdp_rwlck_find_owner",
            "prototype": "",
            "backtrace": [
                "stackshot_thread_wait_owner_info",
                "kdp_stackshot_record_task"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "rw lock count underflow for thread %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__lck_rw_lock_count_dec_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Invalid HW ticket lock %p <0x%08x> @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__hw_lck_ticket_invalid_panic",
            "prototype": "",
            "backtrace": [
                "hw_lck_ticket_destroy"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Invalid ticket lock %p <0x%08x 0x%08x 0x%08x 0x%08x> @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__lck_ticket_invalid_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Ticket spinlock[%p] timeout after %llu ticks; cticket: 0x%x, nticket: 0x%x, waiting for 0x%x, current owner: %p (on CPU %d), start time: %llu, now: %llu, timeout: %llu @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "lck_ticket_timeout_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Ticket spinlock[%p] timeout after %llu ticks; cticket: 0x%x, nticket: 0x%x, valid: %d, start time: %llu, now: %llu, timeout: %llu @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Ticket spinlock[%p] timeout after %llu ticks; cticket: 0x%x, nticket: 0x%x, waiting for 0x%x, valid: %d, start time: %llu, now: %llu, timeout: %llu @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "hw_lck_ticket_timeout_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Ticket lock %p is unexpectedly not owned by thread %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__lck_ticket_not_owned_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Ticket lock %p is unexpectedly owned by thread %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__lck_ticket_owned_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Spinlock[%p] timeout after %llu ticks; current owner: %p, start time: %llu, now: %llu, timeout: %llu @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Spinlock[%p] timeout after %llu ticks; current owner: %p (on cpu %d), start time: %llu, now: %llu, timeout: %llu @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "hw_spin_timeout_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Spinlock[%p] timeout after %llu ticks; current value: 0x%08x, start time: %llu, now: %llu, timeout: %llu @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "hw_lock_bit_timeout_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "wait_while_equals32[%p] timeout after %llu ticks; current value: 0x%08x, start time: %llu, now: %llu, timeout: %llu @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "hw_wait_while_equals32_panic",
            "prototype": "",
            "backtrace": [
                "ml_wait_for_cpu_signal_to_enable"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "wait_while_equals64[%p] timeout after %llu ticks; current value: 0x%016llx, start time: %llu, now: %llu, timeout: %llu @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "hw_wait_while_equals64_panic",
            "prototype": "",
            "backtrace": [
                "_mpsc_queue_wait_for_enqueuer"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "hwlock: thread %p is trying to lock %p recursively @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "hw_lock_lock_contended",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Attempt to take no-preempt lock %p in preemptible context @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__lck_require_preemption_disabled_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Gate used is invalid. gate %p data %lx turnstile %p refs %d flags %x  @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "gate_verify_tag_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Gate used was destroyed. gate %p data %lx turnstile %p refs %d flags %x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "gate_verify_destroy_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Trying to destroy a gate that was allocated by gate_alloc_init(). gate_free() should be used instead, gate %p thread %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "gate_destroy_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Trying to destroy a gate owned by %p. Gate %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "gate_destroy_owned_panic",
            "prototype": "",
            "backtrace": [
                "gate_destroy_internal"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Trying to destroy a gate with waiters. Gate %p data %lx turnstile %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "gate_destroy_waiter_panic",
            "prototype": "",
            "backtrace": [
                "gate_destroy_internal"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Trying to free a gate that was not allocated by gate_alloc_init(), gate %p thread %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "gate_free_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Trying to close a gate already closed gate %p holder %p current_thread %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "gate_already_owned_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Trying to open a gate %p owned by %p from current_thread %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Trying to handoff a gate %p owned by %p from current_thread %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "gate_not_owned_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Trying to wait on a not closed gate %p from current_thread %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Trying to steal a not closed gate %p from current_thread %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "gate_not_closed_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Too many refs taken on gate. gate %p data %lx turnstile %p refs %d flags %x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "gate_too_many_refs_panic",
            "prototype": "",
            "backtrace": [
                "gate_wait"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "invalid %s flag %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "gate_assert",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "gate_assert",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "Invalid size %d for ml_io_read(%p) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Read from IO vaddr 0x%lx paddr 0x%lx took %llu ns, result: 0x%llx (start: %llu, end: %llu), ceiling: %llu @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ml_io_read",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "Invalid size %d for ml_io_write(%p, 0x%llx) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Write to IO vaddr %p paddr %p val 0x%llx took %llu ns, (start: %llu, end: %llu), ceiling: %llu @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ml_io_write",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "can't allocate cpu_callback_chain_elem @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "cpu_event_register_callback",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Unfortunately, cpu_event_unregister_callback is unimplemented. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "cpu_event_unregister_callback",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ml-timeout-",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlen"
                },
                {
                    "string": "/machine-timeouts",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTLookupEntry"
                },
                {
                    "string": "/chosen/machine-timeouts",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTLookupEntry"
                },
                {
                    "string": "%s: unexpected machine timeout data_size %u for /machine-timeouts/%s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: unexpected machine timeout data_size %u for /chosen/machine-timeouts/%s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: unexpected machine timeout data_size %u for /machine-timeouts/%s-scale @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: unexpected machine timeout data_size %u for /chosen/machine-timeouts/%s-scale @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: unexpected machine timeout data_size %u for /machine-timeouts/global-scale @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: unexpected machine timeout data_size %u for /chosen/machine-timeouts/global-scale @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ml-timeout-global-scale",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                }
            ],
            "symbol": "machine_timeout_init_with_suffix",
            "prototype": "",
            "backtrace": [
                "machine_timeout_init"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "daemon.deferred-deallocation",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "bsd_setthreadname"
                },
                {
                    "string": "thread_deallocate_daemon_init: creating daemon failed (%d) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "thread_deallocate_daemon_init",
            "prototype": "",
            "backtrace": [
                "thread_daemon_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mpsc_queue[%p]: use after cancelation @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "_mpsc_daemon_queue_enqueue",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Waiting for DSMOS...\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "dsmos_page_transform",
            "prototype": "",
            "backtrace": [
                "unprotect_dsmos_segment",
                "load_segment"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "0123456789abcdef0123456789ABCDEF",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlen"
                }
            ],
            "symbol": "__doprnt_0",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Unexpected boot pset cluster type %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "processor_bootstrap",
            "prototype": "",
            "backtrace": [
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "processor_boot() missing for cpu %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "cpu %d failed to %s, waited %d seconds\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s>cpu %d still in shutdown @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s>cpu %d not online @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "processor_wait_for_start",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "processor %d already booted @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "processor_boot",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "recount: unexpected rollup request from %d to %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "recount_rollup",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "sched_clutch_bucket_group_interactive_pri",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                }
            ],
            "symbol": "sched_edge_init",
            "prototype": "",
            "backtrace": [
                "sched_init",
                "kernel_bootstrap",
                "machine_startup",
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "Unexpected sched_bucket passed to sched_edge_cluster_cumulative_count_decr() @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "sched_clutch thread count underflowed! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "sched_clutch_thread_remove",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Unexpected sched_bucket passed to sched_edge_cluster_cumulative_count_incr() @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "sched_clutch thread count overflowed! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "sched_clutch_processor_enqueue",
            "prototype": "",
            "backtrace": [
                "thread_setrun"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Scheduler: Default of %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "sched_pri_decay_limit",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "kern.sched_pri_decay_limit",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_get_default"
                },
                {
                    "string": "Setting scheduler priority decay band limit %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "sched_debug",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "Scheduler: Debug flags 0x%08x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "sched_init",
            "prototype": "",
            "backtrace": [
                "kernel_bootstrap",
                "machine_startup",
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "standard timeslicing quantum is %d us\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "standard background quantum is %d us\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "sched_decay_penalty",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "Overriding scheduler decay penalty %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "sched_decay_usage_age_factor",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "Overriding scheduler decay usage age factor %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "sched_timeshare_init",
            "prototype": "",
            "backtrace": [
                "sched_edge_init",
                "sched_init",
                "kernel_bootstrap",
                "machine_startup",
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "Invalid attempt to wait while running the idle thread @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "thread_mark_wait_locked",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "assert_wait",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "assert_wait",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "assert_wait_timeout",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "assert_wait_timeout",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "assert_wait_timeout_with_leeway",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "assert_wait_timeout_with_leeway",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "assert_wait_deadline",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "assert_wait_deadline",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "assert_wait_deadline_with_leeway",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "assert_wait_deadline_with_leeway",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "thread_wakeup_prim",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "thread_wakeup_prim",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "Non-monotonic time: dispatch at 0x%llx, runnable at 0x%llx @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "thread_dispatch",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Unrecognized scheduler IPI event type %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "sched_ipi_policy",
            "prototype": "",
            "backtrace": [
                "sched_edge_ipi_policy",
                "sched_ipi_action"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "idle_thread_create failed: %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "idle #%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "idle_thread_create",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "sched_startup @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "sched_startup",
            "prototype": "",
            "backtrace": [
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "sched_maintenance_thread",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "bsd_setthreadname"
                }
            ],
            "symbol": "sched_init_thread",
            "prototype": "",
            "backtrace": [
                "sched_startup",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "sched_cpu_init_completed called twice! %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "failed to create sched_update_powered_cores thread @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "sched_update_powered_cores",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "bsd_setthreadname"
                }
            ],
            "symbol": "sched_cpu_init_completed",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Attempting to sleep before all CPUS are registered @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "sched_override_available_cores_for_sleep",
            "prototype": "",
            "backtrace": [
                "__Z16IOCPUSleepKernelv",
                "__ZN16IOPlatformExpert11sleepKernelEv"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "unknown mode %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "sched_processor_change_mode_locked",
            "prototype": "",
            "backtrace": [
                "processor_init"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "shutting down the last available core! online: 0x%llx rec: 0x%llxx @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "sched_mark_processor_offline",
            "prototype": "",
            "backtrace": [
                "processor_offline",
                "processor_doshutdown"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "thread_invoke: preemption_level %d, possible cause: %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "unlocking an unlocked mutex or spinlock",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "blocking while holding a spinlock, or within interrupt context",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Non-monotonic time: invoke at 0x%llx, runnable at 0x%llx @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Invalid attempt to context switch an offline processor @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "thread_invoke",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "no last resort cpu found! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "thread_setrun",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s>calling sched_update_powered_cores to suspend powerdown\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "suspend_cluster_powerdown_locked",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "suspend_cluster_powerdown_locked",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s>calling sched_update_powered_cores to resume powerdown\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "resume_cluster_powerdown_locked",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "resume_cluster_powerdown() called with pcs.pcs_powerdown_suspend_count=%d\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "resume_cluster_powerdown_locked",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "recommended core failsafe kicked in for %lld ms likely due to %s[%d] thread 0x%llx spending %lld ms on cpu at realtime priority - new recommendation: 0x%llx -> 0x%llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "sched_timeshare_maintenance_continue",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s> no last resort cpu found: 0x%llx 0x%llx @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "sched_update_recommended_cores_locked",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "sched_update_recommended_cores_locked",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Invalid SFI class 0x%x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Duplicate SFI registration for class 0x%x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "sfi_class_register",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Gap in registered SFI classes @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "sfi_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Invalid queue linkage: elt:%p next:%p next->prev:%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__smr_linkage_invalid",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Invalid queue tail (element past end): elt:%p elt->next:%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Invalid queue tail (early end): elt:%p tail:%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__smr_tail_invalid",
            "prototype": "",
            "backtrace": [
                "smr_mark_active_trackers_stalled",
                "thread_dispatch"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Unable to find item %p (linkage %p) in %p (traits %p) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__smr_shash_missing_elt_panic",
            "prototype": "",
            "backtrace": [
                "__smr_shash_entered_mut_begin"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kernel_stack_pages",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "stack_init: stack size %p not a multiple of page size %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "stack.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "stack_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Section %s,%s missing @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Section %s,%s has invalid size @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kernel_startup_bootstrap",
            "prototype": "",
            "backtrace": [
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "chosen",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTLookupEntry"
                },
                {
                    "string": "unexpected tunable size %u in DT entry %s/%s/%s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kernel_startup_tunable_dt_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s[%d, rank %d]: %p(%p)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "kernel_startup_initialize_upto",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "%s: reached phase %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "kernel_startup_initialize_upto",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kern.serverperfmode",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_get_default"
                }
            ],
            "symbol": "scale_setup",
            "prototype": "",
            "backtrace": [
                "kernel_bootstrap",
                "machine_startup",
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "load_context @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "load_context",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "NULL continuation passed to %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "thread_handoff_parameter",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "syscall_subr.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "thread_handoff_parameter",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kern_invalid mach trap",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "DebuggerWithContext"
                }
            ],
            "symbol": "kern_invalid",
            "prototype": "",
            "backtrace": [
                "mach_syscall",
                "sleh_synchronous",
                "_fleh_synchronous"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Warning: max_task_pmem %d below minimum.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Limiting task physical memory footprint to %d MB\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Limiting task physical memory warning to %d%%\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "hwm_user_cores",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "task_wakeups_monitor_rate",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "task_wakeups_monitor_interval",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "task_wakeups_monitor_ustackshots_trigger_pct",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "task_iomon_limit_mb",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "task_iomon_interval_secs",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "io_telemetry_limit",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "task_init @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "task_init",
            "prototype": "",
            "backtrace": [
                "kernel_bootstrap",
                "machine_startup",
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Per-task ledger",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_template_create"
                },
                {
                    "string": "couldn't create task ledger template @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "tkm_private",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "tkm_shared",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "phys_mem",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "wired_mem",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "conclave_mem",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "internal",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "iokit_mapped",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "mappings",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "alternate_accounting",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "alternate_accounting_compressed",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "page_table",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "phys_footprint",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "internal_compressed",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "reusable",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "external",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "purgeable_volatile",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "purgeable_nonvolatile",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "purgeable_volatile_compress",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "purgeable_nonvolatile_compress",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "tagged_nofootprint",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "tagged_footprint",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "tagged_nofootprint_compressed",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "tagged_footprint_compressed",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "network_volatile",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "network_nonvolatile",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "network_volatile_compressed",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "network_nonvolatile_compressed",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "media_nofootprint",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "media_footprint",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "media_nofootprint_compressed",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "media_footprint_compressed",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "graphics_nofootprint",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "graphics_footprint",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "graphics_nofootprint_compressed",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "graphics_footprint_compressed",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "neural_nofootprint",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "neural_footprint",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "neural_nofootprint_compressed",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "neural_footprint_compressed",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "neural_nofootprint_total",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "platform_idle_wakeups",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "interrupt_wakeups",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "couldn't create entries for task ledger template for SFI class 0x%x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "cpu_time_billed_to_me",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "cpu_time_billed_to_others",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "physical_writes",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "logical_writes_to_external",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "fs_metadata_writes",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "energy_billed_to_me",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "energy_billed_to_others",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "memorystatus_dirty_time",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "swapins",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "couldn't create entries for task ledger template @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "init_task_ledgers",
            "prototype": "",
            "backtrace": [
                "coalitions_init",
                "kernel_bootstrap",
                "machine_startup",
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "task_deallocate(%p): volatile_objects=%d nonvolatile_objects=%d owned=%d\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "task_deallocate_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "Failed to send exception EXC_CORPSE_NOTIFY. error code: %d for pid %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "task_deliver_crash_notification",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "warning: %s(%d) failed to copyout suspension token for pid %d with error: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "task_suspend",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "warning: %s(%d) performed out-of-band resume on pid %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "task_resume",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "couldn't take coredump of %s[%d]: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "coredump of %s[%d] taken in %d secs %d microsecs\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "process %s[%d] crossed memory high watermark (%d MB); EXC_RESOURCE suppressed by a boot-arg.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "process %s [%d] crossed memory %s (%d MB); EXC_RESOURCE \n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "high watermark",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "diagnostics limit",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "process %s[%d] crossed memory high watermark (%d MB); EXC_RESOURCE suppressed due to audio playback.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "PROC_CROSSED_HIGH_WATERMARK__SEND_EXC_RESOURCE_AND_SUSPEND",
            "prototype": "",
            "backtrace": [
                "task_footprint_exceeded",
                "init_task_ledgers",
                "coalitions_init",
                "kernel_bootstrap",
                "machine_startup",
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "FATAL ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "send_resource_violation(CPU wakes, ...): error %#x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "process %s[%d] caught waking the CPU %llu times over ~%llu seconds, averaging %llu wakes / second and violating a %slimit of %llu wakes over %llu seconds.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "SENDING_NOTIFICATION__THIS_PROCESS_IS_CAUSING_TOO_MANY_WAKEUPS",
            "prototype": "",
            "backtrace": [
                "task_wakeups_rate_exceeded",
                "init_task_ledgers",
                "coalitions_init",
                "kernel_bootstrap",
                "machine_startup",
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "send_resource_violation(disk_writes, ...): error %#x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "process [%d] caught causing excessive I/O (flavor: %d). Task I/O: %lld MB. [Limit : %lld MB per %lld secs]\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "SENDING_NOTIFICATION__THIS_PROCESS_IS_CAUSING_TOO_MUCH_IO",
            "prototype": "",
            "backtrace": [
                "task_io_rate_exceeded",
                "init_task_ledgers",
                "coalitions_init",
                "kernel_bootstrap",
                "machine_startup",
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "com.apple.private.skip.pac.exception",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "get_bsdtask_info"
                },
                {
                    "string": "com.apple.private.pac.exception",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic_proc_ro_task_backref_mismatch"
                }
            ],
            "symbol": "task_set_pac_exception_fatal_flag",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.security.fatal-exceptions",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic_proc_ro_task_backref_mismatch"
                }
            ],
            "symbol": "task_set_jit_exception_fatal_flag",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "proc_ro->task backref mismatch: t=%p, ro=%p, proc_ro_task(ro)=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "panic_proc_ro_task_backref_mismatch",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "unknown tier %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "proc_tier_to_iopol",
            "prototype": "",
            "backtrace": [
                "thread_get_requested_policy_spinlocked"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "max_cpumon_percentage",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "kern.max_cpumon_percentage",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_get_default"
                },
                {
                    "string": "max_cpumon_interval",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "kern.max_cpumon_interval",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_get_default"
                },
                {
                    "string": "task_policy_suppression_flags",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                }
            ],
            "symbol": "proc_init_cpumon_params",
            "prototype": "",
            "backtrace": [
                "task_init",
                "kernel_bootstrap",
                "machine_startup",
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "Attempting to set task policy on kernel_task @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "task_policy_update_internal_locked",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "unknown task policy: %d %d %d %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "proc_set_task_policy_locked",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "process %s[%d] denied attempt to escape CPU monitor (missing required entitlement).\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "proc_set_task_ruse_cpu",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "threads",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_ext"
                }
            ],
            "symbol": "thread_zone_startup",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "thread_corpse_continue @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "thread_corpse_continue",
            "prototype": "",
            "backtrace": [
                "task_duplicate_map_and_threads",
                "task_generate_corpse_internal"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Thread %p terminating with vm_faults disabled. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "depress timer failed to inactivate!thread: %p depress_timer_active: %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "wait timer failed to inactivate!thread: %p, wait_timer_active: %d, wait_timer_armed: %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "thread_terminate_self",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "daemon.thread-stack",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "mpsc_daemon_queue_init_with_thread"
                },
                {
                    "string": "thread_daemon_init: thread_stack_daemon @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "daemon.thread-exception",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "mpsc_daemon_queue_init_with_thread"
                },
                {
                    "string": "thread_daemon_init: thread_exception_daemon @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "daemon.thread-backtrace",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "mpsc_daemon_queue_init_with_thread"
                },
                {
                    "string": "thread_daemon_init: thread_backtrace_daemon @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "thread_daemon_init",
            "prototype": "",
            "backtrace": [
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "guard_exc_info %llx %llx @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "guard_ast",
            "prototype": "",
            "backtrace": [
                "ast_taken_user",
                "user_take_ast"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "process %s[%d] thread %llu caught burning CPU! It used more than %d%% CPU over %u seconds\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "  (actual recent usage: %d%% over ~%llu seconds)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "  Thread lifetime cpu usage %d.%06ds, (%d.%06d user, %d.%06d sys)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "  Ledger balance: %lld; mabs credit: %lld; mabs debit: %lld\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "  mabs limit: %llu; mabs period: %llu ns; last refill: %llu ns%s.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": " [fatal violation]",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "send_resource_violation(CPU usage, ...): error %#x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "SENDING_NOTIFICATION__THIS_THREAD_IS_CONSUMING_TOO_MUCH_CPU",
            "prototype": "",
            "backtrace": [
                "thread_cputime_callback",
                "thread_init",
                "kernel_bootstrap",
                "machine_startup",
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "CPU usage monitor activated, but blocking thread limit exists @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "thread_set_cpulimit",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "thread_terminate_continue @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "thread_terminate_continue",
            "prototype": "",
            "backtrace": [
                "thread_terminate_self"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "thread_deallocate: thread not properly terminated @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "thread_deallocate_complete",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Per-thread ledger",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_template_create"
                },
                {
                    "string": "couldn't create thread ledger template @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "couldn't create cpu_time entry for thread ledger template @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "thread_init",
            "prototype": "",
            "backtrace": [
                "kernel_bootstrap",
                "machine_startup",
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "idle thread calling thread_terminate! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "thread_terminate @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "thread_terminate",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "unsafe act_set_kperf operation @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "act_set_kperf",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "thread_call_initialize failed (%d) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "thread_call_initialize",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "trying to cancel NULL func @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "thread_call_func_cancel",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Invalid thread call qos value: %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "thread_call_allocate_with_qos",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "(%p %p) Refcount negative: %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "(%p %p) freeing an uninitialized call @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "(%p %p) freeing a running once call @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "thread_call_free",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "(%p %p) thread_call_cancel_wait: can't wait on thread call whose storage I don't own @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "(%p %p) unsafe thread_call_cancel_wait @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "thread_call_cancel_wait: deadlock waiting on self from inside call: %p to function %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "thread_call_cancel_wait",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "invalid timer flavor: %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "thread_call_delayed_timer",
            "prototype": "",
            "backtrace": [
                "thread_call_initialize"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Unable to wake up idle thread for termination (%d) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "thread_call_dealloc_timer",
            "prototype": "",
            "backtrace": [
                "thread_call_initialize"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "_internal_call_allocate: thread_call_internal_queue empty @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "thread_call_enter_delayed_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "thread_call_daemon",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "bsd_setthreadname"
                }
            ],
            "symbol": "thread_call_daemon",
            "prototype": "",
            "backtrace": [
                "thread_call_initialize"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "cannot create new thread call thread %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "thread call %s #%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "thread_call_daemon_continue",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "thread_terminate() returned? @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "(%p %p) call on pending_queue from wrong group %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "pending call with NULL func: %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "thread_call_thread: preemption_level %d, last callout %p(%p, %p) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "kcall worker unable to assert wait %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "thread_call_thread",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "(%p %p) call finishing from wrong group: %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "(%p %p) thread_call_finish: detected over-released thread call @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "thread_call_finish",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "thread_groups",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_ext"
                },
                {
                    "string": "io storage",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__strncpy_chk"
                },
                {
                    "string": "perf_controller",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__strncpy_chk"
                }
            ],
            "symbol": "thread_group_init",
            "prototype": "",
            "backtrace": [
                "kernel_bootstrap",
                "machine_startup",
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "thread_group.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "sched_perfcontrol_thread_group_recommend() not supported on the Edge scheduler @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "sched_perfcontrol_thread_group_recommend",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "unknown effective QoS: %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "unknown requested QoS: %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "thread_update_qos_cpu_time_locked",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "Unrecognized QoS %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "thread_recompute_priority",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "unknown task policy: %d %d %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "proc_set_thread_policy_spinlocked",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "timer_longterm_update_master() on non-boot cpu @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "timer_call.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "timer_longterm_update",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Longterm timer threshold: %llu ms\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "timer_call_init",
            "prototype": "",
            "backtrace": [
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Needs implementation for turnstile_recompute_priority @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "turnstile_recompute_priority_locked",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ts_htable_buckets",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "Turnstiles hash table memory allocation failed! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "turnstiles_init",
            "prototype": "",
            "backtrace": [
                "kernel_bootstrap",
                "machine_startup",
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "Missing type in flags (%x) for inheritor (%p) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "turnstile_update_inheritor",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Inheritor flags not passed in turnstile_update_inheritor @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "turnstile_update_inheritor_priority_chain",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "turnstile_is_send_turnstile() called outside of kernel debugger context @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kdp_turnstile_traverse_inheritor_chain",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Couldn't allocate send right for ux_handler_port! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "host_set_exception_ports failed to set ux_handler! %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ux_handler_setup",
            "prototype": "",
            "backtrace": [
                "bsdinit_task",
                "bsd_ast",
                "ast_taken_user",
                "user_take_ast"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "wqsize",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                }
            ],
            "symbol": "waitq_bootstrap",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "thread already waiting on %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Trying to assert_wait on a turnstile proxy that hasn't been donated one (waitq: %p) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "waitq_assert_wait64_locked",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Trying to clear_wait on a turnstile proxy that hasn't been donated one (waitq: %p) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "waitq_pull_thread_locked",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "waitq(%p) lock timeout after %llu ticks; cpu=%d, cticket: 0x%x, nticket: 0x%x, waiting for 0x%x, start time: %llu, now: %llu, timeout: %llu @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "waitq_timeout_handler",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "WI%lld (pid %d)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "kern_work_interval_create",
            "prototype": "",
            "backtrace": [
                "work_interval_ctl"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "zone %p isn't in the zone_array @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "zone_invalid_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "zone_submap_alloc_sequestered_va() of %u pages failed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "zone_fill_initially",
            "prototype": "",
            "backtrace": [
                "fsevents_init"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Zone %s should be empty upon userspace reboot. Actual size: %lu. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "zone_userspace_reboot_checks",
            "prototype": "",
            "backtrace": [
                "exec_mach_imgact",
                "exec_activate_image"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kalloc.%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "mach_memory_info_sample",
            "prototype": "",
            "backtrace": [
                "mach_memory_info"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "zone_create: element size too large: %zd @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ZC_NOCACHING",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_panic"
                },
                {
                    "string": "ZC_NOGC",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_panic"
                },
                {
                    "string": "ZC_DATA",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_panic"
                },
                {
                    "string": "Fragmentation greater than 10%% with elem size %d zone %s%s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ZC_PGZ_USE_GUARDS",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_panic"
                },
                {
                    "string": "zone_create: invalid desired zone ID %d for %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "zone_create: ID %d (%s) must be permanent @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "zone_create: creating zone ID %d (%s) twice @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "zone_create_ext",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "zdestroy: Zone %s%s isn't empty at zdestroy() time @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "zdestroy",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "zc_mag_size",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                }
            ],
            "symbol": "zone_bootstrap",
            "prototype": "",
            "backtrace": [
                "vm_mem_bootstrap",
                "kernel_bootstrap",
                "machine_startup",
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "vm_page",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "vm_packing_verify_range"
                },
                {
                    "string": "ksubmap[%s]: failed to make first entry (%d) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ksubmap[%s]: failed to make last entry (%d) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "zone_submap_init",
            "prototype": "",
            "backtrace": [
                "zone_init"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "zsize",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "NOTE: zonemap size reduced from 0x%lx to 0x%lx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "zone_set_map_sizes",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vm.permanent",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_ext"
                },
                {
                    "string": "vm.permanent.percpu",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_ext"
                },
                {
                    "string": "zcc_magazine_zone",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_ext"
                }
            ],
            "symbol": "zone_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "zone bound checks: address %p is a per-cpu allocation @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "zone bound checks: buffer %p of length %zd overflows object %p of size %zd in zone %p[%s%s] @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "zone_element_bounds_check_panic",
            "prototype": "",
            "backtrace": [
                "zone_element_bounds_check"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "zone_require failed: address not in a zone (addr: %p) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "zone_require failed: invalid zone index %d (addr: %p, expected: %s%s) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "zone_require failed: address in unexpected zone id %d (%s%s) (addr: %p, expected: %s%s) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "zone_require_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "addr %p being freed to zone %s%s%s, isn't from zone map @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "metadata %p corresponding to addr %p being freed to zone %s%s%s, is marked as secondary per cpu page @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "metadata %p corresponding to addr %p being freed to zone %s%s%s, has chunk len greater than max @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "addr %p being freed to zone %s%s%s, isn't aligned to zone element size @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "zone_invalid_element_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%p expected in zone %s%s[%d], but metadata has invalid zidx: %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%p not in the expected zone %s%s[%d], but found in %s%s[%d] @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "zone_page_metadata_index_confusion_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "zone element pointer validation failed (addr: %p, zone %s%s) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "zone_invalid_element_addr_panic",
            "prototype": "",
            "backtrace": [
                "zone_invalid_element_panic"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "zone bits allocator freelist is corrupt (%p <-> %p) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "zba_chain_corruption_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "zba_populate: out of bitmap space, likely due to memory leak in zone [%s%s] (%u%c, %d elements allocated) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "zba_memory_exhausted",
            "prototype": "",
            "backtrace": [
                "zba_grow",
                "zcram_and_lock"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "zone bits allocator head[%d:%d:%p] is corrupt @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "zba_head_corruption_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "accounting mismatch (%s) for zone %s%s, meta %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "zone_page_meta_accounting_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "metadata list corruption through element %p detected in zone %s%s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "zone_page_metadata_list_corruption",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "zfree_drop",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: double free of %p to zone %s%s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "zone_meta_double_free_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "zm_bitmap",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_page_meta_accounting_panic"
                }
            ],
            "symbol": "zone_meta_find_and_clear_bit",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "\n%5d: 0x%016lx",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "scnprintf"
                },
                {
                    "string": "[%s%s]: element modified after free (off:%d, val:0x%016lx, sz:%d, ptr:%p)%s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "zalloc_uaf_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "zalloc[%d]: zone map exhausted while allocating from zone [%s%s], likely due to memory leak in zone [%s%s] (%u%c, %d elements allocated) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "zone_expand_locked",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "zone map exhaustion: waited for %dms (pages: %ld, max: %ld, wanted: %d) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZONE_MAP_EXHAUSTED_AND_WAITING_FOR_GC__",
            "prototype": "",
            "backtrace": [
                "zone_expand_locked"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "zalloc(Z_NOFAIL) can't be satisfied for zone %s%s (potential leak) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "zone_nofail_panic",
            "prototype": "",
            "backtrace": [
                "zalloc_item"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "zalloc_ro_mut failed: source (%p) not from same zone as dst (%p) (expected: %s, actual: %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "zalloc_ro_mut failed: source (%p, phys %p) not from RO zone map (%p - %p), current stack (%p - %p) or const memory (phys %p - %p) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "zalloc_ro_mut_validation_panic",
            "prototype": "",
            "backtrace": [
                "zalloc_ro_mut"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "zone_require_ro failed: address not in a ro zone (addr: %p) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "zone_require_ro failed: element improperly aligned (addr: %p) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "zone_require_ro failed: invalid zone index %d (addr: %p, expected: %s%s) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "zone_require_ro failed: address in unexpected zone id %d (%s%s) (addr: %p, expected: %s%s) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "zone_id_require_ro_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "zdestroy: Zone %s%s isn't destructible @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "zdestroy: Zone %s%s in an invalid state for destruction @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "alloc_size",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_metadata_corruption"
                },
                {
                    "string": "page_count",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_metadata_corruption"
                },
                {
                    "string": "z_elems_avail wrap-around",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_accounting_panic"
                },
                {
                    "string": "z_wired_cur wrap-around",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_accounting_panic"
                }
            ],
            "symbol": "zone_reclaim",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "zone metadata corruption: %s (meta %p, zone %s%s) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "zone_metadata_corruption",
            "prototype": "",
            "backtrace": [
                "zone_reclaim"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "zone_map_exhaustion: Zone mapped %lld of %lld, used %lld, capacity %lld [jetsam limit %d%%]\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "zone_map_exhaustion: Largest zone %s%s, size %lu\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "zone_map_exhaustion: Picking VM map entries as the zone to target, size %lu\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "zone_map_exhaustion: Nothing to do for the largest zone [%s%s]. Waking up memorystatus thread.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "zone_map_exhaustion: Call to memorystatus failed, victim pid: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "zone_gc",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Zone info:\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "  Zone map: %p - %p\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "  Metadata: %p - %p\n  Bitmaps : %p - %p\n  Extra   : %p - %p\n\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "Probabilistic GZAlloc Report:\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "  Zone    : <unknown>\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "wild deref, missing or invalid metadata",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "  Zone    : %s%s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "out-of-bounds (high confidence)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "use-after-free (medium confidence)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "  Element : [%p, %p) of size %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "  Access  : %d byte(s) past\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "  Metadata: zid:%d inl:%d cl:0x%x 0x%04x 0x%08x 0x%08x 0x%08x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "%-20s %10lu\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "Kernel Stacks",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "%-20s %10llu\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "Kalloc.Large",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "\n%-5s %10s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "%-5lld %10lld\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "addr belongs to",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic_print_types_in_zone"
                },
                {
                    "string": "addr is being freed to",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic_print_types_in_zone"
                }
            ],
            "symbol": "panic_display_zalloc",
            "prototype": "",
            "backtrace": [
                "SavePanicInfo",
                "handle_debugger_trap"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Largest zones:\n%-28s %10s %10s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "Zone Name",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "Cur Size",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "Free Size",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "%-8s%-20s %9u%c %9u%c\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                }
            ],
            "symbol": "panic_display_largest_zones",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kalloc %s in zone, %s (%s):\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "type arrays",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "types",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "\t%-50s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strcmp"
                }
            ],
            "symbol": "panic_print_types_in_zone",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "zone_create: creating zone %s: flag %s and %s are incompatible @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "zone_create_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "accounting mismatch (%s) for zone %s%s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "zone_accounting_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "swap_task_map @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "swap_task_map",
            "prototype": "",
            "backtrace": [
                "exec_mach_imgact",
                "exec_activate_image"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "tro %p points back to %p instead of %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__thread_ro_circularity_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mach_bridge_add_timestamp: thread_timestamp_calibration @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "remote_time.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "bt_calibration_thread_start",
            "prototype": "",
            "backtrace": [
                "mach_bridge_init_timestamp"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "rt_ini_count",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                }
            ],
            "symbol": "bt_calibration_thread",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "socd buffer size is too small @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "socd_client.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "socd_client_init",
            "prototype": "",
            "backtrace": [
                "socd_client_reinit"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Too many lightweight corpse in flight: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Lightweight corpse enqueued for %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Full corpse enqueued for %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "task_enqueue_exception_with_corpse",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "kcd_c_type",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kcdata_add_uint64_with_description"
                },
                {
                    "string": "kcd_c_totalout",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcpy"
                },
                {
                    "string": "kcd_c_totalin",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcpy"
                },
                {
                    "string": "kcdata_init_compress_state: invalid compression type: %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kcdata_init_compress",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "invalid compression type 0x%llx in kcdata_do_compress @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "zlib kcdata compression ret = %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kcdata_do_compress",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "invalid compression type 0x%llxin kcdata_finish_compression @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kcdata_finish",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "BANK subsystem is initialized\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Bank ledger",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_template_create"
                },
                {
                    "string": "couldn't create bank ledger template @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "couldn't create cpu_time entry for bank ledger template @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "energy",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ledger_entry_add_with_flags"
                },
                {
                    "string": "couldn't create energy entry for bank ledger template @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "bank_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": " Bank Context for a pid %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": " Bank Account linking holder pid %d with merchant pid %d, originator PID/persona: %d, %u and proximate PID/persona: %d, %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "bank_extract_content",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Bogus bank type: %d passed in voucher_command @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "bank_command",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "Bogus bank type: %d passed in bank_get_preadopt_thread_group @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "bank_get_preadopt_thread_group",
            "prototype": "",
            "backtrace": [
                "ipc_kmsg_get_thread_group"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.private.persona.modify",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "bank_account_alloc_init"
                }
            ],
            "symbol": "bank_get_value",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.private.personas.no.propagate",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "proc_persona_get"
                },
                {
                    "string": "com.apple.private.persona.adopt.any",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "proc_uniqueid"
                }
            ],
            "symbol": "bank_task_initialize",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Releasing a non zero ref bank account %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "bank_release_value",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "Bogus bank type: %d passed in bank_get_voucher_bank_account @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "bank_get_voucher_bank_account",
            "prototype": "",
            "backtrace": [
                "bank_get_bank_ledger_thread_group_and_persona"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kern.disable_atm",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_get_default"
                },
                {
                    "string": "-disable_atm",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "atm_diagnostic_config",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "kern.atm_diagnostic_config",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_get_default"
                },
                {
                    "string": "ATM subsystem is initialized\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__stack_chk_fail"
                }
            ],
            "symbol": "atm_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IPC_PTHREAD_PRIORITY subsystem is initialized\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "ipc_pthread_priority_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ipc_pthread_priority_release_value called for a persistent PTHPRIORITY value %x with sync value %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ipc_pthread_priority.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ipc_pthread_priority_release_value",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "vnode_pager_init: memory_object_change_attributes() failed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vnode_pager_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vnode_pager_data_initialize @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vnode_pager_data_initialize",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "compressor_segment",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_ext"
                },
                {
                    "string": "vm_compressor_swap_trigger_thread: create failed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_compressor_init",
            "prototype": "",
            "backtrace": [
                "vm_pageout",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "c_seg %p has bad c_state = %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "c_seg %p requesting bad c_state = %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "c_seg_switch_state",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "hibernate_write_image encountered error 0x%x - %u, %u, %d, %d, %d, %d, %d, %d, %d, %d, %llu, %d, %d, %d\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_panic_hibernate_write_image_failed",
            "prototype": "",
            "backtrace": [
                "hibernate_write_image",
                "ml_arm_sleep",
                "PE_cpu_machine_quiesce",
                "cpu_sleep",
                "processor_offline_intstack",
                "processor_offline",
                "processor_doshutdown"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "csegbufsz_experiment_property: Failed to wait for IONVRAM.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "csegbufsize_experiment_property: Failed to remove %s from NVRAM.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "erase_csegbufsz_experiment_property",
            "prototype": "",
            "backtrace": [
                "cleanup_csegbufsz_experiment"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vm_compressor_segment_buffer_size",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "kern.compressor_pool_multiplier",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                }
            ],
            "symbol": "vm_compressor_set_size",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: moved %d/%d segments from MAJORQ to AGEQ in %lu.%09u seconds and %d breaks\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "vm_compressor_process_major_segments",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "vm_compressor_process_major_segments",
            "prototype": "",
            "backtrace": [
                "vm_compressor_compact_and_swap"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "VM_cswap_trigger",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "bsd_setthreadname"
                }
            ],
            "symbol": "vm_compressor_swap_trigger_thread",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "C_KDP passed to decompress page from outside of debugger context @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "c_decompress_page: c_segno %d >= c_segments_available %d, slot_ptr(%p), slot_data(%x) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "c_decompress_page: c_segno %d is free, slot_ptr(%p), slot_data(%x) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "c_decompress_page: c_indx %d >= c_nextslot %d, c_seg(%p), slot_ptr(%p), slot_data(%x) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "c_decompress_page: c_size == 0, c_seg(%p), slot_ptr(%p), slot_data(%x) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "decompression failure from physical region %llx+%05x: popcount mismatch (%d != %d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "c_decompress_page",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "compressor_memory_object_init: bad request @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "compressor_memory_object_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "compressor_memory_object_map @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "compressor_memory_object_map",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "compressor_memory_object_last_unmap @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "compressor_memory_object_last_unmap",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "compressor_memory_object_deallocate(): bad request @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "compressor_memory_object_deallocate",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "compressor_memory_object_data_request(): bad alignment @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "compressor_memory_object_data_request",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "compressor: data_request @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "compressor_memory_object_data_request",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "do a data_return() if slot for this page is empty @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "compressor_memory_object_data_initialize",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "compressor: data_return @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "compressor_memory_object_data_return",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: size 0x%llx overflow @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "compressor_memory_object_create",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "compressor_memory_object_create",
            "prototype": "",
            "backtrace": [
                "vm_object_compressor_pager_create"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "vm_compressor_pager_put",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vm_compressor_pager_put: out of range @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_compressor_pager_put",
            "prototype": "",
            "backtrace": [
                "vm_pageout_compress_page",
                "vm_pageout_iothread_internal_continue"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "vm_compressor_pager_get",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_compressor_pager_get",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vm_compressor_pager_state_clr",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_compressor_pager_state_clr",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vm_compressor_pager_state_get",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_compressor_pager_state_get",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vm_swapout_thread: create failed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "VM_swapout",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "bsd_setthreadname"
                },
                {
                    "string": "vm_swapfile_create_thread: create failed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "VM_swapfile_create",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "bsd_setthreadname"
                },
                {
                    "string": "vm_swapfile_gc_thread: create failed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "VM_swapfile_gc",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "bsd_setthreadname"
                },
                {
                    "string": "VM Swap Subsystem is ON\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "os_ref_panic_underflow"
                }
            ],
            "symbol": "vm_compressor_swap_init",
            "prototype": "",
            "backtrace": [
                "vm_compressor_init",
                "vm_pageout",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vm_swap_get: vnode_getwithref on swapfile failed with %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "vm_swap_get",
            "prototype": "",
            "backtrace": [
                "c_seg_swapin"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vm_swap_put: vnode_getwithref on swapfile failed with %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "vm_swap_put",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vm_swap_reclaim: vnode_getwithref on swapfile failed.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "vm_swap_reclaim",
            "prototype": "",
            "backtrace": [
                "vm_swapfile_gc_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vm_swap_do_delayed_trim: vnode_getwithref on swapfile failed with %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "vm_swap_do_delayed_trim",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vm_compressor_codec",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "-vm_compressor_wk_sw",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "-vm_compressor_wk_barriers",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "-vm_compressor_wk",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "-vm_compressor_hybrid",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                }
            ],
            "symbol": "vm_compressor_algorithm_init",
            "prototype": "",
            "backtrace": [
                "vm_compressor_init",
                "vm_pageout",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 4,
            "anchors": [
                {
                    "string": "WKDMC(%p, %p) error, code: 0x%x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vm_compressor_algorithms.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "metacompressor",
            "prototype": "",
            "backtrace": [
                "vm_compressor_put",
                "vm_compressor_pager_put",
                "vm_pageout_compress_page",
                "vm_pageout_iothread_internal_continue"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "device_pager_populate_object: list_req failed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "device_pager_populate_object",
            "prototype": "",
            "backtrace": [
                "__ZN18IOMemoryDescriptor19populateDevicePagerEPvP7_vm_mapyyyj"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "device_pager_init: memory_object_change_attributes() failed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "device_pager_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "device_pager_data_initialize @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "device_pager_data_initialize",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "vm_object_update: unexpected error 0x%x from vm_fault_page()\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "memory_object.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_object_update",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Ignoring \"vm_compressor\" boot arg %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "kern.vm_compressor",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_get_default"
                },
                {
                    "string": "\"vm_compressor_mode\" is %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "vm_protect_privileged_from_untrusted",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "vm_fault_init",
            "prototype": "",
            "backtrace": [
                "vm_mem_bootstrap",
                "kernel_bootstrap",
                "machine_startup",
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "vm_fault_page(): unexpected error %d from vm_compressor_pager_get()\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_fault_page",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "vm_fault_unwire: failure @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_fault_unwire",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "vm_fault_copy: unexpected error 0x%x from vm_fault_page()\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vm_fault_copy(2): unexpected error 0x%x from vm_fault_page()\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_fault_copy",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kdp_lightweight_fault called from outside of debugger context @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kdp_lightweight_fault",
            "prototype": "",
            "backtrace": [
                "kdp_find_phys"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Text page corruption detected for pid %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "revalidate_text_page",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: pmap %p vaddr 0x%llx prot 0x%x options 0x%x !cs_bypass @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "page marked to be NX, not letting it be mapped EXEC\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "vm_fault: signed: %s validate: %s tainted: %s wpmapped: %s prot: 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "CODE SIGNING: process %d[%s]: rejecting invalid page at address 0x%llx from offset 0x%llx in file \"%s%s%s\" (cs_mtime:%lu.%ld %s mtime:%lu.%ld) (signed:%d validated:%d tainted:%d nx:%d wpmapped:%d dirty:%d depth:%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "<nil>",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "/.../",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "vm_fault_enter: failed to allocate codesigning exit reason\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "vm_fault_enter: failed to allocate buffer for codesigning exit reason\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "vm_fault_enter: failed to allocate kcdata for codesigning exit reason\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "CODE SIGNING: tainted page %p phys 0x%x phystokv 0x%llx copied to %p\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "CODE SIGNING: process %d[%s]: rejecting invalid page (phys#0x%x) at address 0x%llx from offset 0x%llx in file \"%s%s%s\" (cs_mtime:%lu.%ld %s mtime:%lu.%ld) (signed:%d validated:%d tainted:%d nx:%dwpmapped:%d dirty:%d depth:%d)\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "CODESIGNING: vm_fault_enter(0x%llx): *** INVALID PAGE ***\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "CODESIGNING: panicking on invalid page @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_fault_enter_prepare",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Write fault on compressor map, va: %p type: %u bounds: %p->%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s:%d should not zero-fill page at offset 0x%llx in external object %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: map %p va 0x%llx obj %p,%u saved %p,%u: unexpected CoW @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "object_is_contended @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vm_fault: unexpected error 0x%x from vm_fault_page()\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: pmap %p vaddr 0x%llx prot 0x%x options 0x%x m%p obj %p copyobj %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_fault_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "CODESIGNING: %s: page %p obj %p off 0x%llx was modified\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "vm_page_validate_cs_fast",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "vm_page_validate_cs_fast",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Bad compare and swap in setup! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vmtc_text_page_diagnose_setup",
            "prototype": "",
            "backtrace": [
                "revalidate_text_page"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Bad compare and swap in diagnose! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vmtc_text_page_diagnose",
            "prototype": "",
            "backtrace": [
                "revalidate_text_page"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vm_page_bootstrap",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__strncpy_chk"
                },
                {
                    "string": "zone_bootstrap",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__strncpy_chk"
                },
                {
                    "string": "vm_object_bootstrap",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__strncpy_chk"
                },
                {
                    "string": "vm_map_init",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__strncpy_chk"
                },
                {
                    "string": "kmem_init",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__strncpy_chk"
                },
                {
                    "string": "vm_fault_init",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__strncpy_chk"
                },
                {
                    "string": "IOKit IOMD setownership ENABLED\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "IOKit IOMD setownership DISABLED\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "vm_mem_bootstrap",
            "prototype": "",
            "backtrace": [
                "kernel_bootstrap",
                "machine_startup",
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kmem_suballoc(map=%p, size=%zd) failed with %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kmem_suballoc",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "%s: page_list too short @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: page_list too long @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kernel_memory_populate_object_and_unlock",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "realloc",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "kmem_%s(map=%p, addr=%p, size=%zd, flags=0x%x): invalid arguments passed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__kmem_invalid_arguments_panic",
            "prototype": "",
            "backtrace": [
                "kmem_realloc_guard"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kmem_range_init: Can't scramble with multiple constraints @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kmem_readjust_ranges",
            "prototype": "",
            "backtrace": [
                "kmem_scramble_ranges",
                "kmem_range_init"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kmem_ptr_range",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "kmem_ptr_range_meta",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "kmem_add_ptr_claims",
            "prototype": "",
            "backtrace": [
                "kmem_add_extra_claims",
                "kmem_scramble_ranges",
                "kmem_range_init"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kmem_sprayqtn_range",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "kmem_data_range",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kmem_add_extra_claims",
            "prototype": "",
            "backtrace": [
                "kmem_scramble_ranges",
                "kmem_range_init"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kmem_range_init: vm_map_locate_space failing for claim %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "kmem_range_init: vm_map_find_space failing for claim %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kmem_scramble_ranges",
            "prototype": "",
            "backtrace": [
                "kmem_range_init"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kmem_init(0x%llx,0x%llx): vm_map_enter(0x%llx,0x%llx) error 0x%x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kmem_init",
            "prototype": "",
            "backtrace": [
                "vm_mem_bootstrap",
                "kernel_bootstrap",
                "machine_startup",
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "%s: %s range invalid min:%p <= base:%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: %s range invalid max:%p >= max packable:%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_packing_verify_range",
            "prototype": "",
            "backtrace": [
                "zone_submap_init",
                "zone_init"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "invalid vm range: [0x%llx, 0x%llx) wraps around @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__mach_vm_range_invalid",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "addr %p + size %llu overflows %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "addr %p + size %llu doesnt fit in one range (id: %u min: %p max: %p) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kmem_range_invalid_panic",
            "prototype": "",
            "backtrace": [
                "kmem_addr_get_range"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Can't overwrite mappings (addr: %p) in kmem ptr ranges @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kmem_range_invalid_for_overwrite",
            "prototype": "",
            "backtrace": [
                "vm_map_locate_space_fixed"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "atomicity",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "objectness",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "left bound",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "right bound",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "guard",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "kmem(map=%p, addr=%p, size=%zd, flags=0x%x): entry:%p %s mismatch guard(0x%08x) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__kmem_entry_validate_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kmem(map=%p) no entry found at %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__kmem_entry_not_found_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "alloc",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "kmem_%s(%p, %zd, 0x%x): failed with %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__kmem_failed_panic",
            "prototype": "",
            "backtrace": [
                "kmem_alloc_guard_internal"
            ]
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "VM page %p should not have an error @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kernel_memory_populate_pmap_enter",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kmem(map=%p, flags=0x%x): invalid size %zd @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__kmem_invalid_size_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kmem(map=%p) entry %p is a submap @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "is unexpectedly",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "kmem(map=%p, flags=0x%x): entry %p %s for the %s object @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__kmem_entry_validate_object_panic",
            "prototype": "",
            "backtrace": [
                "kmem_realloc_guard"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "kmem_realloc(map=%p, addr=%p, size=%zd, entry=%p): object %p has unexpected pager %p (%d,%d,%d) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__kmem_realloc_invalid_pager_panic",
            "prototype": "",
            "backtrace": [
                "kmem_realloc_guard"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "kmem_realloc(map=%p, addr=%p, size=%zd, entry=%p): object %p has unexpected size %ld @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__kmem_realloc_invalid_object_size_panic",
            "prototype": "",
            "backtrace": [
                "kmem_realloc_guard"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Invalid sizeclass idx %u @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kmem_invalid_size_idx",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Metadata (%p) for addr (%p) not primary @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Metadata's (%p) sizeclass (%u != %u) changed during deletion @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Double free detected: Slot (%u) in meta (%p) for addr %p marked free @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kmem_validate_slot_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Invalid kmem ptr slot [%p:%p] for allocation [%p:%p] @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kmem_invalid_slot_for_addr",
            "prototype": "",
            "backtrace": [
                "kmem_addr_get_slot_idx",
                "vm_map_delete"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%uth free slot not found for meta %p bitmap %u @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kmem_slot_not_found",
            "prototype": "",
            "backtrace": [
                "kmem_get_addr_from_meta"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Invalid slot idx %u [0:%u] for meta %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Invalid size_idx (%u != %u) in meta %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "page_marker %u not primary in meta %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kmem_invalid_meta_panic",
            "prototype": "",
            "backtrace": [
                "kmem_get_addr_from_meta"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Entry (%p) already exists for addr (%p) being returned @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kmem_slot_has_entry_panic",
            "prototype": "",
            "backtrace": [
                "kmem_get_addr_from_meta"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Reading free chunks for meta %p where marker != KMEM_META_FREE @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kmem_invalid_free_chunk_len",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Invalid number of chunks %u\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kmem_invalid_chunk_num",
            "prototype": "",
            "backtrace": [
                "kmem_init_free_chunk"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "No more VA to allocate %u chunks in range %u @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kmem_range_out_of_va",
            "prototype": "",
            "backtrace": [
                "kmem_locate_space",
                "vm_map_locate_space_anywhere"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Reading free chunks for meta %p where marker != KMEM_META_PRIMARY @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kmem_invalid_chunk_len",
            "prototype": "",
            "backtrace": [
                "kmem_free_slot",
                "kmem_free_space",
                "vm_map_delete"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "cambria_pagesize",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "VM map entries",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_ext"
                },
                {
                    "string": "VM map holes",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_ext"
                },
                {
                    "string": "VM map copies",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_ext"
                },
                {
                    "string": "VM boostrap: %d maps, %d entries and %d holes available\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "vm_memory_malloc_no_cow_mask",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "vm_map_init",
            "prototype": "",
            "backtrace": [
                "vm_mem_bootstrap",
                "kernel_bootstrap",
                "machine_startup",
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "VM bootstrap done: %d maps, %d entries and %d holes left\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "vm_kernel_boostraped",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Unexpected zone ID %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_map_relocate_early_elem",
            "prototype": "",
            "backtrace": [
                "zone_metadata_init",
                "zone_init"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "zone_map_exhaustion: victim pid %d, vm region count: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "find_largest_process_vm_map_entries",
            "prototype": "",
            "backtrace": [
                "zone_gc"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "failing",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "turning off execute",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "vm_map_enter: pmap_nest(0x%llx,0x%llx) error 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%d[%s] %s: map size 0x%llx over RLIMIT_AS 0x%llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%d[%s] %s: map size 0x%llx over RLIMIT_DATA 0x%llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "vm_map_enter",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "VM_FLAGS_RETURN_DATA_ADDR not expected for submap. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vm_map_enter_mem_object: memory_entry->backing.copy unsupported type 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "invalid VM named entry %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "VM_FLAGS_RETURN_DATA_ADDR not expected for raw memory object. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_map_enter_mem_object",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vm_map_protect(%p,0x%llx,0x%llx) new=0x%x wired=%x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_map_protect",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 5,
            "anchors": [
                {
                    "string": "%s:%d WindowServer VM Debugging panic: dst_addr 0x%llx copy %p head_addr 0x%llx head_copy %p\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vm_map_copy_overwrite",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_map_copy_overwrite",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Aborting corpse map due to system shutdown\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "vm_map_fork",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vm_map_fork_share: pmap_nest failed! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vm_map_fork_share",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_map_fork",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "shared_region: task %p: vm_map_exec(%p,%p,%p,0x%x,0x%x): ->\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: task %p: vm_map_exec(%p,%p,%p,0x%x,0x%x): <-\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Failed to reserve %s region in user map %p %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_map_exec",
            "prototype": "",
            "backtrace": [
                "exec_mach_imgact",
                "exec_activate_image"
            ]
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "%s:%d(start=0x%llx, size=0x%llx) pgmask 0x%x: wraparound\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "vm_map_range_physical_size",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "%d[%s] vm_remap(0x%llx,0x%llx) VM_PROT_COPY denied on permanent mapping prot 0x%x/0x%x developer %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "vm_map_remap",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "userspace has access to a kernel map %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "convert_port_entry_to_map",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%d[%s] vm_map_range_overflows addr 0x%llx size 0x%llx pgmask 0x%llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "vm_map_range_overflows",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "invalid range ID (%u) for map %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_map_range_invalid_panic",
            "prototype": "",
            "backtrace": [
                "vm_map_locate_space_anywhere"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "vm_map_clip_unnest(0x%llx,0x%llx): bad nested entry: start=0x%llx end=0x%llx\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_map_clip_unnest",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vm_map_clip(%p): Attempting to clip an atomic VM map entry %p [0x%llx:0x%llx] at 0x%llx @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__vm_map_clip_atomic_entry_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mapHdr %p entry %p start 0x%llx end 0x%llx new start 0x%llx @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "_vm_map_clip_start",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mapHdr %p entry %p start 0x%llx end 0x%llx new end 0x%llx @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "_vm_map_clip_end",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vm_map_wire: re-lookup failed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_map_wire_nested",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vm_map_wire: too many wirings @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "add_wire_counts",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vm_map_unwire: start not found @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vm_map_unwire: in_transition entry @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vm_map_unwire: entry is unwired @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vm_map_unwire: non-contiguous region @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vm_map_unwire: re-lookup failed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_map_unwire_nested",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "%d[%s] removing permanent submap entry %p [0x%llx:0x%llx] prot 0x%x/0x%x -> KERN_PROT_FAILURE\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%d[%s] %s(0x%llx,0x%llx): code signing monitor disabled, allowing for permanent executable entry [0x%llx:0x%llx] prot 0x%x/0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d %d[%s] map %p entry %p [ 0x%llx - 0x%llx ] submap %d prot 0x%x/0x%x -> 0/0\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "vm_map_delete",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vm_map_delete(%p,0x%llx,0x%llx): no map entry at 0x%llx @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__vm_map_delete_gap_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vm_map_delete(%p,0x%llx,0x%llx): Attempting to remove permanent VM map entry %p [0x%llx:0x%llx] @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__vm_map_delete_permanent_panic",
            "prototype": "",
            "backtrace": [
                "vm_map_delete"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vm_map_delete(%p,0x%llx,0x%llx): failed unexpected with %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__vm_map_delete_failed_panic",
            "prototype": "",
            "backtrace": [
                "vm_map_delete"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d WindowServer VM Debugging panic: address 0x%llx copy ptr %p\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d WindowServer VM Debugging panic: start 0x%llx end 0x%llx entry %p copy ptr %p\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d WindowServer VM Debugging panic: next %p entry %p copy ptr %p\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "vm_map_copy_overwrite_nested",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vm_map_entry_copy_code_signing",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "removing execute access",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "vm_map_entry_copy",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 5,
            "anchors": [
                {
                    "string": "vm_map_copyout: wiring %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_map_copyout_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vm_map_remap_extract",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_map_remap_extract",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Found an existing entry %p [0x%llx, 0x%llx) in map %p instead of potential hole at address: 0x%llx. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__vm_map_store_find_space_holelist_corruption",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "VMSEL: INSERT FAILED: 0x%lx, 0x%lx, 0x%lx, 0x%lx @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_map_store_entry_link_rb",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "NO ENTRY TO DELETE @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_map_store_entry_unlink_rb",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Hole hint failed: Hole entry start: 0x%llx, entry start: 0x%llx, map hole start: 0x%llx, map hint start: 0x%llx @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Hole hint failed: Hole entry end: 0x%llx, entry start: 0x%llx, map hole start: 0x%llx, map hint start: 0x%llx @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "update_holes_on_entry_deletion",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Illegal action: h1: %p, s:0x%llx, e:0x%llx...h2:%p, s:0x%llx, e:0x%llx...h3:0x%p, s:0x%llx, e:0x%llx @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "update_holes_on_entry_creation",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.private.memory.ownership_transfer",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOTaskGetEntitlement"
                },
                {
                    "string": "com.apple.developer.memory.transfer-send",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOTaskGetEntitlement"
                },
                {
                    "string": "com.apple.developer.memory.transfer-accept",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOTaskGetEntitlement"
                }
            ],
            "symbol": "mach_memory_entry_ownership",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "unsupported type of mem_entry %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "mach_memory_entry_map_size",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "Shouldn't be using data address with a parent entry that is a submap. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "mach_make_memory_entry_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vm objects",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_ext"
                }
            ],
            "symbol": "vm_object_bootstrap",
            "prototype": "",
            "backtrace": [
                "vm_mem_bootstrap",
                "kernel_bootstrap",
                "machine_startup",
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "VM_io_reprioritize_thread",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "mpsc_daemon_queue_init_with_thread"
                },
                {
                    "string": "Unable to start I/O reprioritization thread (%d) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "iosched",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "io_throttle_window_tier1",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "io_throttle_window_tier2",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "io_throttle_window_tier3",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                }
            ],
            "symbol": "throttle_init",
            "prototype": "",
            "backtrace": [
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "failed to launch vm_object_reaper_thread kr=0x%x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "VM_object_reaper_thread",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "bsd_setthreadname"
                }
            ],
            "symbol": "vm_object_reaper_init",
            "prototype": "",
            "backtrace": [
                "vm_pageout",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vm_object_deallocate: losing a kernel_object @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vm_object_deallocate: losing retired_pages_object @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vm_object_deallocate: losing compressor_object @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_object_deallocate",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "object %p all_reusable: can't update pmap stats @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_object_reuse_pages",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vm_object_copy_slowly: unexpected error 0x%x from vm_fault_page()\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_object_copy_slowly",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "copy_strategically: bad strategy %d for object %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_object_copy_strategically",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "vm_object_compressor_pager_create(): no pager for object %p size 0x%llx\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vm_object_compressor_pager_create: mismatch (pager: %p, pager_object: %p, orig_object: %p, orig_object size: 0x%llx) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_object_compressor_pager_create",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vm_object_collapse() attempting to collapse purgeable object: %p(%d) %p(%d)\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_object_collapse",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vm_object_populate_with_private - %p not private @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_object_populate_with_private",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: external object %p has unsupported ledger_tag %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: object %p has unsupported ledger_tag %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_object_ledger_tag_ledgers",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s(%p): volatile=%d nonvolatile=%d owned=%d q=%p q_first=%p q_last=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vm_owned_objects_disown",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_owned_objects_disown",
            "prototype": "",
            "backtrace": [
                "task_deallocate_internal"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "reservation without pageout? @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "missing pager for copy object @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_pageout_initialize_page",
            "prototype": "",
            "backtrace": [
                "vm_fault_page"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vm_pageout: no victim @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_pageout_scan",
            "prototype": "",
            "backtrace": [
                "vm_pageout_continue"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "VM_pressure",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "bsd_setthreadname"
                }
            ],
            "symbol": "vm_pressure_thread",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vm_restricted_to_single_processor",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "Overriding vm_restricted_to_single_processor to %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "vm_set_restrictions",
            "prototype": "",
            "backtrace": [
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mapping deprecated VM_PAGER_DEFAULT to VM_PAGER_COMPRESSOR_WITH_SWAP\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "mapping deprecated VM_PAGER_FREEZER_DEFAULT to VM_PAGER_FREEZER_COMPRESSOR_NO_SWAP\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "unknown compressor mode - %x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "vm_config_init",
            "prototype": "",
            "backtrace": [
                "vm_fault_init",
                "vm_mem_bootstrap",
                "kernel_bootstrap",
                "machine_startup",
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vm_pageout_garbage_collect: create failed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "VM_pageout_garbage_collect",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "bsd_setthreadname"
                }
            ],
            "symbol": "vm_pageout_create_gc_thread",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vmpgo_pcluster",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "vmpgo_protect_realtime",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "VM_pageout_scan",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "bsd_setthreadname"
                },
                {
                    "string": "vm_pageout: Unable to create external thread (%d)\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "VM_pageout_external_iothread",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "bsd_setthreadname"
                },
                {
                    "string": "vm_pressure_thread: create failed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_pageout",
            "prototype": "",
            "backtrace": [
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vmcomp_threads",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "vmpgoi_maxlaundry",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "vm_pageout: Unable to create compressor thread no. %d (%d)\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_pageout_internal_start",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vm_object_upl_request: external object with non-zero paging offset @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vm_object_upl_request: contiguous object specified @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "need corner case for fictitious page @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_object_upl_request",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "Only %d of the %d sub-upls within the Vector UPL are alread mapped @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "TODO4K: vector UPL not implemented @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vm_upl_map: page missing @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vm_map_enter failed for a Vector UPL @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vector_upl_get_submap was passed a NULL UPL @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "getting sub-upl iostate when none exists @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_map_enter_upl_range",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "%d of the %d sub-upls within the Vector UPL is/are not mapped @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vector_upl_get_submap was passed a null UPL @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_map_remove_upl_range",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "iopl_valid_data: NULL upl @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "iopl_valid_data: vector upl @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "iopl_valid_data: unsupported upl, flags = %x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "iopl_valid_data: object == kernel or compressor @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "iopl_valid_data: object %p purgable %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "iopl_valid_data: missing expected page at offset %lx @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "iopl_valid_data: busy page w/o absent @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "iopl_valid_data: busy+absent page on page queue @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "iopl_valid_data: %p is reusable @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "iopl_valid_data: %p already wired @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "iopl_valid_data",
            "prototype": "",
            "backtrace": [
                "__ZN25IOGeneralMemoryDescriptor8completeEj"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vm_object_iopl_request: external object with non-zero paging offset @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vm_object_iopl_request: missing/bad page in kernel object @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vm_object_iopl_request: missing/bad page in compressor object @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vm_object_iopl_request: unexpected error 0x%x from vm_fault_page()\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vm_object_iopl_request: Wired page missing. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_object_iopl_request",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "Deallocating non-empty Vectored UPL @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "upl_deallocate",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Trying to remove sub-upl when none exists @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vector_upl_set_subupl was passed a NULL upl element @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vector_upl_set_subupl was passed a NULL upl @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vector_upl_set_subupl",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vector_upl_set_pagelist was passed a NULL upl @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vector_upl_set_pagelist",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Vector UPL offset miscalculation @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vector_upl_subupl_byoffset",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "setting sub-upl iostate when none exists @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vector_upl_set_iostate was passed a NULL UPL @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vector_upl_set_iostate",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "upl_set_referenced not %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "upl_set_referenced",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IN Q: %d : %d : %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "AC Q: %d : %d : %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "vm_countdirtypages",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "VM_compressor",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "thread_set_thread_name"
                }
            ],
            "symbol": "vm_pageout_iothread_internal",
            "prototype": "",
            "backtrace": [
                "vm_pageout_internal_start"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "upl(%p) ext_ref_count @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "upl_destroy",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: Unrecognized page list type %hhu @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "unified_page_list_iterator_init",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vm_pmap.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pmap_batch_set_cache_attributes",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "unmarked object on purgeable q @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "marked object not on purgeable q @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_purgeable_object_remove",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "vm_purgeable_accounting(%p): unexpected old_state=%d\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_purgeable_accounting",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Unexpected reclaim action %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_deferred_reclamation_reclaim_memory",
            "prototype": "",
            "backtrace": [
                "memstat_approaching_fg_band"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vm_reclaim",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "os_log_create"
                }
            ],
            "symbol": "vm_deferred_reclamation_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vm_reclaim: About to kill %p due to %d with subcode %lld\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vm_reclaim: Unable to deliver guard exception because task [%d] is already dead.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "vm_reclaim: Skipping non fatal guard exception.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "vm_reclaim: Unable to deliver guard exception because proc is gone & pid rolled over.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "vm_reclaim: Unable to deliver guard exception because task does not have a proc.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "vm_reclaim: Unable to deliver guard exception to %p: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "reclaim_kill_with_reason",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "VM_reclaim",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "bsd_setthreadname"
                }
            ],
            "symbol": "reclaim_thread",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vm_page_bg_mode",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "vm_page_bg_exclude_external",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "vm_page_bg_target",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "vm_page_bootstrap: WARNING -- strange page hash\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "vm_page_buckets",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__strncpy_chk"
                },
                {
                    "string": "vm_page_bucket_locks",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__strncpy_chk"
                },
                {
                    "string": "pmap_startup",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__strncpy_chk"
                },
                {
                    "string": "vm_page_bootstrap: %d free pages, %d wired pages, (up to %d of which are delayed free)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "vm_page_bootstrap complete",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__strncpy_chk"
                },
                {
                    "string": "colors",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                }
            ],
            "symbol": "vm_page_bootstrap",
            "prototype": "",
            "backtrace": [
                "vm_mem_bootstrap",
                "kernel_bootstrap",
                "machine_startup",
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Filling vm_pages with pattern: 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "page_frame_init",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__strncpy_chk"
                },
                {
                    "string": "pmap_startup(): too many pages to support vm_page packing @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "pmap_startup() init/release time: %lld microsec\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "pmap_startup() delayed init/release of %d pages\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "VM_PAGE_PACK_PTR failed on &vm_pages[0] - %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "VM_PAGE_PACK_PTR failed on &vm_pages[vm_pages_count-1] - %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pmap_startup",
            "prototype": "",
            "backtrace": [
                "vm_page_bootstrap",
                "vm_mem_bootstrap",
                "kernel_bootstrap",
                "machine_startup",
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vm pages",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_ext"
                }
            ],
            "symbol": "vm_page_module_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "vm_page_insert_internal: (page=%p,obj=%p,off=0x%llx,size=0x%llx) inserted at offset past object bounds @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_page_insert_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "panic: kdp_vm_page_lookup done outside of kernel debugger @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kdp_vm_page_lookup",
            "prototype": "",
            "backtrace": [
                "kdp_lightweight_fault",
                "kdp_find_phys"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d should not modify cpu->free_pages while hibernating @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vm_page_grab_options",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: page 0x%llx is referenced @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_page_grab_options",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "vm_page_wire(%p): wire_count overflow @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_page_wire",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vm_page_reactivate_local: found vm_page_t(%p) with wrong cpuid @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vm_page_reactivate_local: count = %d, vm_page_local_count = %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_page_reactivate_local",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "could",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kdb_printf"
                }
            ],
            "symbol": "hibernate_page_list_setall",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "hibernate_lookup_paddr of %d failed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "hibernate_free_range",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "vm_page_queues_remove - bad page q_state (%p, %d) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_page_queues_remove",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pmap_steal_memory() size: 0x%llx @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "pmap_steal_memory() pmap_enter failed, map_addr=%#lx, phys_page=%u @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pmap_steal_memory_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vm pages array",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_free_delayed_pages",
            "prototype": "",
            "backtrace": [
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s(num=%d,low=%d): found %d pages at 0x%llx...scanned %d pages...  yielded %d times...  dumped run %d times... stole %d pages... stole %d compressed pages... wired count is %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "vm_page_find_contiguous",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "vm_page_find_contiguous: zone_gc called... wired count is %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "cpm_allocate",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vm_page_alloc_list(%zd, 0x%x) failed unexpectedly with %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__vm_page_alloc_list_failed_panic",
            "prototype": "",
            "backtrace": [
                "vm_page_alloc_list"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "hibernate_consider_discard: private @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "hibernate_consider_discard",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "hibernate_discard_page(%p) laundry @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "hibernate_discard_page(%p) private @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "hibernate_discard_page(%p) fictitious @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "hibernate_discard_page",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "shared_region: -> get(%p)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: get(%p) <- %p\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "vm_shared_region_get",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "shared_region: -> vm_map(%p)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: vm_map(%p) <- %p\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "vm_shared_region_vm_map",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "shared_region: -> set(%p, %p)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: set(%p) <- old=%p new=%p\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "vm_shared_region_set",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "shared_region: -> lookup(root=%p,cpu=<%d,%d>,64bit=%d,pgshift=%d,reslide=%d,driverkit=%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: vm_shared_region_lastid wrapped @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "shared_region: lookup(root=%p,cpu=<%d,%d>,64bit=%d,pgshift=%d,reslide=%d,driverkit=%d) <- %p\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: -> create(root=%p,cpu=<%d,%d>,64bit=%d,pgshift=%d,reslide=%d,driverkit=%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: create: couldn't allocate map\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: create(root=%p,cpu=<%d,%d>,64bit=%d,reslide=%d,driverkit=%d,base=0x%llx,size=0x%llx) <- %p mem=(%p,%p) map=%p pmap=%p\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: create(root=%p,cpu=<%d,%d>,64bit=%d,driverkit=%d,base=0x%llx,size=0x%llx) <- NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "vm_shared_region_lookup",
            "prototype": "",
            "backtrace": [
                "vm_shared_region_enter",
                "vm_map_exec",
                "exec_mach_imgact",
                "exec_activate_image"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "shared_region: -> reference(%p)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: reference(%p) <- %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "vm_shared_region_reference",
            "prototype": "",
            "backtrace": [
                "shared_region_pager_setup"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "shared_region: -> deallocate(%p)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: deallocate(%p): ref now %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: deallocate(%p): armed timer\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: deallocate(%p) <-\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "vm_shared_region_deallocate",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "shared_region: -> start_address(%p)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: start_address(%p) <- 0x%llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "vm_shared_region_start_address",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s(): shared_region_pager_match() failed\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s(): find_mapping_to_slide() failed\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s(): doesn't fully cover\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s(): mach_vm_map_kernel() failed\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "vm_shared_region_auth_remap",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Failed to undo mappings because of NULL shared region.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "sleep_with_inheritor_and_turnstile"
                },
                {
                    "string": "shared_region: mapping[%d]: address:0x%016llx size:0x%016llx offset:0x%016llx maxprot:0x%x prot:0x%x: undoing...\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "vm_shared_region_undo_mappings",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "shared_region: region_slide(slide:0x%x start:0x%016llx size:0x%016llx) failed 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: map(%p) <- 0x%x \n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "vm_shared_region_map_file",
            "prototype": "",
            "backtrace": [
                "_shared_region_map_and_slide",
                "shared_region_map_and_slide_2_np"
            ]
        },
        {
            "args": 6,
            "anchors": [
                {
                    "string": "shared_region: -> enter(map=%p,task=%p,root=%p,cpu=<%d,%d>,64bit=%d,driverkit=%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: -> enter(map=%p,task=%p,root=%p,cpu=<%d,%d>,64bit=%d,reslide=%d,driverkit=%d): lookup failed !\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: enter(%p,%p,%p,%d,%d,%d,%d,%d): nested vm_map_enter(0x%llx,0x%llx,%p) error 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: enter(%p,%p,%p,%d,%d,%d,%d,%d) <- 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "vm_shared_region_enter",
            "prototype": "",
            "backtrace": [
                "vm_map_exec",
                "exec_mach_imgact",
                "exec_activate_image"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s:%d vm_map(0x%llx, 0x%llx) error %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "vm_shared_region_remove",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "vm_shared_region_remove",
            "prototype": "",
            "backtrace": [
                "shared_region_check_np"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "commpage text: ->init()\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "commpage text: init() <-\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ARM comm page text section %s,%s missing @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "__commpage_text",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_commpage_text_init",
            "prototype": "",
            "backtrace": [
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "commpage: -> init()\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "commpage: init() <-\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "vm_commpage_init",
            "prototype": "",
            "backtrace": [
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "vm_shared_region_slide: -> slide %#x, entry_start %#llx, entry_size %#llx, slide_start %#llx, slide_size %#llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: no shared region?\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "vm_shared_region_slide",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "vm_shared_region_slide: <- %d (no shared region)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "slide_info initialization failed with kr=%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "vm_shared_region_slide: <- %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Slide_info_size too small: %lx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Slide_info_size too large: %lx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "copyin of slide_info failed\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Too many auth/private sections for shared region!!\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "No sliding bitmap entry for pageIndex: %d at entryIndex: %d amongst %d entries\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s bad slide_info_size: %lx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "vm_shared_region_slide_sanity_check_v2",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "vm_shared_region_slide_sanity_check_v3: s_info->page_size != PAGE_SIZE_FOR_SR_SL 0x%llx != 0x%llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "vm_shared_region_slide_sanity_check_v3: required_size != slide_info_size 0x%llx != 0x%llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "vm_shared_region_slide_sanity_check_v4",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "vm_shared_region_slide_sanity_check_v5: s_info->page_size != PAGE_SIZE_FOR_SR_SL 0x%llx != 0x%llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "vm_shared_region_slide_sanity_check_v5: required_size != slide_info_size 0x%llx != 0x%llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "vm_shared_region_slide",
            "prototype": "",
            "backtrace": [
                "vm_shared_region_map_file",
                "_shared_region_map_and_slide",
                "shared_region_map_and_slide_2_np"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "shared_region: pivot(%p): armed timer\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "vm_shared_region_reference_locked"
                }
            ],
            "symbol": "vm_shared_region_pivot",
            "prototype": "",
            "backtrace": [
                "shared_region_pivot"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "shared_region: -> reference_locked(%p)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: reference_locked(%p) <- %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "vm_shared_region_reference_locked",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "shared_region: -> destroy(%p) (root=%p,cpu=<%d,%d>,64bit=%d,driverkit=%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: destroy(%p) <-\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "vm_shared_region_destroy",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "shared_region: -> map(%p)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: more than 1 non-zero slide value amount slide 1:0x%x slide 2:0x%x\n ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: mapping[0]: address:0x%016llx size:0x%016llx offset/addr:0x%016llx maxprot:0x%x prot:0x%x fd==-1\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s(): for fd==-1 vm_map_enter() in kernel failed\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s(): for fd==-1 copyin() failed, errno=%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s(): for fd==-1 vm_map_enter() in SR failed\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: mapping[%d]: address:0x%016llx size:0x%016llx offset:0x%016llx maxprot:0x%x prot:0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: mapping[%d]: address:0x%016llx size:0x%016llx offset:0x%016llx maxprot:0x%x prot:0x%x too many mappings to slide...\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: mapping[%d]: address:0x%016llx size:0x%016llx offset:0x%016llx maxprot:0x%x prot:0x%x already mapped...\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: mapping[%d]: address:0x%016llx size:0x%016llx offset:0x%016llx maxprot:0x%x prot:0x%x failed 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "vm_shared_region_map_file_setup",
            "prototype": "",
            "backtrace": [
                "vm_shared_region_map_file",
                "_shared_region_map_and_slide",
                "shared_region_map_and_slide_2_np"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "shared_region: sr_cache_header.imagesTextCount >= UINT32_MAX @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vm_shared_region_map_file_final",
            "prototype": "",
            "backtrace": [
                "vm_shared_region_map_file",
                "_shared_region_map_and_slide",
                "shared_region_map_and_slide_2_np"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "No slide entry for this page in toc. PageIndex: %d Toc Count: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "No sliding bitmap entry for entryIndex: %d amongst %d entries\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "vm_shared_region_slide() carry over: i=%d j=%d b=0x%x slide=0x%x old=0x%x new=0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "vm_shared_region_slide_page() did not find page start in slide info: pageIndex=%u, count=%u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "vm_shared_region_slide_page() out-of-bounds extras index: index=%u, count=%u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "vm_shared_region_slide_page",
            "prototype": "",
            "backtrace": [
                "shared_region_pager_data_request"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vm_shared_region_slide_page() offset overflow: pageIndex=%u, start_offset=%u, slide_amount=%u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "rebase_chain",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "shared_region_find_key() no key for region '%s' @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "shared_region_find_key",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "shared_region_key_alloc() inherited key mismatch @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "shared_region_key_alloc",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "shared_region_key_dealloc() Shared region ID '%s' not found @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "shared_region_key_dealloc",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "shared_region_pager_init: memory_object_change_attributes() failed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "shared_region_pager_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "shared_region_pager_data_return: should never get called @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "shared_region_pager_data_return",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "shared_region_pager_data_initialize: should never get called @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "shared_region_pager_data_initialize",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "shared_region_pager_data_request: vm_fault_page() unexpected error 0x%x\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "shared_region_data_request(%p,0x%llx+0x%llx+0x%04llx): 0x%llx in sliding range [0x%llx:0x%llx]: SLIDE offset 0x%llx=(0x%llx+0x%llx+0x%llx+0x%04llx)[0x%016llx 0x%016llx] code_signed=%d cs_validated=%d cs_tainted=%d cs_nx=%d kr=0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "shared_region_pager_data_request",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s no object for file_control\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "vm_map_with_linking",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "vm_map_with_linking",
            "prototype": "",
            "backtrace": [
                "map_with_linking_np"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s(): control NULL\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "dyld_pager_init",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "dyld_pager_init: memory_object_change_attributes() failed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "dyld_pager_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "dyld_pager_data_return: should never happen! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "dyld_pager_data_return",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "dyld_pager_data_initialize: should never happen @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "dyld_pager_data_initialize",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "dyld_pager_data_request: vm_fault_page() unexpected error 0x%x\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s(): Range not found for offset 0x%llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "dyld_pager_data_request",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s(): seg_info out of bounds\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s(): seg->size out of bounds\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s(): seg->size too small\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s(): seg->page_count out of bounds\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s(): seg->page_count too small\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s(): No segment for user VA 0x%llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s(): unknown pointer_format %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s(): out of range segInfo->page_start[overflowIndex]",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "fixupPage32",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "dyld_pager_data_request",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s(): Invalid ptr auth key %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "signPointer",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "signPointer",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s out of range bind ordinal %u (max %u)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "fixupPage64",
            "prototype": "",
            "backtrace": [
                "dyld_pager_data_request"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "swapfile_pager_init: memory_object_change_attributes() failed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "swapfile_pager_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "swapfile_pager_data_return: should never get called @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "swapfile_pager_data_return",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "swapfile_pager_data_initialize: should never get called @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "swapfile_pager_data_initialize",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 4,
            "anchors": [
                {
                    "string": "upl_abort_range: kernel_object being DUMPED @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "upl_abort_range",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "wire_count == 0, m = %p, obj = %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "upl_commit_range",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vm_allocate failed - %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "kext_alloc",
            "prototype": "",
            "backtrace": [
                "__ZN6OSKext25initWithPrelinkedInfoDictEP12OSDictionaryb7kc_kind"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "__RECEIPT_INFO",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "getsectbynamefromheader"
                },
                {
                    "string": "__aux_kc_receipt",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "getsectbynamefromheader"
                }
            ],
            "symbol": "kext_receipt",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s is not supported on this kernel architecture (called from %s)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "kmod_get_info",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "kmod_get_info",
            "prototype": "",
            "backtrace": [
                "_Xkmod_get_info"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "__memmove_chk object size check failed: dst %p, src %p, (%zu < %zu) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__memmove_chk",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "__memset_chk object size check failed: dst %p, c %c, (%zu < %zu) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__memset_chk",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "__strlcat_chk object size check failed: dst %p, src %p, (%zu < %zu) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__strlcat_chk",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "__strlcpy_chk object size check failed: dst %p, src %p, (%zu < %zu) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__strlcpy_chk",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "__strncpy_chk object size check failed: dst %p, src %p, (%zu < %zu) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__strncpy_chk",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "__strncat_chk object size check failed: dst %p, src %p, (%zu < %zu + %zu + 1) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__strncat_chk",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "__strcpy_chk object size check failed: dst %p, src %p, (%zu < %zu + 1) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__strcpy_chk",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "__strcat_chk object size check failed: dst %p, src %p, (%zu < %zu + %zu + 1) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__strcat_chk",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kperf: unable to parse '%s' as action sampler\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "kperf: missing timer period in config\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "kperf: unable to parse '%s' as timer period\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "kperf: cannot enable sampling at boot: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "kperf_kernel_configure",
            "prototype": "",
            "backtrace": [
                "kperf_init_early",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kperf: pending AST to non-current thread @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "action.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kperf_ast_pend",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "HUH @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "callstack.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kperf_ucallstack_pend",
            "prototype": "",
            "backtrace": [
                "kperf_sample"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kperf: failed to create PET thread %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "pet.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "kperf-pet-sampling",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "bsd_setthreadname"
                }
            ],
            "symbol": "kppet_config",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kperf: timer fired at %llu, but sampling is disabled @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "kperf: unknown sampling state 0x%x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kptimer_expire",
            "prototype": "",
            "backtrace": [
                "kperf_timer_expire",
                "processor_init"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kptimer",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "lck_grp_init_flags"
                }
            ],
            "symbol": "kptimer_set_count",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kpc_percpu_alloc failed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "kpc_common.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kpc_register_cpu",
            "prototype": "",
            "backtrace": [
                "ml_processor_register",
                "__ZL15cpu_boot_threadPvi",
                "__Z15IOCPUInitializev",
                "iokit_post_constructor_init",
                "last_kernel_constructor"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "setting period %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "kpc_set_period",
            "prototype": "",
            "backtrace": [
                "sysctl_kpc_set_period",
                "kpc_sysctl"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kpc: pm released counters\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "kpc_release_pm_counters",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Serial keyboard started\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "serial_keyboard_init @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "serial_keyboard_init",
            "prototype": "",
            "backtrace": [
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "serial_keyboard_poll: Shouldn't never ever get here... @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "serial_keyboard_poll",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "switch_to_old_console: unknown ops %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "kPEDisableScreen %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "kPEEnableScreen %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "PE_initialize_console",
            "prototype": "",
            "backtrace": [
                "__ZN16IOPlatformExpert14setConsoleInfoEP8PE_Videoj"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Automatic NMI",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "DebuggerWithContext"
                }
            ],
            "symbol": "_serial_getc_0",
            "prototype": "",
            "backtrace": [
                "serial_keyboard_poll"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "initialize_screen: b=%08llX, w=%08X, h=%08X, r=%08X, d=%08X\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "initialize_screen: No video - forcing serial mode\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "initialize_screen",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "meter",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                }
            ],
            "symbol": "vcattach",
            "prototype": "",
            "backtrace": [
                "PE_init_iokit",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "telemetry_buffer_size",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "Telemetry: Allocation failed: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "telemetry_notification_leeway",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "telemetry: nonsensical telemetry_notification_leeway boot-arg %d changed to %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "telemetry_sample_rate",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "telemetry_sample_all_tasks",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "Telemetry: Sampling %stasks once per %u second%s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "telemetry_init_0",
            "prototype": "",
            "backtrace": [
                "kernel_bootstrap",
                "machine_startup",
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "telemetry: disabling ustackshot on PMI\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "instructions",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "mt_microstackshot_start"
                },
                {
                    "string": "cycles",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "mt_microstackshot_start"
                },
                {
                    "string": "telemetry: ustackshot every %llu %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "telemetry_pmi_setup",
            "prototype": "",
            "backtrace": [
                "telemetry"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "bootprofile_buffer_size",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "bootprofile_interval_ms",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "bootprofile_stackshot_flags",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "bootprofile_proc_name",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "bootprofile_type",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "Boot profile: Allocation failed: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "Boot profile: Sampling %s once per %u ms at %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "all procs",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "bootprofile_init",
            "prototype": "",
            "backtrace": [
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Telemetry (MACF): Allocation failed: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "telemetry_macf_init_locked",
            "prototype": "",
            "backtrace": [
                "telemetry_macf_mark_curthread",
                "mac_schedule_telemetry"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "cc_abort.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "cc_abort",
            "prototype": "",
            "backtrace": [
                "cc_try_abort",
                "generate",
                "early_random_init",
                "early_random"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "random_cpu_init: kernel prng has not been installed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ml_processor_register",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "[%d]%s>pset_create(cluster_id=%d) returned pset %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "[%d]%s>cpu_id %p cluster_id %d cpu_number %d is type %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "ml_processor_register",
            "prototype": "",
            "backtrace": [
                "__ZL15cpu_boot_threadPvi",
                "__Z15IOCPUInitializev",
                "iokit_post_constructor_init",
                "last_kernel_constructor"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ccdrbg_init() returned %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Early boot random cchkdf_expand %s failed with err %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Expected %u seed bytes from bootloader, but got %u. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "bootseed_init",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cchkdf_expand"
                },
                {
                    "string": "prngseed_init",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cchkdf_expand"
                },
                {
                    "string": "entropy_init",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cchkdf_expand"
                }
            ],
            "symbol": "early_random_init",
            "prototype": "",
            "backtrace": [
                "early_random"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "read_erandom ccdrbg error %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "read_erandom_generate",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "entropy-data",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "lck_grp_init_flags"
                }
            ],
            "symbol": "entropy_init",
            "prototype": "",
            "backtrace": [
                "register_and_init_prng"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "apple_protect_pager_init: memory_object_change_attributes() failed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "apple_protect_pager_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "apple_protect_pager_data_return: should never get called @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "apple_protect_pager_data_return",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "apple_protect_pager_data_initialize: should never get called @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "apple_protect_pager_data_initialize",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "apple_protect_pager_data_request: vm_fault_page() unexpected error 0x%x\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "apple_protect_data_request(%p,0x%llx+0x%llx+0x%04llx): out of crypto range [0x%llx:0x%llx]: COPY [0x%016llx 0x%016llx] code_signed=%d cs_validated=%d cs_tainted=%d cs_nx=%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "apple_protect_data_request(%p,0x%llx+0x%llx+0x%04llx): in crypto range [0x%llx:0x%llx]: DECRYPT offset 0x%llx=(0x%llx-0x%llx+0x%llx+0x%llx+0x%04llx)[0x%016llx 0x%016llx] code_signed=%d cs_validated=%d cs_tainted=%d cs_nx=%d ret=0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "apple_protect_pager_data_request",
            "prototype": "",
            "backtrace": [
                "apple_protect_pager_data_request"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: failed pmap_enter, virt=%p, start_addr=%p, end_addr=%p, prot=%#x, flags=%#x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "pmap_map",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pmap_map",
            "prototype": "",
            "backtrace": [
                "io_map"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pmap_map_bd @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pmap_map_bd_with_options",
            "prototype": "",
            "backtrace": [
                "io_map"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: area too large, pa_start=%p, len=%p, prot=0x%x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: insufficient pages, pa_start=%p, len=%p, prot=0x%x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pmap_map_high_window_bd",
            "prototype": "",
            "backtrace": [
                "PE_consistent_debug_inherit",
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pmap_asid_plru",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "arm_maxoffset",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "pmap_panic_dev_wimg_on_managed",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "pmap-max-asids",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTGetPropertyInternal"
                },
                {
                    "string": "pmap-max-asids property is not a 32-bit integer @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "pmap-max-asids 0x%x too large @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "pmap-max-asids cannot be zero @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pmap_bootstrap",
            "prototype": "",
            "backtrace": [
                "arm_vm_init",
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Panic occurred while attempting to lock PAI %u (%p):\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "PAI is of type PVH_TYPE_NULL.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ml_static_vtop"
                },
                {
                    "string": "PAI is of type PVH_TYPE_PTDP.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ml_static_vtop"
                },
                {
                    "string": "PAI contains an IOMMU mapping, but the IOMMU state is invalid\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ml_static_vtop"
                },
                {
                    "string": "<No Driver Supplied Name>",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "PTEP (%p) is an IOMMU mapping (state: %p) mapped by %s (on behalf of %s)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "Kernel",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "PTEP (%p) is a %s CPU mapping (pmap: %p)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "\nTotal number of PTEPs: %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                }
            ],
            "symbol": "pmap_panic_inspect_pai",
            "prototype": "",
            "backtrace": [
                "SavePanicInfo",
                "handle_debugger_trap"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: Passed in pmap doesn't own the page table to be deleted ptd=%p ptd->pmap=%p pmap=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "pmap_tte_deallocate",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pmap_tte_deallocate",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pmap_set_ptov_ap",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pmap_set_ptov_ap",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pmap_protect_options() pmap %p start 0x%llx end 0x%llx @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pmap_protect_options",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: failed pmap_enter_addr, pmap=%p, va=%#llx, pa=%llu, size=%u, prot=%#x, flags=%#x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "pmap_map_block_addr",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pmap_map_block_addr",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: failed with return code %d; pmap: 0x%016llx, v: 0x%016llx, wired: %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "pmap_change_wiring",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pmap_change_wiring",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: failed to make forward progress from 0x%llx to 0x%llx at 0x%llx @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "pmap_nest",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pmap_nest",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: failed to insert the shared page, kr=%d, pmap=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "pmap_insert_commpage",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pmap_insert_commpage",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s(%p): attempt to pin static mapping for page 0x%llx @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s(%p): physical page 0x%llx belongs to PPL @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s(%p): VA no longer mapped to physical page 0x%llx @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pmap_pin_kernel_pages",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s(%p): physical page 0x%llx not pinned @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pmap_unpin_kernel_pages",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: addr 0x%016llx doesn't have a valid kernel mapping @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: I/O filter entry found at 0x%016llx for %llu-byte wide register at va: 0x%016llx and pa: 0x%016llx, but I/O filter refused to write it. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: width %llu not supported @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pmap_iofilter_protected_write",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "initialized PPL provisioning profile data\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "os_ref_panic_retain"
                }
            ],
            "symbol": "pmap_initialize_provisioning_profiles",
            "prototype": "",
            "backtrace": [
                "csm_initialize_provisioning_profiles",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMAP_CS: underflow on the max_profile_blob_size: %lu @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "PMAP_CS: overflow on the profile_blob_size: %lu @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "PMAP_CS: profile does not validate through CoreTrust: %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "PMAP_CS: profile does not have any content: %p | %lu @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "PMAP_CS: unable to create a CoreEntitlements context for the profile @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "PMAP_CS: fatal error while setting up profile entitlements: %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "PMAP_CS: Anomaly, profile already exists in the tree: %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pmap_register_provisioning_profile_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMAP_CS: unregistering an unknown profile: %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pmap_unregister_provisioning_profile_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMAP_CS: associating an unknown profile: %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "PMAP_CS: attempted association with unverified profile: %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "PMAP_CS: overflow on reference count for profile: %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pmap_associate_provisioning_profile_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "PMAP_CS: attempted to associate NULL kernel entitlements: %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pmap_associate_kernel_entitlements_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pmap_resolve_kernel_entitlements_internal",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "validate_user_pmap"
                }
            ],
            "symbol": "pmap_resolve_kernel_entitlements_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMAP_CS: unable to gauge index size for entitlements acceleration: %p | %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "PMAP_CS: unable to accelerate entitlements: %p | %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "PMAP_CS: entitlements not marked as accelerated: %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pmap_accelerate_entitlements_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMAP_CS [CoreEntitlements]: encountered an unrecoverable error @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pmap_cs_core_entitlements_abort",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMAP_CS: CoreEntitlements allocating index without buffer @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "PMAP_CS: CoreEntitlements allocating index with mismatched size: %lu | %u @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pmap_cs_alloc_index",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "PMAP_CS: magic number mismatch on acceleration buffer: %u @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pmap_cs_free_index",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pai %d already locked down @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pmap_static_allocations_done",
            "prototype": "",
            "backtrace": [
                "arm_vm_init",
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: L%d TTE is already empty. Potential double unmap or memory stomper? pmap=%p ttep=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: Found inconsistent state in soon to be deleted L%d table: %d valid, %d compressed, %d non-empty, refcnt=%d, L%d tte=%#llx, pmap=%p, bpte=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pmap_tte_remove",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pmap_tt_deallocate(): ptdp %p, count %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pmap_tt_deallocate",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: no ptep? @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "pmap_update_tt3e",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pmap_update_tt3e",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "PMAP_CS: PNX bit not set for PTE: %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "validate_debug_pte",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "PMAP_CS: cannot query for entitlements as pmap_cs is disabled @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "PMAP_CS: attempted to query kernel_pmap for entitlements @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "check_entitlement_pmap",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "validate_user_pmap"
                }
            ],
            "symbol": "check_entitlement_pmap",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMAP_CS: compilation service binary signed as a main binary @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "code_signature_validate_constraints",
            "prototype": "",
            "backtrace": [
                "code_signature_validate",
                "pmap_cs_verify_code_signature_blob_internal"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "LOCALSPKEY",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strcmp"
                },
                {
                    "string": "PMAP_CS: failed to validate serialized local signing entitlements constraint: %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "PMAP_CS: failed acquiring unmanaged context for local signing entitlements: %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "validate_constraints_local_signing",
            "prototype": "",
            "backtrace": [
                "code_signature_validate_constraints",
                "code_signature_validate",
                "pmap_cs_verify_code_signature_blob_internal"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMAP_CS: AppleInternalProfile field not a boolean type in provisioning profile @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "validate_constraints_profile_preflight",
            "prototype": "",
            "backtrace": [
                "code_signature_validate_constraints",
                "code_signature_validate",
                "pmap_cs_verify_code_signature_blob_internal"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMAP_CS: passed in a NULL address @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "PMAP_CS: address not within kernel memory: %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "PMAP_CS: length causes an address overflow: %p + %lu @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "PMAP_CS: address end not within kernel memory: %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "PMAP_CS: address range spans through the read-only zone: %p through %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "PMAP_CS: zero length data not allowed for: %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pmap_cs_assert_addr",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "free blob to add unaligned: (%p,%p)/%zu @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "blob free count overflow (bin %d, %d/%d) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "blob page count overflow (bin %d, %d/%d) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pmap_cs_blob_add_to_free_list",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: physical address is 0 @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "pmap_alloc_page_for_kern",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pmap_alloc_page_for_kern",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "%s: PVH entry at pai %d is locked down (%#lx), cannot remove @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: ptep=%p does not match pvh=%p (%p), pai=0x%x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: ptep=%p (pai=0x%x) not in pvh=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: unexpected PV head %p, ptep=%p pmap=%p pvh=%p pai=0x%x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pmap_remove_pv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: %u addr 0x%llx is not page-aligned @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: %u length 0x%llx is not page-aligned @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: %u addr 0x%llx length 0x%llx wraps around @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: %u addr 0x%llx length 0x%llx overlaps physical memory @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pmap_compute_io_rgns",
            "prototype": "",
            "backtrace": [
                "pmap_data_bootstrap",
                "pmap_bootstrap",
                "arm_vm_init",
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: io filter entry %u offset 0x%hx length 0x%hx crosses page boundary @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "pmap_compute_io_filters",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pmap_compute_io_filters",
            "prototype": "",
            "backtrace": [
                "pmap_data_bootstrap",
                "pmap_bootstrap",
                "arm_vm_init",
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: io filter entry %u and %u overlap. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "pmap_load_io_filters",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pmap_load_io_filters",
            "prototype": "",
            "backtrace": [
                "pmap_data_bootstrap",
                "pmap_bootstrap",
                "arm_vm_init",
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: pmap array index %lu >= limit %lu @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: pmap %p does not match array element %p at index %lu @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: pmap %p is not in use @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "validate_user_pmap",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: failed, no pages available? kr=%d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "pmap_ppl_interface.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "mapping_free_prime",
            "prototype": "",
            "backtrace": [
                "kernel_bootstrap",
                "machine_startup",
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Returned from exception_triage()? @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Trap with %d words of args? We only support 9. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "mach_syscall",
            "prototype": "",
            "backtrace": [
                "sleh_synchronous",
                "_fleh_synchronous"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "CTRR (MMU) Begin: %p End: %p, setting lockdown\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "rorgn_lockdown",
            "prototype": "",
            "backtrace": [
                "machine_lockdown",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "/chosen/lock-regs",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTLookupEntry"
                },
                {
                    "string": "lock-regs: /chosen/lock-regs not found (your iBoot or EDT may be too old) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "amcc-ctrr-a",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_dt_get_lock_type"
                },
                {
                    "string": "ioa-ctrr-a",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_dt_get_lock_type"
                }
            ],
            "symbol": "amcc_find_lock_group_data",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "map aperture_phys_addr[%u]/%#x failed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Inconsistent memory config on lg %d aperture %d plane %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "rorgn_stash_range",
            "prototype": "",
            "backtrace": [
                "machine_init",
                "kernel_bootstrap",
                "machine_startup",
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "lock-regs: /chosen/lock-regs/%s not found @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "aperture-count",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTGetPropertyInternal"
                },
                {
                    "string": "%s: %s %u exceeds maximum %u @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "aperture-size",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTGetPropertyInternal"
                },
                {
                    "string": "%s: have %u apertures, but 0 size @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "plane-count",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTGetPropertyInternal"
                },
                {
                    "string": "plane-stride",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTGetPropertyInternal"
                },
                {
                    "string": "%s: plane-count (%u) > 1, but stride is 0/missing @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: aperture-size (%#x) is insufficent to cover plane-count (%#x) of plane-stride (%#x) bytes @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "aperture-phys-addr",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTGetPropertyInternal"
                },
                {
                    "string": "%s: missing required %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: aperture-phys-addr size (%#x) != (aperture-count (%#x) * PA size (%#zx) = %#lx) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "cache-status",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_dt_get_lock_reg"
                },
                {
                    "string": "master-lock",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_dt_get_lock_reg"
                }
            ],
            "symbol": "_dt_get_lock_group",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s-reg-offset",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "%s: missing property '%s' @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s-reg-mask",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "%s-reg-value",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "_dt_get_lock_reg",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "lock-regs: /chosen/lock-regs/%s/%s not found @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "page-size-shift",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTGetPropertyInternal"
                },
                {
                    "string": "lower-limit",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_dt_get_lock_reg"
                },
                {
                    "string": "upper-limit",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_dt_get_lock_reg"
                },
                {
                    "string": "write-disable",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "_dt_get_lock_type",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Unknown CPU subtype... @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "cpu_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "cpu_start() cpu: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "cpu_start",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "can't shutdown: PE_halt_restart returned %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ml_arm_sleep",
            "prototype": "",
            "backtrace": [
                "PE_cpu_machine_quiesce",
                "cpu_sleep",
                "processor_offline_intstack",
                "processor_offline",
                "processor_doshutdown"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "effective-production-status-ap",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTGetPropertyInternal"
                }
            ],
            "symbol": "cpu_machine_idle_init",
            "prototype": "",
            "backtrace": [
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "cpu_control(%d,%p,%d) not implemented\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "_Xprocessor_control",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "CPU%d failed to shut down @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "CPU %d failed to reach ARM_CPU_ON_SLEEP_PATH: %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "cpu_exit_wait",
            "prototype": "",
            "backtrace": [
                "processor_doshutdown"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "cpu_xcall_internal: invalid cpu_number %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "cpu_xcall_internal: cannot have null func/param: %p %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "cpu_xcall_internal: cpu %d not initialized @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "cpu_xcall_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "CPU%u has failed to respond to cross-call after %llu nanoseconds (timeout = %llu ns) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "cpu_signal of self while signals are disabled @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "cpu_signal_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": " vm_cache_geometry_colors: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "%s() - %u bytes %s cache (I:%u D:%u (%s)), %u-way assoc, %u bytes/line\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "do_cacheid",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "unified",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "separate",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "do_cacheid",
            "prototype": "",
            "backtrace": [
                "cpu_init"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "user_ts_jop",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "diversify_user_jop",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "kernel_startup_bootstrap",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__strncpy_chk"
                },
                {
                    "string": "maxmem",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "bpret",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "immediate_NMI",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "%s: Unable to find 'chosen' DT node @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "dram-base",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTGetPropertyInternal"
                },
                {
                    "string": "%s: Unable to find 'dram-base' entry in the 'chosen' DT node @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "dram-size",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTGetPropertyInternal"
                },
                {
                    "string": "%s: Unable to find 'dram-size' entry in the 'chosen' DT node @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "kprintf initialized\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "Serial mode specified: %08X\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "drain_uart_sync",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "WARNING: Forcing uart driver to output synchronously.printf()s/IOLogs will impact kernel performance.\nYou are advised to avoid using 'drain_uart_sync' boot-arg.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "WARNING: invalid serial boot-args : ON_DEMAND (0x%x) flag requires INPUT(0x%x). Ignoring ON_DEMAND.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "The cpumask=N boot arg cannot be used together with cpus=N, and the boot CPU must be enabled @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "aprr_jit",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn"
                },
                {
                    "string": "icdsb",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                }
            ],
            "symbol": "arm_init",
            "prototype": "",
            "backtrace": [
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "unexpected preemption count %u on boot cpu thread (should be %u) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "arm_cpu_init(): cpu %d online\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "arm_init_cpu",
            "prototype": "",
            "backtrace": [
                "_start_cpu"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "phystokv_range",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "phystokv_range",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: illegal VA: %p; virt base 0x%llx, size 0x%llx @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ml_static_vtop",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ml_static_vtop",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Unexpected /chosen/memory-map/TrustCache property size %u != %zu @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Unexpected location of TrustCache region: %#lx != %#lx @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "TrustCache region is in an unexpected place: %#lx > %#lx @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "EXTRADATA is in an unexpected place: %#lx > %#lx @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "AuxKC",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTGetPropertyInternal"
                },
                {
                    "string": "AuxKC-mach_header",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTGetPropertyInternal"
                },
                {
                    "string": "auxkc_base (%p) not below segLOWEST (%p) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "arm_vm_prot_init",
            "prototype": "",
            "backtrace": [
                "arm_vm_init",
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Unsupported memory configuration %lx @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "__PPLTEXT",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strncmp"
                },
                {
                    "string": "__PPLTRAMP",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strncmp"
                },
                {
                    "string": "__PPLDATA_CONST",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strncmp"
                },
                {
                    "string": "__PPLDATA",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strncmp"
                },
                {
                    "string": "__LAST",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strncmp"
                },
                {
                    "string": "__LASTDATA_CONST",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strncmp"
                },
                {
                    "string": "__hib_text",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "getsectbynamefromheader"
                },
                {
                    "string": "__hib_const",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "getsectbynamefromheader"
                },
                {
                    "string": "__HIBDATA",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strncmp"
                },
                {
                    "string": "use_contiguous_hint",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "segLOWESTAuxKC (%p) not equal to segLOWEST (%p). auxkc_mh: %p, auxkc_base: %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "arm_vm_init",
            "prototype": "",
            "backtrace": [
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: PTOV table limit exceeded; segment va = 0x%llx, size = 0x%llx @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "arm_vm_physmap_slide",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "arm_vm_physmap_slide",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: cpte=%#llx is not empty, vaddr=%#lx, pte=%#llx @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "arm_vm_map",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "arm_vm_map",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ml_probe_read() unimplemented @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ml_probe_read",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Not yet implemented. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "panic_unimplemented",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s address error: passed in address (%#llx) not a kernel managed address @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s alignment error: tried accessing addresses spanning more than one page %#llx %#lx @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "apply_func_phys",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ml_phys_read_data",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Invalid size %d for ml_phys_read_data @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Read from physical addr 0x%llx took %llu ns, result: 0x%016llx%016llx (start: %llu, end: %llu), ceiling: %llu @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ml_phys_read_data",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ml_phys_write_data",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Invalid size %d for ml_phys_write_data @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Write from physical addr 0x%llx took %llu ns, data: 0x%016llx%016llx (start: %llu, end: %llu), ceiling: %llu @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ml_phys_write_data",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Invalid spinlock %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Lock not owned %p = %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Lock not owned by current thread %p = %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Lock owned by current thread %p = %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "lck_spin_assert(): invalid arg (%u) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "lck_spin_assert",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s at pc 0x%016llx, lr 0x%016llx (saved state: %p%s)\n\t  x0:  0x%016llx x1:  0x%016llx  x2:  0x%016llx  x3:  0x%016llx\n\t  x4:  0x%016llx x5:  0x%016llx  x6:  0x%016llx  x7:  0x%016llx\n\t  x8:  0x%016llx x9:  0x%016llx  x10: 0x%016llx  x11: 0x%016llx\n\t  x12: 0x%016llx x13: 0x%016llx  x14: 0x%016llx  x15: 0x%016llx\n\t  x16: 0x%016llx x17: 0x%016llx  x18: 0x%016llx  x19: 0x%016llx\n\t  x20: 0x%016llx x21: 0x%016llx  x22: 0x%016llx  x23: 0x%016llx\n\t  x24: 0x%016llx x25: 0x%016llx  x26: 0x%016llx  x27: 0x%016llx\n\t  x28: 0x%016llx fp:  0x%016llx  lr:  0x%016llx  sp:  0x%016llx\n\t  pc:  0x%016llx cpsr: 0x%08x         esr: 0x%016llx  far: 0x%016llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": " INVALID",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "panic_with_thread_kernel_state",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "Unexpected debugger trap while SP1 selected",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic_with_thread_kernel_state"
                },
                {
                    "string": "Synchronous exception taken while SP1 selected",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic_with_thread_kernel_state"
                }
            ],
            "symbol": "sleh_synchronous_sp1",
            "prototype": "",
            "backtrace": [
                "fleh_synchronous_sp1",
                "el1_sp1_synchronous_vector_long"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Exception on 2-byte instruction, context=%p, esr=%#llx, far=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Exception on 2-byte instruction",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic_with_thread_kernel_state"
                },
                {
                    "string": "Invalid SVC_64 context @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Kernel instruction fetch abort",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic_with_thread_kernel_state"
                },
                {
                    "string": "Unsupported Class %u event code. state=%p class=%u esr=%llu far=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Hardware Breakpoint Debug exception from kernel. Panic (by design)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic_with_thread_kernel_state"
                },
                {
                    "string": "Software Step Debug exception from kernel. Panic (by design)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic_with_thread_kernel_state"
                },
                {
                    "string": "Illegal instruction set exception. state=%p class=%u esr=%llu far=%p spsr=0x%x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Unexpected jitbox fault in the kernel, state=%p, esr=%#llx @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "UC access exception from kernel, state=%p, esr=%#llx @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Unrecognized private exception, state=%p, esr=%#llx @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "AMX exception from kernel, state=%p, esr=%#llx @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Unrecognized AMX exception, state=%p, esr=%#llx @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "MSR/MRS trap (ESR 0x%llx) from 32-bit state @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "MSR/MRS trap (ESR 0x%llx) from kernel @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "sleh_synchronous",
            "prototype": "",
            "backtrace": [
                "_fleh_synchronous"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "attempt to set invalid recovery handler %p on kernel saved-state %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "panic_on_invalid_recovery_handler",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "Invalid kernel stack pointer (probable overflow).",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic_with_thread_kernel_state"
                },
                {
                    "string": "Invalid kernel stack pointer (probable corruption).",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic_with_thread_kernel_state"
                }
            ],
            "symbol": "sleh_invalid_stack",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "Unexpected host abort from guest context",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic_with_thread_kernel_state"
                }
            ],
            "symbol": "sleh_guest_synchronous",
            "prototype": "",
            "backtrace": [
                "_fleh_guest_synchronous",
                "_guest_sync"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "Undefined kernel instruction: pc=%p instr=%x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "handle_uncategorized",
            "prototype": "",
            "backtrace": [
                "sleh_synchronous",
                "_fleh_synchronous"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Break 0x%04X instruction exception from kernel. Ptrauth failure with %s key resulted in 0x%016llx",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlen"
                },
                {
                    "string": "0x%016llx",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlen"
                },
                {
                    "string": "0xFFFFFFFFFFFFFFFF",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlen"
                }
            ],
            "symbol": "ptrauth_handle_brk_trap",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "panic: corrupt list around element %p",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlen"
                },
                {
                    "string": "panic: string operation caused an overflow",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic_with_thread_kernel_state"
                }
            ],
            "symbol": "xnu_hard_trap_handle_breakpoint",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "PC alignment exception from kernel.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic_with_thread_kernel_state"
                }
            ],
            "symbol": "handle_pc_align",
            "prototype": "",
            "backtrace": [
                "sleh_synchronous",
                "_fleh_synchronous"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "SP alignment exception from kernel.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic_with_thread_kernel_state"
                }
            ],
            "symbol": "handle_sp_align",
            "prototype": "",
            "backtrace": [
                "sleh_synchronous",
                "_fleh_synchronous"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "Floating point exception from kernel",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic_with_thread_kernel_state"
                },
                {
                    "string": "Unrecognized floating point exception, state=%p, esr=%#llx @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "handle_fp_trap",
            "prototype": "",
            "backtrace": [
                "sleh_synchronous",
                "_fleh_synchronous"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "SW_STEP_DEBUG exception from kernel.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic_with_thread_kernel_state"
                },
                {
                    "string": "SW_STEP_DEBUG exception thread DebugData is NULL.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic_with_thread_kernel_state"
                }
            ],
            "symbol": "handle_sw_step_debug",
            "prototype": "",
            "backtrace": [
                "sleh_synchronous",
                "_fleh_synchronous"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "User abort from non-interruptible context",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic_with_thread_kernel_state"
                },
                {
                    "string": "vm_fault() KERN_FAILURE from user fault on thread %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "handle_user_abort",
            "prototype": "",
            "backtrace": [
                "sleh_synchronous",
                "_fleh_synchronous"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Unexpected residue @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Unexpected atomic LDST size %llu @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Unexpected SWP encoding, opc=%llu @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "handle_alignment_fault_from_user",
            "prototype": "",
            "backtrace": [
                "handle_user_abort",
                "sleh_synchronous",
                "_fleh_synchronous"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "Unexpected page fault under dtrace_probe",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic_with_thread_kernel_state"
                },
                {
                    "string": "Unexpected fault in kernel static region\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic_with_thread_kernel_state"
                },
                {
                    "string": "Unaligned kernel data abort.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic_with_thread_kernel_state"
                },
                {
                    "string": "Unclassified kernel abort (fault_code=0x%x)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "Kernel data abort.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic_with_thread_kernel_state"
                }
            ],
            "symbol": "handle_kernel_abort",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PAC failure (ESR 0x%llx) from 32-bit state @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "PAC failure from kernel with %s key while authing %s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "PAC failure from kernel with %s key while returning",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "PAC failure from kernel with %s key",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "handle_pac_fail",
            "prototype": "",
            "backtrace": [
                "sleh_synchronous",
                "_fleh_synchronous"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ESR (0x%llx) for instruction trapped from U32, but saved state is 64-bit. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ESR (0x%llx) for instruction trapped from U32, actually came from kernel? @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "handle_user_trapped_instruction32",
            "prototype": "",
            "backtrace": [
                "sleh_synchronous",
                "_fleh_synchronous"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ESR (0x%llx) for SIMD trap from userland, actually came from kernel? @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "handle_simd_trap",
            "prototype": "",
            "backtrace": [
                "sleh_synchronous",
                "_fleh_synchronous"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "vm_fault() KERN_FAILURE from guest fault on state %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "handle_guest_abort",
            "prototype": "",
            "backtrace": [
                "sleh_guest_synchronous",
                "_fleh_guest_synchronous",
                "_guest_sync"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Unrecognized guest trap exception, state=%p, esr=%#llx @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "handle_guest_trap",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: Invalid required state size %lu @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "sched_perfcontrol_register_callbacks",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "sched_perfcontrol_register_callbacks",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "siq_realtime_thread_mode",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "Invalid siq_realtime_thread_mode %u @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "siq_init",
            "prototype": "",
            "backtrace": [
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Invalidate HMAC function already set @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "set_invalidate_hmac_function",
            "prototype": "",
            "backtrace": [
                "machine_startup",
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Invalidate HMAC function wasn't set when needed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "machine_lockdown",
            "prototype": "",
            "backtrace": [
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "certificate-production-status",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTGetPropertyInternal"
                }
            ],
            "symbol": "spr_lockdown",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "slto_us",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "tlto_us",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "mtxspin",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "max_wfe_us",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                }
            ],
            "symbol": "ml_init_lock_timeout",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ml_cpu_down: cpu_signal of cpu %d failure %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "boot cpu powering down with nowhere for its timers to go @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ml_cpu_down",
            "prototype": "",
            "backtrace": [
                "processor_offline",
                "processor_doshutdown"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "MACH Reboot\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "CPU halted\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "halt_all_cpus",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "cpumask",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "die-cluster-id",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ml_readprop"
                },
                {
                    "string": "cluster-core-id",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ml_readprop"
                },
                {
                    "string": "unable to retrieve state for cpu @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Wrong property size for %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "chip-revision",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTGetPropertyInternal"
                },
                {
                    "string": "enable_skstb",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "enable_skstsct",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "cluster_power",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                }
            ],
            "symbol": "ml_parse_cpu_topology",
            "prototype": "",
            "backtrace": [
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ml_static_protect(): %p < %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ml_static_protect(): WX request on %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ml_static_protect(): attempt to inject executable mapping on %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ml_static_protect",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "Failed ml_static_mfree on %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ml_static_mfree",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "wfe_events_sec",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                }
            ],
            "symbol": "wfe_timeout_configure",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "invalid CPSR in user saved-state %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ml_panic_on_invalid_old_cpsr",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "attempt to set non-user CPSR %#010x on user saved-state %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ml_panic_on_invalid_new_cpsr",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Missing mandatory property '%s' @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ml_readprop",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.private.custom-x18-abi",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "get_threadtask"
                }
            ],
            "symbol": "machine_task_process_signature",
            "prototype": "",
            "backtrace": [
                "process_signature"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Unknown AMX feature ID bit has been set @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "AMXIDR_EL1 doesn't advertise any known version of AMX @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "configure_misc_apple_regs",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Preemption count underflow @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "preemption_disable.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "_enable_preemption_underflow",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Warning: clock is locked.  Can't get time\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "mach_absolute_time: 0x%llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "Epoch Time:        sec       usec\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "  Boot    : 0x%08x 0x%08x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "  Sleep   : 0x%08x 0x%08x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "  Wake    : 0x%08x 0x%08x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "  Calendar: 0x%08x 0x%08x\n\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                }
            ],
            "symbol": "panic_display_times",
            "prototype": "",
            "backtrace": [
                "SavePanicInfo",
                "handle_debugger_trap"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "cpu_signal failed in DebuggerXCallEnter\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cpu_signal_internal"
                },
                {
                    "string": "%s>found CPU %d offline, debugger_sync=%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "%s>Debugger synch pending on cpu %d\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Attempting to forcibly halt cpu %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "cpu %d failed to halt with error %d: %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "cpu %d halted with warning %d: %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "Unable to obtain state for cpu %d with status %d: %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ml_dbgwrap_halt_cpu_with_state"
                },
                {
                    "string": "cpu %d successfully halted\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ml_dbgwrap_halt_cpu_with_state"
                },
                {
                    "string": "Immediate halt requested on all cores\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                },
                {
                    "string": "Debugger synchronization timed out; timeout %llu nanoseconds\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "paniclog_append_noflush"
                }
            ],
            "symbol": "DebuggerXCallEnter",
            "prototype": "",
            "backtrace": [
                "handle_debugger_trap"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Resuming from debugger synchronization failed: waited %llu nanoseconds\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "DebuggerXCallReturn",
            "prototype": "",
            "backtrace": [
                "handle_debugger_trap"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s>found_mp_kdp_trap=true found_SIGPdebug=%s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "wait_while_mp_kdp_trap",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "wait_while_mp_kdp_trap",
            "prototype": "",
            "backtrace": [
                "processor_cpu_reinit"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "context switch with PAN disabled @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "machine_switch_context @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "machine_switch_context",
            "prototype": "",
            "backtrace": [
                "thread_invoke"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "thread %p already has AMX saved state %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "machine_thread_amx_state_alloc",
            "prototype": "",
            "backtrace": [
                "sleh_synchronous",
                "_fleh_synchronous"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "stack handoff with PAN disabled @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "machine_stack_handoff",
            "prototype": "",
            "backtrace": [
                "stack_handoff",
                "thread_invoke"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "arm_debug_set @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "arm_debug_set",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "rtclock timebase_callback: invalid constant %ld / %ld @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "rtclock.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "timebase_callback",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kdp panic: %s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "kdp_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: should not have been invoked. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "_was_in_userspace",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "kdp_machdep.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "_was_in_userspace",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "hib bank[%d]: 0x%llx (%d) end 0x%llx (%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "hibernate_page_list_allocate",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "monotonic: invalid core counter read: %u @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "mt_core_snap",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mach_bridge_recv_timestamps",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "mach_bridge_recv_timestamps",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mach_bridge_set_params",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "mach_bridge_set_params",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "sart %p: Invalid config for region %d size 0 @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "sart_set_registers",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s %p (%s): unregister buffer is empty %zu @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "t8110dart_unregister_queue_remove_last",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "t8110dart_unregister_queue_remove_last",
            "prototype": "",
            "backtrace": [
                "t8110dart_map",
                "t8110dart_unmap"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "UAT PPL: Failed to acquire %p's lock because it has already been acquired by another thread. The IOUAT mutex should have prevented this scenario. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "uat_lock",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "UAT PPL %p (%s): ttbr_index <--> state_object mismatch: vaddr(%#llx) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "UAT PPL %p (%s): address not page-aligned: vaddr(%#llx) PAGE_SIZE(%#llx) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "UAT PPL %p (%s): size not a multiple of PAGE_SIZE: vaddr(%#llx) size(%#llx) PAGE_SIZE(%#llx) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "UAT PPL %p (%s): region wraps round: vaddr(%#llx) size(%#llx) last_vaddr(%#llx) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "UAT PPL %p (%s): region not wholly within permitted inclusive range: vaddr(%#llx) min_vaddr(%#llx) size(%#llx) last_vaddr(%#llx) max_vaddr(%#llx) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "uat_validate_vaddr",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "hmac-reg-base",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTGetPropertyInternal"
                },
                {
                    "string": "%s: hmac register base is zero @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "secure_hmac_get_reg_base",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pmgr-reg-base",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTGetPropertyInternal"
                },
                {
                    "string": "%s: pmgr register base is zero @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "secure_hmac_get_aes_reg_base",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "secure_hmac_get_aes_offset",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "pmgr-aes-offset",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTGetPropertyInternal"
                }
            ],
            "symbol": "secure_hmac_get_aes_offset",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: failed to initialize PPL state object: 0x%x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "secure_hmac_init",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "secure_hmac_init",
            "prototype": "",
            "backtrace": [
                "machine_lockdown",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: pmap_iommu_map failed: 0x%x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "secure_hmac_hibernate_begin",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "secure_hmac_hibernate_begin",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: Only non-wired memory should be getting hashed during hibernation restore @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "secure_hmac_reset",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: output_len should be %d but is %zu @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: PPL ioctl PPL_HIB_IOCTL_FINAL failed: 0x%x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "secure_hmac_final",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: PPL ioctl PPL_HIB_IOCTL_FETCH_HIBSEG failed: 0x%x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: PPL ioctl PPL_HIB_IOCTL_FETCH_HIBSEG_INFO failed: 0x%x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "secure_hmac_fetch_hibseg_and_info",
            "prototype": "",
            "backtrace": [
                "hibernate_write_image",
                "ml_arm_sleep",
                "PE_cpu_machine_quiesce",
                "cpu_sleep",
                "processor_offline_intstack",
                "processor_offline",
                "processor_doshutdown"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: PPL ioctl PPL_HIB_IOCTL_COMPUTE_RORGN_HMAC failed: 0x%x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "secure_hmac_compute_rorgn_hmac",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "secure_hmac_compute_rorgn_hmac",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: PPL ioctl PPL_HIB_IOCTL_FETCH_RORGN_SHA failed: 0x%x\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "secure_hmac_fetch_rorgn_sha",
            "prototype": "",
            "backtrace": [
                "hibernate_write_image",
                "ml_arm_sleep",
                "PE_cpu_machine_quiesce",
                "cpu_sleep",
                "processor_offline_intstack",
                "processor_offline",
                "processor_doshutdown"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: PPL ioctl PPL_HIB_IOCTL_FETCH_RORGN_HMAC failed: 0x%x\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "secure_hmac_fetch_rorgn_hmac",
            "prototype": "",
            "backtrace": [
                "hibernate_write_image",
                "ml_arm_sleep",
                "PE_cpu_machine_quiesce",
                "cpu_sleep",
                "processor_offline_intstack",
                "processor_offline",
                "processor_doshutdown"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: hmac_len should be %d but is %zu @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: PPL ioctl PPL_HIB_IOCTL_FINALIZE_IMAGE failed: 0x%x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "secure_hmac_finalize_image",
            "prototype": "",
            "backtrace": [
                "hibernate_write_image",
                "ml_arm_sleep",
                "PE_cpu_machine_quiesce",
                "cpu_sleep",
                "processor_offline_intstack",
                "processor_offline",
                "processor_doshutdown"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: PPL ioctl PPL_HIB_IOCTL_GET_IO_RANGES failed: 0x%x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "secure_hmac_get_io_ranges",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "secure_hmac_get_io_ranges",
            "prototype": "",
            "backtrace": [
                "hibernate_page_list_allocate"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "apple-isa-vm-quota",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTGetPropertyInternal"
                },
                {
                    "string": "hv_apple_isa_vm_quota",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "hv_vm",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_ext"
                }
            ],
            "symbol": "hv_init",
            "prototype": "",
            "backtrace": [
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.private.virtualization",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "hv_vcpu_init_vm_caps",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "3B878185-AA62-4E1F-9DC9-D6799CBB6EBB",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "uuid_parse"
                }
            ],
            "symbol": "hv_trap_vcpu_run",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Unexpected failure to free VA space we just allocated: %d! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "mmap_jitbox_region",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "LLC_ERR_STS/ADR/INF=%#llx/%#llx/%#llx LSU_ERR_STS=%#llx FED_ERR_STS=%#llx MMU_ERR_STS=%#llx DPC_ERR_STS=%#llx",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "LLC dup tag multi-hit error by CPU %d: FAR=%#lx way_mask=%#x err_sts: (%s) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "way predictor",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "LLC %s multi-hit error: FAR=%#lx way_mask=%#x err_sts: (%s) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "L2 RAM addr out of range",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "LLC %s error: FAR=%#lx err_sts: (%s) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Unhandled %c-core error: %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s err (%s) %son %c-core: FAR=%#llx %s_ERR_STS=%#llx err_sts: (%s) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": " (UNKNOWN)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": " (Normal completion)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": " (Decode error)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": " (Slave error)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": " (Bus error)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": " (Non-recoverable Uncorrected)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": " (AMX Uncorrected)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": " (Recoverable Uncorrected)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": " (Unavailable)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": " (Reserved)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "cpu%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "cpu%d: LLC %s error%s from %s: FAR=%#lx addr=%#llx cmd=%#x(%s) err_sts: (%s) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "single-bit ECC counter overflow",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "single-bit ECC",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "LLC %s error: FAR=%#lx way=%#x syndrome=%#x err_sts: (%s) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "double-bit cache ECC overflow",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "double-bit cache ECC",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "LLC %s error: FAR=%#lx way=0x%x syndrome=%#x cmd=%#x(%s) err_sts: (%s) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Uncontained LLC AMX %s error: FAR=%#lx way=0x%x syndrome=%#x cmd=%#x(%s) err_sts: (%s) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Unhandled recoverable LLC %s error: FAR=%#lx way=0x%x syndrome=%#x cmd=%#x(%s) err_sts: (%s) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "generic_platform_error_handler",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "l2-ecc-correctable-panic",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTGetPropertyInternal"
                }
            ],
            "symbol": "init_generic_platform_error_handler",
            "prototype": "",
            "backtrace": [
                "machine_startup",
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(va=0x%#llx) ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "format_va",
            "prototype": "",
            "backtrace": [
                "generic_platform_error_handler"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(va=%#llx) ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "format_va_or_tlb_set_way",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(PIO offset from this cluster: %#llx, info=%#llx AFID=%#llx%s)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "format_multiple_err_and_pio_addr",
            "prototype": "",
            "backtrace": [
                "generic_platform_error_handler"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(multiple errors) ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "format_multiple_err",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(info=%#llx%s) ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "format_multiple_err_and_raw_info",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "[bti_telemetry] bti_telemetry_init\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "bti_telemetry_init",
            "prototype": "",
            "backtrace": [
                "kernel_bootstrap",
                "machine_startup",
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Unexpectedly found multiple concurrent drains! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Unexpected duplicate splay entry! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Unexpectedly could not acquire telemetry lock (nested acquire will deadlock) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "[bti_telemetry] Unexpected BTI exception (pc=0x%08lx, BTYPE=%d)\n[bti_telemetry] \t<UUID: %s, offset: 0x%08lx>\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "drain_record_submission_buffer_thread_call",
            "prototype": "",
            "backtrace": [
                "bti_telemetry_init",
                "kernel_bootstrap",
                "machine_startup",
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "nfsvc_addsock:: nfsrv_check_exports_allow_address(myname) returned %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "nfssvc_addsock: socket buffer setting SO_SNDBUF to %llu error(s) %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "nfssvc_addsock: socket buffer setting SO_RCVBUF to %llu error(s) %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "nfssvc_addsock: socket timeout setting SO_RCVTIMEO error(s) %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "nfssvc_addsock: socket timeout setting SO_SNDTIMEO error(s) %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "nfssvc_addsock",
            "prototype": "",
            "backtrace": [
                "nfssvc"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "NFS server: NULL reply from proc = %d error = %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "mbuf siz=%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Bad nfs svc reply @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "nfs_syscalls.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "nfssvc_nfsd",
            "prototype": "",
            "backtrace": [
                "nfssvc"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "Server header: gss_krb5_verify_mic_mbuf failed %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Server args: gss_krb5_verify_mic_mbuf failed %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: gss_krb5_unwrap_mbuf failes %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: Sequence number mismatch seqnum = %d nd->nd_gss_seqnum = %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "reply_mbuf",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printmbuf"
                },
                {
                    "string": "reply_mbuf %p nmc_head %p\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "nfs_gss_svc_cred_get",
            "prototype": "",
            "backtrace": [
                "nfsrv_getreq",
                "nfsrv_dorec"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: %d: is running\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "nfs_printf"
                },
                {
                    "string": "%s: %d: Removing contex for %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "nfs_printf"
                }
            ],
            "symbol": "nfs_gss_svc_ctx_timer",
            "prototype": "",
            "backtrace": [
                "nfs_gss_svc_init",
                "nfsrv_init",
                "nfssvc"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "gss_krb5_get_mic_mbuf failed %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "nfs_gss_svc_protect_reply",
            "prototype": "",
            "backtrace": [
                "nfssvc_nfsd",
                "nfssvc"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nfs_gss_svc_gssd_upcall: can't get gssd port, status %x (%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "nfs_gss_svc_gssd_upcall: gssd port not valid\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Calling mach_gss_accept_sec_context\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "mach_gss_accept_sec_context returned %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "nfs_gss_svc_gssd_upcall failed: %x (%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "nfs_gss_svc_gssd_upcall: bad context length (%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Failed to make context from lucid_ctx_buffer\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "nfs_gss_svc_gssd_upcall: could not allocate %d bytes\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "nfs_gss_svc_ctx_init",
            "prototype": "",
            "backtrace": [
                "nfsrv_null"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nfs_gss_mach_alloc_buffer: vm_map_round_page failed\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "nfs_gss_mach_alloc_buffer: vm_allocate failed\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "nfs_gss_mach_alloc_buffer: vm_map_unwire failed\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "nfs_gss_mach_alloc_buffer: vm_map_copyin failed\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "nfs_gss_mach_alloc_buffer",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "nfsrv_send",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "nfs_dump_mbuf"
                },
                {
                    "string": "nfsrv_send\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "nfs_dump_mbuf"
                }
            ],
            "symbol": "nfsrv_send",
            "prototype": "",
            "backtrace": [
                "nfssvc_nfsd",
                "nfssvc"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "nfsrv_rcv: mbuf_setnext failed %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "nfsrv_rcv: mbuf_setnext failed\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "nfsrv_rcv_locked",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "nfs getstream @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "nfsrv_getstream: nfsrv_unprocessed_rpc_current (%u) has reached the max allowed consumption (%u)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "nfsrv_getstream: mbuf_setnext failed\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "nfsrv_getstream: mbuf_setnext failed 3, %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "nfsrv_getstream",
            "prototype": "",
            "backtrace": [
                "nfsrv_rcv_locked"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "nfsrv cache @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "nfs_srvcache.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "nfsrv cache: reply alloc failed for nonidem request hit\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "nfsrv cache: reply copym failed for nonidem request hit\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "nfsrv cache: nam copym failed\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "nfsrv_getcache",
            "prototype": "",
            "backtrace": [
                "nfssvc_nfsd",
                "nfssvc"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%2.2x ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "%s    ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "nfs_dump_mbuf",
            "prototype": "",
            "backtrace": [
                "nfsrv_send",
                "nfssvc_nfsd",
                "nfssvc"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "got NULL mbuf? @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "nfs_subs.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "nfsm_chain_new_mbuf",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nfsrv_free_addrlist: invalid socket address (%u)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "copyin"
                },
                {
                    "string": "nfsrv_free_addrlist: address not found (0)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "copyin"
                },
                {
                    "string": "nfsrv_free_addrlist: address not found (1)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "copyin"
                }
            ],
            "symbol": "nfsrv_free_addrlist",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nfsrv_export: warning: nested exports: %s/%s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "nfsrv_export",
            "prototype": "",
            "backtrace": [
                "nfssvc_export",
                "nfssvc"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nfsrv_uc_dequeue_wait",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                },
                {
                    "string": "nfsrv_uc_dequeue remove %p\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "nfsrv_uc_dequeue",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nfsd_upcall_shutdown_stop",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                }
            ],
            "symbol": "nfsrv_uc_cleanup",
            "prototype": "",
            "backtrace": [
                "nfsrv_cleanup",
                "nfssvc_nfsd",
                "nfssvc"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "nfsd_upcall_shutdown_wait",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                },
                {
                    "string": "nfsd: Could not start nfsd proxy up-call service. Falling back\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "nfsrv_uc_addsock",
            "prototype": "",
            "backtrace": [
                "nfssvc_addsock",
                "nfssvc"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nfsd_upcall_handler",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                }
            ],
            "symbol": "nfsrv_uc_thread",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nfsd up-call queue limit exceeded @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "nfs_upcall.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "nfsrv_uc_proxy",
            "prototype": "",
            "backtrace": [
                "nfsrv_uc_addsock",
                "nfssvc_addsock",
                "nfssvc"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s mbuf = %p offset = %d len = %d:\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Count chars %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "printmbuf",
            "prototype": "",
            "backtrace": [
                "nfs_gss_svc_cred_get",
                "nfsrv_getreq",
                "nfsrv_dorec"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "buffer",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "printgbuf",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Token id does not match\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Bad flags %x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "krb5_cfx_crypt_mbuf %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Encrypted token mismach\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "gss_krb5_cfx_unwrap_mbuf",
            "prototype": "",
            "backtrace": [
                "gss_krb5_unwrap_mbuf",
                "nfs_gss_svc_cred_get",
                "nfsrv_getreq",
                "nfsrv_dorec"
            ]
        },
        {
            "args": 4,
            "anchors": [
                {
                    "string": "Bad mic TOK_ID %x %x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Bad flags received %x exptect %x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Bad mic filler %x @ %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "gss_krb5_cfx_verify_mic_mbuf",
            "prototype": "",
            "backtrace": [
                "gss_krb5_verify_mic_mbuf"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: bad framing\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: invalid length\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: token to short",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "toklen = %d, length = %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: Invalid mechanism\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: Invalid body\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: Invalid des mac\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "gss_krb5_3des_token_get",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: invalid version %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: Could not decode initiate\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: Could not decode endtime\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: Could not decode send_seq\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: Could not decode recv_seq\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: Could not decode mech protocol\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: Could not decode rfc1964 sign and seal\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: Could not decode rfc4121 acceptor_subkey",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: Invalid mech protocol %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: Could not decode key enctype\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: could not decode key length\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: etype = %d keylen = %d expected keylen = %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: could not get memory for key\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: could get key value\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "gss_krb5_make_context",
            "prototype": "",
            "backtrace": [
                "nfs_gss_svc_ctx_init",
                "nfsrv_null"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "netboot: no suitable interface\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "netboot: using network interface '%s'\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "netboot: socreate, error=%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "netboot: SIFFLAGS, error=%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "netboot: can't retrieve IP parameters\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "netboot: IP address %d.%d.%d.%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": " netmask %d.%d.%d.%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": " router %d.%d.%d.%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "netboot: inet_aifaddr failed, %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "netboot: adding default route %d.%d.%d.%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "netboot: default_route_add failed %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "dhcp-response",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "netboot: retrieving IP information from DHCP response\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "netboot: retrieving IP information from BOOTP response\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "rootpath",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "netboot_info_init: rp0='%s' isn't a network path, ignoring\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "netboot: NFS boot is deprecated\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "http:",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlen"
                },
                {
                    "string": "netboot: HTTP URL %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "netboot: root path uses unrecognized format\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "netboot: nested image %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "bsdp-response",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOBSDRegistryEntryGetData"
                },
                {
                    "string": "netboot: retrieving root path from BSDP response\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "netboot: retrieving root path from BOOTP response\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "netboot_mountroot",
            "prototype": "",
            "backtrace": [
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "netboot_setup: calling imageboot_mount_image\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "netboot_setup",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "failed to register provider '%s': invalid arguments",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "<NULL>",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "failed to register provider '%s': invalid provider name",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "failed to register provider '%s': invalid provider ops",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "failed to register provider '%s': invalid provider attributes",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "failed to register provider '%s': invalid privilege attributes",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "failed to register provider '%s': need dtps_usermode() op for given privilege attributes",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                }
            ],
            "symbol": "dtrace_register",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "attempt to unregister non-existent dtrace provider %p\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "dtrace_unregister",
            "prototype": "",
            "backtrace": [
                "fasttrap_pid_cleanup_cb"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "failed to register meta-provider: invalid name",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "failed to register meta-register %s: invalid ops",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "failed to register meta-register %s: user-land meta-provider exists",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                }
            ],
            "symbol": "dtrace_meta_register",
            "prototype": "",
            "backtrace": [
                "fasttrap_init"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "helper_init before dtrace_init @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "helper_init: failed to allocate a major number!\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "dtracehelper",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "devfs_make_node"
                },
                {
                    "string": "dtrace_init: failed to devfs_make_node for helper!\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "helper_init: called twice! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "helper_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "dtrace_kernel_symbol_mode",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                }
            ],
            "symbol": "kernel_bootstrap_thread",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "dtrace_init: failed to retrieve the hw.memsize, defaulted to %lld bytes\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "dtrace_init: failed to allocate a major number!\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "dtrace_init: failed to devfs_make_node_clone for dtrace!\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "dtrace_dof_mode",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "dtrace_init: called twice! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "dtrace_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "dtrace_postinit: Could not register mach_kernel modctl\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "illegal value (%lu) for dtrace_retain_max; setting to 1",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "BEGIN",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "dtrace_probe_create"
                },
                {
                    "string": "dof-data-%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "failed to create anonymous state",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "unreadable DOF",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "truncated header",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "truncated DOF",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "invalid DOF size",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "oversized DOF",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "enabling probe %d (%s:%s:%s:%s)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                }
            ],
            "symbol": "dtrace_postinit",
            "prototype": "",
            "backtrace": [
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(scope == DIFV_SCOPE_GLOBAL && size <= maxglobalsize) || (scope == DIFV_SCOPE_LOCAL && size <= maxlocalsize)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "dtrace_canstore_remains",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "inprobe == 0 || id == dtrace_probeid_error",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "dtrace_probe",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "id < (uint_t)vstate->dtvs_nglobals",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "id < (uint_t)vstate->dtvs_nlocals",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "id < (uint_t)vstate->dtvs_ntlocals",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "dtrace_dif_emulate",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "dtrace: panic action at probe %s:%s:%s:%s (ecb %p) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "dtrace_action_panic",
            "prototype": "",
            "backtrace": [
                "dtrace_probe"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "attempt to unref non-existent string %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "dtrace_strunref",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "state->dts_formats[ndx]->dtf_refcount < UINT64_MAX",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "dtrace_ecb_create_enable",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "fmt->dtf_refcount > 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "dtrace_ecb_destroy",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "returned value did not match expected generation",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                }
            ],
            "symbol": "dtrace_lazy_dofs_process",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "helper",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strncmp"
                },
                {
                    "string": "ustack",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strncmp"
                },
                {
                    "string": "unmatched helpers",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "misaligned section offset",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "provider section too small",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "invalid provider name",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "invalid entry size",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "misaligned entry size",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "invalid function name",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "function name too long",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "invalid probe name",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "invalid probe offset",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "is-enabled offsets with null section",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "invalid is-enabled offset",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "zero probe and is-enabled offsets",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "zero probe offsets",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "invalid args",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "bad native argument type",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "native argument type too long",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "bad native argument index",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "bad translated argument type",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "translated argument type too long",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                }
            ],
            "symbol": "dtrace_helper_slurp",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "DOF magic string mismatch",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "DOF has invalid data model",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "DOF encoding mismatch",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "DOF version mismatch",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "DOF uses unsupported instruction set",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "DOF uses too many integer registers",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "DOF uses too many tuple registers",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "DOF has invalid ident byte set",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "DOF has invalid flag bits set",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "invalid section header size",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "truncated section headers",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "misaligned section headers",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "misaligned section size",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "illegal sections for enabling",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "bad section alignment",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "misaligned section",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "corrupt section header",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "non-terminating string table",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                }
            ],
            "symbol": "dtrace_dof_slurp",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Non loadable section with ECB description",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "truncated ECB description",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "bad alignment in ECB description",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "invalid probe section",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "bad alignment in probe description",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "truncated probe description",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "corrupt probe provider",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "corrupt probe module",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "corrupt probe function",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "corrupt probe name",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                }
            ],
            "symbol": "dtrace_dof_ecbdesc",
            "prototype": "",
            "backtrace": [
                "dtrace_dof_slurp"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "invalid DIFO header section",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "bad alignment in DIFO header",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "bad size in DIFO header",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "exceeds maximum size",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "bad alignment",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "entry size mismatch",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "corrupt entry size",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "unrecognized DIFO subsection",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "missing DIF text",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "cannot write to 0 address\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "dtrace_difo_err"
                },
                {
                    "string": "invalid branch target %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "dtrace_difo_err"
                },
                {
                    "string": "backward branch to %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "dtrace_difo_err"
                },
                {
                    "string": "invalid integer ref %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "dtrace_difo_err"
                },
                {
                    "string": "invalid string ref %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "dtrace_difo_err"
                },
                {
                    "string": "invalid ref type %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "dtrace_difo_err"
                },
                {
                    "string": "invalid val type %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "dtrace_difo_err"
                },
                {
                    "string": "invalid key\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "dtrace_difo_err"
                },
                {
                    "string": "expected 'ret' as last DIF instruction\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "dtrace_difo_err"
                },
                {
                    "string": "bad return size\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "dtrace_difo_err"
                },
                {
                    "string": "unrecognized variable scope %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "dtrace_difo_err"
                },
                {
                    "string": "unrecognized variable type %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "dtrace_difo_err"
                },
                {
                    "string": "%d exceeds variable id limit\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "dtrace_difo_err"
                },
                {
                    "string": "zero-sized variable\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "dtrace_difo_err"
                },
                {
                    "string": "oversized by-ref static\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "dtrace_difo_err"
                },
                {
                    "string": "%d changed variable kind\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "dtrace_difo_err"
                },
                {
                    "string": "%d changed variable type flags\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "dtrace_difo_err"
                },
                {
                    "string": "%d changed variable type size\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "dtrace_difo_err"
                }
            ],
            "symbol": "dtrace_dof_difo",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "dtrace DIF object error: [%u]: ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "uprintf"
                }
            ],
            "symbol": "dtrace_difo_err",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "invalid action section",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "truncated action description",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "bad alignment in action description",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "section entry size exceeds total size",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "bad entry size in action description",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "actions exceed dtrace_actions_max",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "bogus format string",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "empty format string",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                }
            ],
            "symbol": "dtrace_dof_actdesc",
            "prototype": "",
            "backtrace": [
                "dtrace_dof_ecbdesc",
                "dtrace_dof_slurp"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "illegal variable %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "dtrace_difo_err"
                },
                {
                    "string": "illegal dynamic variable load\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "dtrace_difo_err"
                },
                {
                    "string": "illegal dynamic variable store\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "dtrace_difo_err"
                }
            ],
            "symbol": "dtrace_difo_validate_helper",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "dtrace_open: couldn't acquire minor number %d. This usually means that too many DTrace clients are in use at the moment",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "dtrace_aggid_%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "dtrace_state_create",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "unloaded module '%s' had enabled probes",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                }
            ],
            "symbol": "dtrace_module_unloaded",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "security restrictions disallow DTRACEIOC_MODUUIDSLIST",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "dtrace_kernel_symbol_mode of %u disallows DTRACEIOC_MODUUIDSLIST",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "failed to copyin dtmul_count",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "dtmul_count is not valid",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "failed copyin of dtrace_module_uuids_list_t",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "failed copyout of dtrace_symbolsdesc_list_t",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "dtrace_kernel_symbol_mode of %u disallows DTRACEIOC_PROVMODSYMS",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "failed to copyin dtmodsyms_count",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "Invalid dtmodsyms_count value",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "Invalid module_symbols_size %ld",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "failed copyin of dtrace_module_symbols_t",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                }
            ],
            "symbol": "_dtrace_ioctl",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Non loadable option section",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "bad alignment in option description",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "zeroed option entry size",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "bad option entry size",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "non-zero option string",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "unset option",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "rejected option",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                }
            ],
            "symbol": "dtrace_dof_options",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "dstate->dtds_chunksize < (LONG_MAX - sizeof (dtrace_dynhash_t))",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "(uintptr_t)start < limit",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "(uintptr_t)start >= (uintptr_t)base",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "limit <= (uintptr_t)base + size",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "(uintptr_t)dvar >= (uintptr_t)base && (uintptr_t)dvar <= (uintptr_t)base + size",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "dtrace_state_go",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "failed to copyin dofiod_count",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "dofiod_count is not valid",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "failed copyin of dof_ioctl_data_t",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "failed copyout of dof_ioctl_data_t",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "lazy_dofs_add merged_dofs_count out of range",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                }
            ],
            "symbol": "helper_ioctl",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "dtrace load module already exists '%s %u' is failing against '%s %u'",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "dtrace module load '%s %u' is failing ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                }
            ],
            "symbol": "dtrace_module_loaded",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "lockstat_init: failed to allocate a major number!\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "lockstat_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "dtrace_proc_waitfor",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                }
            ],
            "symbol": "dtrace_proc_waitfor",
            "prototype": "",
            "backtrace": [
                "_dtrace_ioctl"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "attempt to remove non-existent invop handler @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "dtrace_subr.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "dtrace_invop_remove",
            "prototype": "",
            "backtrace": [
                "fbt_init"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "timer_call_cancel() failed to cancel a timer call: %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "dtrace_cpu_state_changed",
            "prototype": "",
            "backtrace": [
                "dtrace_init"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vmem_alloc: failure after blist_resize! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vmem_alloc",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "blist_meta_alloc: allocation too large @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "blst_meta_alloc",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "blst_meta_free: freeing already free blocks (%d) %d/%d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "blst_meta_free: freeing unexpected range @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "blst_meta_free",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "fbt_init: failed to allocate a major number!\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "IgnoreFBTBlacklist",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                }
            ],
            "symbol": "fbt_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "SDT: unable to find prelink info\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "sdt_early_init",
            "prototype": "",
            "backtrace": [
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "SDT: No kernel symbols for %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "__sdt",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "getsectbynamefromheader"
                }
            ],
            "symbol": "sdt_load_machsect",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "sdt_init: failed to allocate a major number!\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "/dev/sdt couldn't create minor node",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "failed to register sdt provider %s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "dtrace_register"
                }
            ],
            "symbol": "sdt_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Ignoring probes from unsupported provider %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strcmp"
                },
                {
                    "string": "Ignoring probe %s (no symbol name)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "__sdt_provide_module",
            "prototype": "",
            "backtrace": [
                "sdt_provide_module"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "systrace_init: failed to allocate a major number!\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "systrace",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "devfs_make_node"
                },
                {
                    "string": "machtrace",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "devfs_make_node"
                },
                {
                    "string": "mach_trap",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "dtrace_register"
                }
            ],
            "symbol": "systrace_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "profile_init: failed to allocate a major number!\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "profile_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "hrtime_t",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "profile_getargdesc",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "fasttrap_init: failed to allocate a major number!\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Could not create fasttrap_cleanup_thread @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "fasttrap.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "dtrace_fasttrap_cleanup_thread",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "bsd_setthreadname"
                },
                {
                    "string": "dtrace.fasttrap_probe_t[1]",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_ext"
                },
                {
                    "string": "dtrace.fasttrap_probe_t[2]",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_ext"
                },
                {
                    "string": "dtrace.fasttrap_probe_t[3]",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_ext"
                }
            ],
            "symbol": "fasttrap_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Failed to install fasttrap probe for pid %d: Process does not allow invalid code pages\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "Failed to install fasttrap probe for pid %d: Failed to re-acquire process\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                }
            ],
            "symbol": "fasttrap_pid_enable",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "fasttrap_fork: sprlock(%d) returned a different proc\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "fasttrap_fork: failed to re-acquire proc\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "fasttrap_fork",
            "prototype": "",
            "backtrace": [
                "fasttrap_init"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "failed to instantiate provider %s: name too long to accomodate pid",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "failed to instantiate provider %s: %s is an invalid name",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                },
                {
                    "string": "failed to instantiate provider %s for process %u",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cmn_err"
                }
            ],
            "symbol": "fasttrap_meta_provide",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "userland struct sigvec *",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "userland struct sigaltstack *",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "userland struct rusage *",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "userland unsigned char *",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "userland struct statfs *",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "userland fhandle_t *",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "userland void **",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "userland struct rlimit *",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "userland const struct fhandle *",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "userland sem_t *",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "userland struct statfs64 *",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "userland au_id_t *",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "userland struct auditinfo_addr *",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "au_asid_t",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "userland struct nxctl_init *",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "userland struct ch_init *",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "userland struct net_qos_param *",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "userland struct timex *",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "userland struct ntptimeval *",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "systrace_entry_setargdesc",
            "prototype": "",
            "backtrace": [
                "systrace_getargdesc"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "random_init: failed to allocate a major number! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "randomdev.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "random",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "devfs_make_node"
                },
                {
                    "string": "urandom",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "random_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mdevadd: attempt to add overlapping memory device at %016llX-%016llX @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "mdevadd: attempt to add more than %d memory devices @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "mdevadd: attempt to explicitly add a bogus memory device: %08X @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "mdevadd: attempt to explicitly add a previously defined memory device: %08X @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "mdevadd: error - bdevsw_add() returned %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "ramdevice_init: error - cdevsw_add() returned %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "mdevadd: devfs_make_node for block failed!\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "rmd%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "devfs_make_node"
                },
                {
                    "string": "mdevadd: devfs_make_node for character failed!\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Added memory device md%x/rmd%x (%08X/%08X) at %016llX for %016llX\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "mdevadd",
            "prototype": "",
            "backtrace": [
                "IOFindBSDRoot",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ramstrategy: buf_map failed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "mdevstrategy: sink address %016llX not mapped @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "mdevstrategy: source address %016llX not mapped @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "mdevstrategy",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kern.maxvnodes",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_get_default"
                }
            ],
            "symbol": "bsd_startupearly",
            "prototype": "",
            "backtrace": [
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mbuf_pool",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                }
            ],
            "symbol": "bsd_mbuf_cluster_reserve",
            "prototype": "",
            "backtrace": [
                "__startup_kmem_range_spec_mb_block_invoke_2"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "monotonic: cdevsw_add failed: %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "monotonic: devfs_make_node failed for '%s' @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "mt_dev_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Directory expected to have fg_vn_data @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "getattrlistbulk",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "buf_strategy: b_vp == NULL || vtype == VCHR | VBLK @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "buf_strategy",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vnode_flushdirtyblks",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tsleep"
                }
            ],
            "symbol": "buf_flushdirtyblks_skipinfo",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "using %d buffer headers and %d cluster IO buffer headers\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Couldn't register buffer cache callout for vm pressure! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "bufinit",
            "prototype": "",
            "backtrace": [
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "buf_bdwrite",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "vnode_waitforwrites"
                }
            ],
            "symbol": "bdwrite_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "buf_brelse: bad buffer = %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "brelse: bp @ %p has NULL b_iodone! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "brelse: Failed to create UPL @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ubc_upl_unmap failed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "brelse: UPL set for non VREG; vp=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "buf_brelse_shadow: bp_head on freelist %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "buf_brelse_shadow: bp not on list %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "buf_relse_shadow: b_shadow != NULL && b_shadow_ref == 0  bp(%p) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "buf_relse_shadow: b_shadow == NULL && b_shadow_ref != 0  bp(%p) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "buf_brelse",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "buf_getblk",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "msleep"
                },
                {
                    "string": "getblk: paging or unknown operation for incore busy buffer - %x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "buffer has UPL, but not marked BUSY: %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "getblk: paging or unknown operation for incore buffer- %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "bp already has UPL: %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "getblk: VNOP_BLOCKMAP failed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "getblk: paging or unknown operation - %x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "bgetvp_locked: not free @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "buf_getblk",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "allocbuf: buffer larger than MAXBSIZE requested @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "allocbuf",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "buf_invalblkno",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "bremfree_locked"
                }
            ],
            "symbol": "buf_invalblkno",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "buf_biowait",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "lck_mtx_unlock_slow"
                }
            ],
            "symbol": "buf_biowait",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "biodone already @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "biodone: bp @ %p has NULL b_iodone! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "buf_biodone",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "alloc_io_buf (1)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                },
                {
                    "string": "alloc_io_buf (2)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                }
            ],
            "symbol": "alloc_io_buf",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "free_io_buf: bp(%p) - bufstats.bufs_iobufinuse < 0 @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "free_io_buf",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "buf_reassign: NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "lck_mtx_lock_slow"
                }
            ],
            "symbol": "buf_reassign",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "bremfree_locked: %p not on freelist @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "bremfree: lost tail @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "bremfree_locked",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "getnewbuf: bp @ %p is LOCKED or BUSY! (flags 0x%x) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "getnewbuf",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "buf_acquire",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "msleep"
                }
            ],
            "symbol": "buf_acquire_locked",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "blaundry",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                }
            ],
            "symbol": "bcleanbuf_thread",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%c(%u, %u)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "vnode_getname_printable",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "firmlink target for vnode %p does not have flag set @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vnode_getfirmlink",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "Incorrect state for old nc_counter(%d), should be even @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "cache_enter_locked",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "Incorrect state for old nc_counter(%d), should be odd @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "cache_delete",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "failed to resize the hash table.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "add_name_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 6,
            "anchors": [
                {
                    "string": "cluster_pagein: NULL upl passed in @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "cluster_pagein_ext",
            "prototype": "",
            "backtrace": [
                "cluster_pagein"
            ]
        },
        {
            "args": 5,
            "anchors": [
                {
                    "string": "cluster_push",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "vnode_waitforwrites"
                }
            ],
            "symbol": "cluster_push_err",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s(): Called with real buffer of size %d bytes which is greater than the maximum allowed size of %d bytes (the system PAGE_SIZE).\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s(): Called with real buffer and needs verification  @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s : Number of retries for syncing first or last page reached %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Vector UPLs should not take this code-path @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "BUSY bp found in cluster_io @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "buf_setupl failed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s(): cbp_head is not NULL. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "cluster_io",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "cluster_wait_IO",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                }
            ],
            "symbol": "cluster_wait_IO",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s length = %zu, verify_block_size = %zu @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "cluster_EOT",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "cluster_EOT",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "cluster_verify_thread",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "bsd_setthreadname"
                }
            ],
            "symbol": "cluster_verify_thread",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ubc_upl_map_range returned error %d upl = %p, upl_offset = %d, size = %d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "verify_in_flight underflow @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "cluster_iodone_finish",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "ecount >= DRT_BITVECTOR_PAGES, cmap = %p, index = %d, bit = %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ecount <= 0, cmap = %p, index = %d, bit = %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vfs_drt_do_mark_pages",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vfs_drt: new cluster map mysteriously too small @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vfs_drt_alloc_map",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "cluster_write_copy: failed to get pagelist @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "cluster_write_copy",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "cluster_push: failed to get pagelist @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "cluster_push_now",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "encrypted blocks will hit UBC! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "cluster_read_copy: failed to get pagelist @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "cluster_read_copy",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "Failed to restore dirty state on failure @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vfs_drt: entry summary count > 0 but no bits set in map, cmap = %p, index = %d, count = %lld @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "sparse_cluster_push",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "operation %s not listed in %s.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "vfs_opv_init: bad operation @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vfs_opv_init: operation vector without default routine. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vfs_opv_init",
            "prototype": "",
            "backtrace": [
                "vfsinit",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "We need to keep going on a continued lookup, but for vp type %d (tag %d) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "NAMEI_ROOTDIR is set but ni_rootdir is not\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "p->p_fd.fd_rdir is not set\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "rootvnode is not set\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "(1) invalid pre-increment usecount (%d) for rootdir vnode %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "(1) usecount overflow for vnode %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "(2) invalid pre-increment usecount (%d) for vnode %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "(2) usecount overflow for vnode %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "(3) Unexpected pre-decrement value (%d) of usecount for rootvnode %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "(4) Unexpected pre-decrement value (%d) of usecount for rootvnode %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "namei",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "leaf should be empty @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "lookup",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "lookup_traverse_union: null parent name: .%s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "lookup_traverse_union",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "NULL vp with error == 0. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "lookup_compound_vnop_post_hook",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 4,
            "anchors": [
                {
                    "string": "NULL ni_vp in %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "lookup_handle_found_vnode",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Incorrect termination of path in %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "lookup_handle_rsrc_fork",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "lookup_handle_found_vnode",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "dquot",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "dqlookup: error %d looking up id %u at index %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "dqlookup: error looking up id %u at index %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "dqget",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "dqsync_orphans: dquot in use @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "dqsync_orphans",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "dqflush: stray dquot @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "dqflush",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "dqsync: NULL dq_qfile @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "dqsync: NULL qf_vp @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "dqsync_locked",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "vnode_writedone: numoutput < 0 @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vnode_writedone",
            "prototype": "",
            "backtrace": [
                "buf_biodone"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vnode_drain_network",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tsleep"
                }
            ],
            "symbol": "vnode_umount_preflight",
            "prototype": "",
            "backtrace": [
                "vflush"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mount_iterdrain",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                }
            ],
            "symbol": "mount_iterdrain",
            "prototype": "",
            "backtrace": [
                "dounmount"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "already in drain @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "mount_drain",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                },
                {
                    "string": "mount_refdrain: dangling vnode @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "mount_refdrain",
            "prototype": "",
            "backtrace": [
                "dounmount"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "vfsbusy",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                }
            ],
            "symbol": "vfs_busy",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vfs_mountroot: can't setup bdevvp\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "root_device",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "vfs_rootmountalloc_internal"
                },
                {
                    "string": "%s() VFS_ROOT() returned %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "vfs_mountroot",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s_mountroot failed: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "vfs_mountroot",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s : shuffling mount points : %s <-> / <-> %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Do not use a leading slash in outgoing_vol_new_path\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Incoming rootfs root vnode not found\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Outgoing rootfs path not found, abandoning / switch, error = %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Outgoing rootfs path is not a directory, abandoning / switch\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "skipping preserved mountpoint because not found or error: %d: %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "skipping preserved mountpoint because not a mountpoint: %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "preserved new mount directory not found or error: %d: %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "preserved new mount directory not directory: %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "will preserve mountpoint across pivot: /%s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s : done shuffling mount points with error: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Incoming rootfs path not a directory\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Incoming rootfs root vnode does not have associated mount\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Incoming rootfs root vnode mount is busy\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Could not get rootvnode of incoming rootfs\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Incoming rootfs root vnode mount is is not a mountpoint\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Incoming rootfs is backed by a virtual device; cannot switch to it",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "vfs_switch_root",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vnode_get(rootvnode) failed with error %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "attempting kernel mount for recovery volume... \n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Failed to mount recovery volume (%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "mounted recovery volume\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "vfs_mount_recovery",
            "prototype": "",
            "backtrace": [
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "bdevvp",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "vnode_create_internal"
                },
                {
                    "string": "bdevvp failed: vnode_ref @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "bdevvp failed: fsync @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "bdevvp failed: invalidateblks @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "bdevvp failed: open @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "bdevvp",
            "prototype": "",
            "backtrace": [
                "vfs_mountroot"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "vnode_ref_ext: vp %p has no valid reference %d, %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vnode_ref_ext: v_writecount @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vnode_ref_ext: v_kusecount @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vnode_ref_ext",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "vnode_rele_ext: vp %p usecount -ve : %d.  v_tag = %d, v_type = %d, v_flag = %x. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vnode_rele_ext: vp %p writecount -ve : %d.  v_tag = %d, v_type = %d, v_flag = %x. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vnode_rele_ext: vp %p kusecount -ve : %d.  v_tag = %d, v_type = %d, v_flag = %x. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vnode_rele_ext: vp %p kusecount(%d) out of balance with usecount(%d).  v_tag = %d, v_type = %d, v_flag = %x. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vnode_rele_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "vflush",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vflush",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vfs: bad selector 0x%.8x for old-style sysctl().  use the sysctl-by-fsid interface instead\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "smbfs",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strcmp"
                }
            ],
            "symbol": "vfs_sysctl_node",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vfs_unmountall(%ssystem) start\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Unmounting timed out\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "missed mount",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tsleep"
                },
                {
                    "string": "vfs_unmountall(%ssystem) end\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "vfs_unmountall",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ioqueue_depth = %d,   ioscale = %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "vfs_init_io_attributes",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "vnode getiocount",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "vnode_getiocount",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "vnode_getiocount",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "NULL vnode passed to vnode_initialize @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vnode_initialize",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "add_fsref: vp already has named reference @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "addfsref: vp on the free list @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vnode_addfsref",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "remove_fsref: no named reference @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vnode_removefsref",
            "prototype": "",
            "backtrace": [
                "null_reclaim"
            ]
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "Open parameters, but not a regular file. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Mode for open, but not trying to open... @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vnode_create: unknown vtype %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vn_create",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.kauth.vnode",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kauth_register_scope"
                }
            ],
            "symbol": "vfsinit",
            "prototype": "",
            "backtrace": [
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "NULL ndp @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vn_authorize_open_existing",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 4,
            "anchors": [
                {
                    "string": "NULL cn_ndp @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vn_authorize_create",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 5,
            "anchors": [
                {
                    "string": "Passed something other than NULL as reserved field! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vn_authorize_renamex_with_paths",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 4,
            "anchors": [
                {
                    "string": "reserved not NULL in vn_authorize_mkdir() @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vn_authorize_mkdir",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 4,
            "anchors": [
                {
                    "string": "Non-NULL reserved argument to vn_authorize_rmdir() @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vn_authorize_rmdir",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "(1) vnode attrs not complete for vnode_attr_authorize @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "(2) vnode attrs not complete for vnode_attr_authorize (2) vap->va_active = 0x%llx , vap->va_supported = 0x%llx @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vnode_attr_authorize",
            "prototype": "",
            "backtrace": [
                "vnode_attr_authorize_dir_clone",
                "VNOP_CLONEFILE",
                "clonefile_internal"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vclean: cannot reclaim @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vclean",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "insmntque: vp not in mount vnode list @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vp already in mount list @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "insmntque: vp already in mount vnode list @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "insmntque",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vnode_reload with no iocount %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vnode_iterate",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "unmount(%d) %s skipped\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "unmount(%d) %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Unmount of %s failed (%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "unmount_callback",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "new_vnode(%p): the vnode is VL_DEAD but not VBAD @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "new_vnode(%p): vp on list @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "new_vnode(%p): free vnode still referenced @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "new_vnode(%p): vnode seems to be on mount list @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "new_vnode(%p): vnode still hooked into the name cache @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "process_vp",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s : vp %p holdcount -ve: %d.  v_tag = %d, v_type = %d, v_flag = %x. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vnode_drop_internal",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vnode_drop_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vnode_put(%p): iocount < 1 @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vnode_put_internal_locked",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "vnode reclaim in progress @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vnode_reclaim_internal: cleaned vnode isn't @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vnode_reclaim_internal: clean vnode has pending I/O's @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vnode_reclaim_internal: vparent not removed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vnode_reclaim_internal: vname not removed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vnode_reclaim_internal: vleases NOT empty @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "missing bdev @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "missing alias @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vnode_reclaim_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "vnode_drain: recursive drain @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vnode_drain_with_timeout",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "msleep"
                },
                {
                    "string": "vnode_drain",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "msleep"
                }
            ],
            "symbol": "vnode_drain",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vnode_create: vnode_resolver_create() err %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: alias vnode (vid = %u) is in state of change (start) v_flags = 0x%x v_numoutput = %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: alias vnode (vid = %u), is in state of change (end) v_flags = 0x%x v_numoutput = %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "insmntque: vp on the free list @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "new_vnode: vp (%p) on RAGE list not marked VLIST_RAGE @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vnode",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%d desired, %ld numvnodes, %ld free, %ld dead, %ld async, %d rage\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "checkalias with VT_NON vp that shouldn't: %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vnode_create_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "trigger_unmount_callback: unexpected match '%s'\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "trigger_unmount_callback: trigger mnt changed! (%p != %p)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "unresolving: '%s', err %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "trigger_unmount_callback",
            "prototype": "",
            "backtrace": [
                "vfs_nested_trigger_unmounts",
                "dounmount"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vnode_trigger_unresolve: not currently resolved\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "vnode_trigger_unresolve",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "VNODE_REF_FORCE didn't help... @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vnode_resolver_create",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.private.vfs.file-leases",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "thread_wakeup_prim"
                }
            ],
            "symbol": "vnode_setlease",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "wait_for_lease_break",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "msleep"
                }
            ],
            "symbol": "wait_for_lease_break",
            "prototype": "",
            "backtrace": [
                "vnode_breaklease"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "failed to locate mount-on path: %s ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "kernel_mount",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: mount on %s failed, error %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "vfs_mount_at_path",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "vfs_mount_at_path",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": ".quota.ops",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "group",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "enablequotas",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "attempt to unmount a system mount (%s), will return EBUSY\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "safedounmount",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "dounmount: no coveredvp @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "dounmount",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "sync_thread failed\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "sync_thread",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "msleep"
                },
                {
                    "string": "sync timed out: %d sec\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "sync_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.private.vfs.pivot-root",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "copyinstr"
                }
            ],
            "symbol": "pivot_root",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "safe_getpath: failed to get the path for vp %p (%s) : err %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "no-name",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "safe_getpath_new",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: %s: Bad dirent recived from directory %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "vnode_readdir64",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "vnode_readdir64",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.private.vfs.snapshot.user",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOTaskHasEntitlement"
                },
                {
                    "string": "com.apple.private.vfs.snapshot",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "get_threadtask"
                },
                {
                    "string": "com.apple.developer.vfs.snapshot",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "get_threadtask"
                },
                {
                    "string": "com.apple.private.apfs.arv.limited.snapshot",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "vnode_authorize"
                }
            ],
            "symbol": "fs_snapshot",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "/System/Library/AssetsV2/manifests/",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "graft_secureboot_read_fd"
                }
            ],
            "symbol": "graft_secureboot_read_metadata",
            "prototype": "",
            "backtrace": [
                "graftdmg"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Volume mounted on a device with invalid major number. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s() VFS_ROOT returned %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "mount_common",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "webdav",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strncmp"
                },
                {
                    "string": "mount_common(): mount of %s filesystem failed with %d, but vnode list is not empty. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "mount_common",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.private.vfs.open-by-id",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kalloc_ext"
                }
            ],
            "symbol": "openbyid_np",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "No vp, but no compound remove? @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "EKEEPLOOKING, but not a filesystem that supports compound VNOPs? @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "unlinkat_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "EKEEPLOOKING without NAMEI_CONTLOOKUP on either ndp? @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "rename retry limit due to ERECYCLE reached\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "renameat_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "No error, but no compound rmdir? @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "rm AD",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tsleep"
                }
            ],
            "symbol": "rmdirat_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nspace.complete: gencount changed! (orig %llu cur %llu)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "nspace.complete: syncroot changed! (orig %llu cur %llu)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "sysctl_nspace_complete",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nspacerq",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                }
            ],
            "symbol": "nspace_resolver_req_add",
            "prototype": "",
            "backtrace": [
                "vfs_materialize_item"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.private.kernel.set-package-extensions",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOTaskHasEntitlement"
                }
            ],
            "symbol": "fsctl_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "EKEEPLOOKING from a filesystem that doesn't support compound VNOPs? @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Haven't cleaned up adequately in vn_open_auth() @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Why am I trying to use VNOP_OPEN() on anything other than the root or a named stream? @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "com.apple.private.security.file-unencrypt-access",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "vnode_put"
                },
                {
                    "string": "vn_open_auth_retry",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                },
                {
                    "string": "EKEEPLOOKING, but we did a create? @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "EKEEPLOOKING from filesystem that doesn't support compound vnops? @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vn_open_auth",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "Invalid knote filter on a vnode! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Should never have an EVFILT_READ except for reg or fifo. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "filt_vnode_common",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vnode_flushnamedstream: err %d opening file\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "vnode_flushnamedstream",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "getnamedstream",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "getshadowfile"
                }
            ],
            "symbol": "vnode_getnamedstream",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "/var/run/.vfs_rsrc_streams_%p%x",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "/var/run",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "vnode_lookupat"
                },
                {
                    "string": ".vfs_rsrc_streams_%p%x",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "get_shadow_dir",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "get_xattrinfo: resource fork not last entry\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "get_xattrinfo",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "setxattr: VNOP_WRITE error %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "setxattr: write_xattrinfo error %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "setxattr: VNOP_TRUNCATE error %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "setxattr: uiomove error %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "default_setxattr_vfs",
            "prototype": "",
            "backtrace": [
                "default_setxattr",
                "vn_setxattr"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "removexattr: write_xattrinfo error %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "default_removexattr",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vfs_fsadd: operation %s not listed in %s.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "vfs_fsadd: bad operation @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vfs_fsadd: operation vector without default routine. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vfs_fsadd",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vnode_lookup_continue_needed(): cnp->cn_ndp is NULL @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vnode_lookup_continue_needed",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "No dvp? @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Want create, but no vap? @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Don't want create, but have a vap? @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Filesystem did a create, even though none was requested? @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "VNOP_COMPOUND_OPEN",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 5,
            "anchors": [
                {
                    "string": "Not batched, and no fvp? @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "VNOP_COMPOUND_RENAME() returned %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "vn_rename",
            "prototype": "",
            "backtrace": [
                "renameat_internal"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "No fvpp after compound rename? @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "VNOP_COMPOUND_RENAME",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 4,
            "anchors": [
                {
                    "string": "Non-CREATE nameiop in vn_mkdir()? @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vn_mkdir",
            "prototype": "",
            "backtrace": [
                "vn_create"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "NULL vp, but not a compound VNOP? @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Non-NULL vap, but not a compound VNOP? @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vn_rmdir",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "add_fsevent: event queue is full! dropping events (num dropped events: %d; num events outstanding: %d).\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "add_fsevent: kfse_list head %p ; num_pending_rename %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "add_fsevent: zalloc sez: %p\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "add_fsevent: event_zone info: %d 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "add_fsevent: line %d: kfse recount %d but should be at least 1 @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "add_fsevent: you can't pass me a NULL vnode ptr (type %d)! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "add_fsevent: was not able to add path %s to event %p. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "add_fsevent: funny looking string length: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "add_fsevent: bogus looking string (len %d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "add_fsevent: unknown type %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "fsevents: watcher falling behind: %s (pid: %d) rd: %4d wr: %4d q_size: %4d flags: 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "add_fsevent",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "release_event_ref: bogus kfse refcount %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "release_event_ref",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "fsevents: watcher %s (pid: %d) - Using /dev/fsevents directly is unsupported.  Migrate to FSEventsFramework\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "fsevents: too many watchers!\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "com.apple.private.vfs.fsevents-watcher",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "get_bsdtask_info"
                },
                {
                    "string": "com.apple.private.vfs.fsevents-access-granted-watcher",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "get_bsdtask_info"
                }
            ],
            "symbol": "add_watcher",
            "prototype": "",
            "backtrace": [
                "fseventsioctl"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "fsevents: close: still have readers! (%d) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "remove_watcher",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "fsevents_empty",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                },
                {
                    "string": "/.Spotlight-V100/",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strnstr"
                },
                {
                    "string": "/.MobileBackups/",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strnstr"
                },
                {
                    "string": "/Backups.backupdb/",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strnstr"
                }
            ],
            "symbol": "fseventsf_read",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "fsevents: copy_out_kfse: asked to copy out an invalid event (kfse %p, refcount %d) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "copy_out_kfse:2: empty/short path (%s)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "fill_buff"
                }
            ],
            "symbol": "copy_out_kfse",
            "prototype": "",
            "backtrace": [
                "fseventsf_read"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "unexpected unmount pending ack %d (%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "fseventsf_ioctl",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "watcher-close",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "selwakeup"
                }
            ],
            "symbol": "fseventsf_drain",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kern.maxkfsevents",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_get_default"
                },
                {
                    "string": "fs-event-buf",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_ext"
                }
            ],
            "symbol": "fsevents_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "cp_os_version: unable to parse osversion `%s'\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "cp_os_version",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.private.dmc.set",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "microuptime"
                }
            ],
            "symbol": "disk_conditioner_set_info",
            "prototype": "",
            "backtrace": [
                "fsctl_internal"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "dead_read: lock @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "dead_read",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "dead_write: lock @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "dead_write",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "dead_badop called @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "dead_badop",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Couldn't make stdin, err %d.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Couldn't make stdout, err %d.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Couldn't make stderr, err %d.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "devfs_fdesc_makelinks",
            "prototype": "",
            "backtrace": [
                "devfs_fdesc_init",
                "devfs_init",
                "vfsinit",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "fdesc_allocvp",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                }
            ],
            "symbol": "fdesc_allocvp",
            "prototype": "",
            "backtrace": [
                "devfs_devfd_lookup"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Invalid type for fdesc node! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "fdesc_open",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "fifo_open with no fifoinfo @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "fifo_vnops.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "fifocreatewait",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                },
                {
                    "string": "fifoor",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                },
                {
                    "string": "fifoow",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                }
            ],
            "symbol": "fifo_open",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "spec_open",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "spec_init_bsdunit"
                },
                {
                    "string": "spec_open type @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "spec_open",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "spec_read type @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "spec_read",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "spec_write type @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "spec_write",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "spec_ioctl @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "spec_ioctl",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "throttle_lowpri_io",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assert_wait"
                }
            ],
            "symbol": "throttle_lowpri_io",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Illegal devno (%d) passed into throttle_info_disable_throttle() @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "throttle_info_disable_throttle",
            "prototype": "",
            "backtrace": [
                "vfs_init_io_attributes"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "spec_strategy",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "spec_init_bsdunit"
                },
                {
                    "string": "Invalid value (%d) for si_devbsdunit for vnode %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Invalid value (%d) for si_isssd for vnode %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "spec_strategy",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "negative open count (c, %u, %u) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "negative open count (b, %u, %u) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "spec_close: not special @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "spec_close",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "spec_blktooff: not implemented for VBLK\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "spec_blktooff type @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "spec_blktooff",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "spec_offtoblk: not implemented for VBLK\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "spec_offtoblk type @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "spec_offtoblk",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s : si_devbsdunit initialized to (%d), throttle_mask is (0x%llx), isssd is (%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "spec_init_bsdunit",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "devfs_sinit: dev_add_entry failed ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "devfs_sinit",
            "prototype": "",
            "backtrace": [
                "devfs_init",
                "vfsinit",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "devfs_remove: not ready for devices!\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "devfs_remove",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "plane count wrapped around. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "devfs_free_plane",
            "prototype": "",
            "backtrace": [
                "devfs_unmount"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "devfs_dntovn: DN_DELETE set on a devnode upon entry. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "devfs_dntovn: cloning device with a vnode? @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "devfs_dntovn",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "devfs_rele_node: devnode without a refcount! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "devfs_rele_node",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "devfs_make_node: not ready for devices!\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "devfs_make_node_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "devfs_read(): bad file type %d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "devfs_read",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "devfs_write(): bad file type %d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "devfs_write",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "devfs_kernel_mount: kernel_mount failed: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "devfs_kernel_mount",
            "prototype": "",
            "backtrace": [
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "oslog_stream",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "devfs_make_node"
                }
            ],
            "symbol": "devfs_init",
            "prototype": "",
            "backtrace": [
                "vfsinit",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d:%s: %s: unknown cmp_state %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "decmpfs_file_is_compressed",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d:%s: %s: VNOP_VERIFY returned error = %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d:%s: %s: verify block size (%zu) is not power of 2, no verification will be done\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d:%s: %s: upl size (%zu) is not a multiple of verify block size (%zu)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d:%s: %s: FS block size (%u) is greater than PAGE_SIZE (%d) and is not power of 2, no verification will be done\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d:%s: %s: FS block size (%u) is greater than verify block size (%zu), no verification will be done\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d:%s: %s: unexpected pagein during decompress\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d:%s: %s: Unexpected size fetch of decompressed data, l_uplSize = %d, l_did_read = %d, inval_size = %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d:%s: %s: Verification failed with error %d, uplPos = %lld, uplSize = %d, did_read = %d, valid_pages = %d, invalid_pages = %d, tail_page_valid = %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d:%s: %s: ubc_upl_unmap error %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "decmpfs_pagein_compressed",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d:%s: %s: verify block size is not power of 2, no verification will be done\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d:%s: %s: ubc_create_upl error %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d:%s: %s: ubc_upl_map kr=0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d:%s: %s: ubc_upl_map mapped null\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d:%s: %s: cmp_state == FILE_IS_CONVERTING\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d:%s: %s: cmp_state == FILE_IS_COMPRESSED\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d:%s: %s: cmp_state == FILE_IS_NOT_COMPRESSED\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d:%s: %s: Verification failed with error %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "ubc_upl_unmap returned error %d (kern_return_t) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s:%d:%s: %s: uplOff %lld should never be negative\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d:%s: %s: uplOff %lld too large\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d:%s: %s: cluster_copy_upl_data err %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "decmpfs_read_compressed",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d:%s: %s: decmpfs_fetch_compressed_header err %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d:%s: %s: decompressor err %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "decmpfs_free_compressed_data",
            "prototype": "",
            "backtrace": [
                "decmpfs_decompress_file"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "%s:%d:%s: %s: uio_addiov err %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d:%s: %s: VNOP_WRITE err %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d:%s: %s: file decompressed to %lld instead of %lld\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d:%s: %s: VNOP_FSYNC err %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d:%s: %s: aborting decompress, err %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d:%s: %s: vnode_setsize err %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d:%s: %s: decmpfs_free_compressed_data err %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d:%s: %s: vnode_getattr err %d, num retries %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d:%s: %s: vnode_setattr err %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d:%s: %s: FSIOC_CAS_BSDFLAGS err: flags mismatc. actual (%x) expected (%x), num retries %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d:%s: %s: FSIOC_CAS_BSDFLAGS err %d, num retries %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "decmpfs_decompress_file",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s:%d:%s: %s: invalid compression_magic 0x%08x, should be 0x%08x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d:%s: %s: compression_type %d out of range\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "decmpfs_fetch_compressed_header",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.AppleFSCompression.providesType%u",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "%s:%d:%s: %s: waiting for %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d:%s: %s: the kext with %s is no longer present\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d:%s: %s: still waiting for %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "lck_rw_done"
                },
                {
                    "string": "%s:%d:%s: %s: we found %s, but the type still isn't registered\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d:%s: %s: tried to access a compressed file of unregistered type %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "_decmp_get_func",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "wait_for_decompress",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                }
            ],
            "symbol": "wait_for_decompress",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "bpfdraining",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                },
                {
                    "string": "Two threads blocked in a BPF close @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "bpf buffer freed during read/write @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: bpf%d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "bpf%u closed by %s.%u dcount %llu fcount %llu ccount %llu",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bpfclose",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "bpf_read",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                },
                {
                    "string": "%s: bpf%d ERESTART to EINTR",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bpfread",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "bpfwrite",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                },
                {
                    "string": "bpfwrite: resid %d error %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "bpf_movein_batch uiomove error %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "bpf_movein_batch bh_hdrlen %u too small",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "bpf_movein_batch bh_caplen %u != bh_datalen %u",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "bpf_movein_batch bh_hdrlen %u too large",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "bpf_movein_batch bpf_movein error %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bpfwrite",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "BIOCFLUSH",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                },
                {
                    "string": "bpfioctl",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "bpf%d BIOCSBLEN capped to %u from %u",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "bpf%d BIOCSBLEN bumped to %u from %u",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "bpf%d BIOCSBLEN %u",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "bpf%u cannot set BIOCSHDRCMPLT when BIOCSBATCHWRITE is set",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "bpf%u cannot set BIOCSETTC when BIOCSBATCHWRITE is set",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: ifnet not found for %s error %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "bpf%u bd_write_size_max %u too big",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "bpf%u cannot set BIOCSBATCHWRITE when BIOCSHDRCMPLT is not set",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "bpf%u cannot set BIOCSBATCHWRITE when BIOCSETTC is set",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bpfioctl",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "bpfselect",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                }
            ],
            "symbol": "bpfselect",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "bpf_hdr_comp",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "bpf_init: failed to allocate a major number",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bpf_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "bpf_growing",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                },
                {
                    "string": "bpf%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "devfs_make_node"
                },
                {
                    "string": "bpf_make_dev_t: malloc bpf_dtab failed",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bpf_make_dev_t",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: %p refcnt <= 0 @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: %p BPF_DETACHED not set @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "bpf_release_d",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "bpf_detachd: descriptor not in list @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "bpf_detachd",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": " closed and",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "bpf_detachd: bpf%d %s disable input 0",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: bpf%d ifnet_set_promiscuous %s failed",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "bpf%d%s detached from %s fcount %llu dcount %llu",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bpf_detachd",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "bpf_setf",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                }
            ],
            "symbol": "bpf_setf",
            "prototype": "",
            "backtrace": [
                "bpfioctl"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "bpf_setif",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "bpf_allocbufs"
                },
                {
                    "string": "bpf%u attached to %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bpf_setif",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "bpf_setdlt",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                },
                {
                    "string": "bpf_setdlt: bpf%d bpf_attachd %s error %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "bpf_setdlt: bpf%d ifpromisc %s error %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bpf_setdlt",
            "prototype": "",
            "backtrace": [
                "bpfioctl"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "SO_VALID_TC(tc)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "bpf_set_packet_service_class",
            "prototype": "",
            "backtrace": [
                "bpfwrite"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s:%d tlen %u > bpfp_total_length %lu bpfp_header_length %lu pth_frame_pre_length %u pre_adjust %u in_pkt_len %u out_pkt_len %u @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s:%d tlen %u > bpfp_total_length %lu bpfp_header_length %lu pth_frame_pre_length %u pre_adjust %u in_pkt_len %u out_pkt_len %u",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bpf_tap_imp",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "bpf_mcopy @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "buflet != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "addr != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "copy_bpf_packet_offset",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "x_cnt < nbpfilter",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "sysctl_bpf_stats",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "bridgeattach",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "proto_register_plumber failed for PF_INET error=%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "proto_register_plumber failed for PF_INET6 error=%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: ifnet_clone_attach failed %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ether_family_init",
            "prototype": "",
            "backtrace": [
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "is_promisc == list_is_promisc",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: (%s): count %u",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s from %s m 0x%llx data 0x%llx frame 0x%llx %s header length %lu",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: frame_header outside mbuf",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bridge_early_input",
            "prototype": "",
            "backtrace": [
                "dlil_input_packet_list_common"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mac_nat_entry_print2",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %.*s %s%s%s %p (%s, %s, %s)",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mac_nat_entry_print2",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "bridge_mac_nat_arp_translate",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: mbuf_copyback failed",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: mbuf_copyback uh_sum failed",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: mbuf_copyback dp_flags failed",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: mbuf_copyback lladdr failed",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: mbuf_copyback cksum=0 failed",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: mbuf_copyback cksum failed",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bridge_mac_nat_translate",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "bridge_pf",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: m_pullup failed",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bridge_pf",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": " frag",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Short IP packet %d < %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: bad IP version",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: bad IP header length %d < %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: IP total len %d < header len %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: invalid IP payload length %d > %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: short IPv6 packet %d < %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: bad IPv6 version",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: ip6_lasthdr() returned %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: invalid IPv6 payload length %d > %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: IPv%c proto %d ip %u pay %u opt %u pkt %u%s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bridge_get_ip_proto",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "dst_ifp != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: %s bridge_send(%s) len %d op %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bridge_enqueue",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "tso_hwassist",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: does%s support checksum 0x%x if_csum 0x%x",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "tso_hwassist",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "gso_ip_tcp",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s %s mss %d nsegs %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "gso_tcp",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "dst_ifp != NULL && src_ifp != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "bridge_finalize_cksum",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "bridge_compute_cksum",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: [%s] before 0x%x hwcap 0x%x sw_csum 0x%x did 0x%x after 0x%x",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: [%s -> %s] before 0x%x did 0x%x after 0x%x",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bridge_handle_checksum_op",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "com.apple.kernel.bsd.net.if_bridge",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "dlil_attach_filter"
                },
                {
                    "string": "%s: %s invalid MTU for %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: ifnet_set_promiscuous(%s) failed %d, ignoring",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: ifnet_set_promiscuous(%s) failed %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: if_allmulti(%s) failed %d, ignoring",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: iflt_attach failed %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: bridge_attach_protocol failed %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bridge_ioctl_add",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "bridge_iff_input[",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "brlog_mbuf"
                },
                {
                    "string": "bridge_iff_input]",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "brlog_mbuf"
                },
                {
                    "string": "bcast_mcast ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "bridge_ifp->if_bridge == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: %s from %s m 0x%llx data 0x%llx frame 0x%llx %s frmlen %lu",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: frame_ptr outside mbuf",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: short frame %lu < %lu",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: mbuf_pullup(%lu) failed %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s %sfrom %s m 0x%llx data 0x%llx",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s bridge_host_filter failed",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:  broadcast: %02x:%02x:%02x:%02x:%02x:%02x",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s mcast for us",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bridge_iff_input",
            "prototype": "",
            "backtrace": [
                "bridge_ioctl_add"
            ]
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "bridge_forward",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "src_if == m->m_pkthdr.rcvif",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: %s m 0x%llx",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bridge_forward",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "bridge_mac_nat_arp_input",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s %s ARP %s -> %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bridge_mac_nat_input",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "bridge_rtnode_hash",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s EEXIST %02x:%02x:%02x:%02x:%02x:%02x",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bridge_rtnode_hash",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "bridge_iff_output",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "bridge_member_output",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s from %s m 0x%llx data 0x%llx",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: ifp %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bridge_iff_output",
            "prototype": "",
            "backtrace": [
                "bridge_ioctl_add"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "bridge_iflinkevent",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: ifnet_set_promiscuous (%s) failed %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: if_allmulti (%s) failed %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bridge_iff_event",
            "prototype": "",
            "backtrace": [
                "bridge_ioctl_add"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "flushed",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "mac_nat_entry_print2"
                }
            ],
            "symbol": "bridge_mac_nat_flush_entries_common",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "bridge_iff_detached",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bridge_iff_detached",
            "prototype": "",
            "backtrace": [
                "bridge_ioctl_add"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "bridge_attach_protocol",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: ifnet_attach_protocol(%s) failed, %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bridge_attach_protocol",
            "prototype": "",
            "backtrace": [
                "bridge_ioctl_add"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "bridge_proto_input",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s unexpected packet",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bridge_proto_input",
            "prototype": "",
            "backtrace": [
                "bridge_attach_protocol",
                "bridge_ioctl_add"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "bridge_link_event",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bridge_link_event",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "bridge_detach_protocol",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ifnet_detach_flowswitch_nexus",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "dlil_detach_nexus"
                },
                {
                    "string": "%s: ifnet_detach_protocol(%s) failed, %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "kern_nexus_interface_add_netagent(%s) returned %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bridge_delete_member",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "aged out",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "mac_nat_entry_print2"
                }
            ],
            "symbol": "bridge_mac_nat_age_entries_common",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "bridge_cancel_delayed_call",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s call 0x%llx flags 0x%x",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bridge_cancel_delayed_call",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s (%d): ifnet_detach(%p) failed %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "bridge_clone_destroy",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(call->bdc_flags & BDCF_OUTSTANDING) == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "(call->bdc_flags & BDCF_CANCELLING) == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s thread_call_free() failed for call %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "bridge_cleanup_delayed_call",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "bridge_cleanup_delayed_call",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "etypef == ETHER_TYPE_FLAG_ARP",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: %s from %s count %d head 0x%llx.0x%llx tail 0x%llx.0x%llx",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bridge_input_list",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "bridge_filter_checksum",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "bridge_get_ip_proto"
                }
            ],
            "symbol": "bridge_filter_checksum_list",
            "prototype": "",
            "backtrace": [
                "bridge_input_list"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "bridge_broadcast_list",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s mcast for us in_m %p",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bridge_broadcast_list",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ifmultiaddr",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_ext"
                },
                {
                    "string": "net_affinity",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "net_rxpoll",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "net_rtref",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "net_async",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "ifnet_debug",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "dlil_pending_thread_cnt == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "kern.skywalk_netagent_enable",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_get_default"
                },
                {
                    "string": "kern.skywalk_netagent_disable",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_get_default"
                },
                {
                    "string": "(!pe_enable_fsw_transport_netagent && !pe_disable_fsw_transport_netagent) || (pe_enable_fsw_transport_netagent ^ pe_disable_fsw_transport_netagent)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "SK: netagent is enabled via an override for this platform\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "SK: netagent is disabled via an override for this platform\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "SK: netagent is %s by default for this platform\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "disabled",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "if_attach_nx",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "SK: netagent is force-enabled\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "SK: netagent is force-disabled\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "ifnet",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_ext"
                },
                {
                    "string": "ifnet_tcpstat",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_ext"
                },
                {
                    "string": "ifnet_udpstat",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_ext"
                },
                {
                    "string": "%s: Waiting for all the create dlil kernel threads to get scheduled at least once.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: All the created dlil kernel threads have been scheduled at least once. Proceeding.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "if_low_power_event",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "eventhandler_register"
                },
                {
                    "string": "%s: no CPU clock available! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "pktsched_init",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "pktsched.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "dlil_init",
            "prototype": "",
            "backtrace": [
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "sc == MBUF_SC_UNSPEC || MBUF_VALID_SC(sc)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "flow != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "if_qflush_sc",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "%s[%s,%d]: ifp %s cmd 0x%08lx (%c%c [%lu] %c %lu) error %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s[%s,%d]: ifp %s cmd 0x%08lx (%c%c [%lu] %c %lu) OK\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "ifioctl",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: promiscuous mode %s %s (%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "ifnet_set_promiscuous",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: %s allmulti %s (%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "if_allmulti",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: ifma=%p negative refcnt @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ifma_remref",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ifma_remref",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ifa %p attached to ifp is being freed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ifa_deallocated",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "intf_event_enqueue_nwk_wq_entry",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: eventhandler enqueuing event of type=intf_event event_code=%s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "intf_event_enqueue_nwk_wq_entry",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: Mismatch ifa_ifp=%p != ifp=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: Attempt to attach an already attached ifa=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "if_attach_ifa_common",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: Link address ifa=%p not first @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: Attempt to detach an unattached address ifa=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: Mismatch ifa_ifp=%p, ifp=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: Attempt to detach a stray address ifa=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "if_detach_ifa_common",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "sa->sa_family == AF_LINK",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "ifconf",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ifnet_reset_order",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "if_ordered_count == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: count %u",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ifnet_reset_order",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "ifioctl_get_media",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: first ifnet_ioctl(%s, %08lx) error %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s kalloc_data() failed",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s copyin() error %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s converted extended media %08x to compat media %08x",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "copyout"
                },
                {
                    "string": "%s: %s copyout() error %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ifioctl_get_media",
            "prototype": "",
            "backtrace": [
                "ifioctl"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "if_output_netem_%s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tsnprintf"
                }
            ],
            "symbol": "ifioctl_linkparams",
            "prototype": "",
            "backtrace": [
                "ifioctl"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "ifioctl_ifreq",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "so->so_proto != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: interface name too long @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "if_clone_create",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: %s SIOCSIFMEDIA ignore IFM_OTHER",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "SIOCSIFRADIODETAILS %s%s technology: %u, channel: %u",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ifioctl_req: cmd SIOCSIFMANAGEMENT on %s not allowed for %s:%u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ifioctl_req: cmd SIOCSIFMANAGEMENT 0 not allowed on %s with subfamily management",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ifioctl_req: SIOCSATTACHPROTONULL ifnet_attach_protocol(%s) failed, %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ifioctl_req: SIOCSATTACHPROTONULL ifnet_detach_protocol(%s) failed, %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "SIOCSIFNOTRAFFICSHAPING %s %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ifioctl_ifreq",
            "prototype": "",
            "backtrace": [
                "ifioctl"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: Freeing ifma=%p with outstanding anon req @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: ifma=%p attached to ifma_ifp=%p is being freed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: ifma %p cannot be freed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: non-zero refcount ifma=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: non-zero reqcnt ifma=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: non-NULL ifma_ifp=%p for ifma=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: non-NULL ifma_ll=%p for ifma=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ifma_free",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "!anon || sa->sa_family == AF_UNSPEC || sa->sa_family == AF_LINK",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "!anon",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "ifma->ifma_ll->ifma_ifp == ifp",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "if_addmulti_common",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "(ifma->ifma_flags & IFMAF_ANONYMOUS) || ifma->ifma_anoncnt == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "ifma->ifma_reqcnt > 1",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "if_addmulti_doesexist",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ifma->ifma_anoncnt == 1",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: Mismatch ifma_ifp=%p != ifp=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: Attempt to attach an already attached ifma=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: ifma=%p unexpected IFMAF_ANONYMOUS @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: Attempt to reattach a detached ifma=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ifma->ifma_reqcnt == 1",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "if_attach_ifma",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: ifma %p has no debug structure @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ifma_trace",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ifma_trace",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ifma != NULL || (ifp != NULL && sa != NULL)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "!lastref || (!(ifma->ifma_debug & IFD_ATTACHED) && ifma->ifma_reqcnt == 0)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "if_delmulti_common",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: ifma=%p negative reqcnt @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: ifma=%p missing IFMAF_ANONYMOUS @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: ifma=%p negative anonreqcnt @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: Mismatch ifma_ifp=%p, ifp=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: Detaching ifma=%p with outstanding anon req @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: Attempt to detach an unattached address ifma=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: ifma %p is already in trash list @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "if_detach_ifma",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "if_rtdel: error %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "if_rtdel",
            "prototype": "",
            "backtrace": [
                "if_rtproto_del",
                "if_proto_free"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ifnet_set_flowswitch_rx_callback",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                }
            ],
            "symbol": "ifnet_set_flowswitch_rx_callback",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ifnet_set_delegate_parent",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                }
            ],
            "symbol": "ifnet_set_delegate_parent",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "((intptr_t)base + dlif_tcpstat_size) <= ((intptr_t)buf + dlif_tcpstat_bufsize)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "((intptr_t)base + dlif_udpstat_size) <= ((intptr_t)buf + dlif_udpstat_bufsize)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "IS_P2ALIGNED(ifp->if_tcp_stat, sizeof(u_int64_t)) && IS_P2ALIGNED(ifp->if_udp_stat, sizeof(u_int64_t))",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "dlil_alloc_local_stats",
            "prototype": "",
            "backtrace": [
                "dlil_if_acquire",
                "ifnet_allocate_extended"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "dlil_attach_filter",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s filter attached\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: failed to attach %s (err=%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "dlil_attach_filter",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "plowat != 0 && phiwat != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "blowat != 0 && bhiwat != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "ival >= IF_RXPOLL_INTERVALTIME_MIN",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: speed %llu bps, sample per %llu nsec, poll interval %llu nsec, pkts per poll %u, pkt limits [%u/%u], wreq limits [%u/%u], bytes limits [%u/%u]\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "dlil_rxpoll_update_params",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ifp != NULL && p != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "dlil_rxpoll_get_params",
            "prototype": "",
            "backtrace": [
                "ifnet_poll_params"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: restart interval set to %lu nsec\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: TBR disabled\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: TBR %s (rate %llu bps depth %u)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "reconfigured",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "idepth > 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: TBR calculated tokens %lld filluptime %llu ns\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: TBR calculated tokens %lld infinite filluptime\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: TBR suspended (link is down)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "ifclassq_tbr_set",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "tail->m_flags & M_PKTHDR",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "ifnet_enqueue",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "ifp->if_output_dlil != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "ifp->if_eflags & IFEF_ENQUEUE_MULTI",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "dlil_output",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(pop & ones) == pop",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "(ptrdiff_t)(uth->uu_network_marks & pop) == pop",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "net_thread_marks_pop",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(unpop & ones) == unpop",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "(ptrdiff_t)(uth->uu_network_marks & unpop) == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "net_thread_unmarks_pop",
            "prototype": "",
            "backtrace": [
                "domain_unguard_release"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IF_FULLY_ATTACHED(ifp)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "ifnet_incr_iorefcnt",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ifp->if_datamov > 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "Waking up drainers on %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "ifnet_datamov_end",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Waiting for data path(s) to quiesce on %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "ifnet_datamov_drain",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "ifp->if_drainers > 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "ifnet_datamov_drain",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: negative refcnt for ifp=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "dlil_if_free",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "dlil_if_free",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: failed to attach v1 protocol %d (err=%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: attached v1 protocol %d (count = %d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "ifnet_attach_protocol",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: failed to attach v2 protocol %d (err=%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: attached v2 protocol %d (count = %d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "ifnet_attach_protocol_v2",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: detached %s protocol %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "ifnet_detach_protocol",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: flags mismatch (embryonic not set) ifp=%p",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ifp->if_threads_pending == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: Attempt to attach interface without family module - %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "ifp->if_proto_hash == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "LIST_EMPTY(&ifp->if_multiaddrs)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "ifp->if_allhostsinm == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "ifnet_addrs[ifp->if_index - 1] == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "ifp->if_output_sched_model == IFNET_SCHED_MODEL_NORMAL || ifp->if_output_sched_model == IFNET_SCHED_MODEL_DRIVER_MANAGED || ifp->if_output_sched_model == IFNET_SCHED_MODEL_FQ_CODEL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "dl_inp->dlth_flags == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "dl_inp->dlth_wtot == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "dl_inp->dlth_ifp == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "qhead(&dl_inp->dlth_pkts) == NULL && qempty(&dl_inp->dlth_pkts)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "qlimit(&dl_inp->dlth_pkts) == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "!dl_inp->dlth_affinity",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "ifp->if_inp == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "dl_inp->dlth_thread == THREAD_NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "dl_inp->dlth_strategy == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "dl_inp->dlth_driver_thread == THREAD_NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "dl_inp->dlth_poller_thread == THREAD_NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "dl_inp->dlth_affinity_tag == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "dl_inp->dlth_pkts_cnt == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "thfunc == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: ifp=%p couldn't get an input thread; err=%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ifp->if_start_thread == THREAD_NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "ifp->if_start != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: ifp=%p couldn't get a start thread; err=%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ifp->if_input_poll != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "ifp->if_input_ctl != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: ifp=%p couldn't get a poll thread; err=%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ifp->if_desc.ifd_len == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: attached with %d suspended link-layer multicast membership(s)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "ifp->if_agentids == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "ifp->if_agentcount == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s if_set_qosmarking_mode(%s) error %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "IGMP_IFINFO(ifp) != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "IGMP_IFINFO(ifp)->igi_ifp == ifp",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "MLD_IFINFO(ifp) != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "MLD_IFINFO(ifp)->mli_ifp == ifp",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "ifp->if_data_threshold == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: Waiting for all kernel threads created for interface %s to get scheduled at least once.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: All kernel threads created for interface %s have been scheduled at least once. Proceeding.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: attached%s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": " (recycled)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: %s already has nexus attached\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s kern_nexus_ifattach %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "ll_addr == NULL || ll_addr->sdl_alen == ifp->if_addrlen",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "ifa->ifa_debug == IFD_LINK",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "ifnet_attach",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ifp->if_flowhash != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "ifp != NULL && (ifp->if_eflags & IFEF_TXSTART)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "ifnet_disable_output",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "!(ifp->if_refflags & IFRF_EMBRYONIC)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: detaching\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "ifnet_detach",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ifindex2ifnet[ifp->if_index] == ifp",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "ifnet_detaching_cnt != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s %s tcp_kao_cnt %u not zero",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ifnet_detach",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "*ifp == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "((intptr_t)base + dlif_size) <= ((intptr_t)buf + dlif_bufsize)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: failed to allocate if local stats, error: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "dlil_if_acquire",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "dlifp1 == NULL || (IS_P2ALIGNED(dlifp1, sizeof(u_int64_t)) && IS_P2ALIGNED(&ifp1->if_data, sizeof(u_int64_t)))",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "dlil_if_acquire",
            "prototype": "",
            "backtrace": [
                "ifnet_allocate_extended"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "src_rt.ro_rt == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "ifnet_cached_rtlookup_inet",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "lqm >= IFNET_LQM_MIN && lqm <= IFNET_LQM_MAX",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "if_lqm_update",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: Post DL_NODE_PRESENCE failed witherror %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "dlil_node_present",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "dlil_node_present",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "sa != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "dlil_node_absent",
            "prototype": "",
            "backtrace": [
                "ifnet_notice_node_absence"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "sa != NULL && sdl != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "sa->sa_family == AF_INET6 && sdl->sdl_family == AF_LINK",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "sdl->sdl_len <= sizeof(*kev_sdl)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: Post DL_NODE_PRESENCE failed with error %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "dlil_node_present_v2",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "dlil_node_present_v2",
            "prototype": "",
            "backtrace": [
                "ifnet_notice_node_presence_v2"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "modid != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "dlil_report_issues",
            "prototype": "",
            "backtrace": [
                "ifnet_report_issues"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "cmd == SIOCSIFOPPORTUNISTIC || cmd == SIOCGIFOPPORTUNISTIC",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "ifnet_getset_opportunistic",
            "prototype": "",
            "backtrace": [
                "ifioctl_ifreq",
                "ifioctl"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: throttling level set to %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "ifnet_set_throttle",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "cmd == SIOCSIFLOG || cmd == SIOCGIFLOG",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "ifnet_getset_log",
            "prototype": "",
            "backtrace": [
                "ifioctl_ifreq",
                "ifioctl"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "level >= IFNET_LOG_MIN && level <= IFNET_LOG_MAX",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "flags & IFNET_LOGF_MASK",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: logging level set to %d flags=0x%x arg=0x%x, category=%d subcategory=%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "ifnet_set_log",
            "prototype": "",
            "backtrace": [
                "ifnet_getset_log",
                "ifioctl_ifreq",
                "ifioctl"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "NAT64 prefixes purged from Interface %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "NAT64 prefixlen is incorrect %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "NAT64 prefix has interface/link local scope.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "NAT64 prefix set to %s with prefixlen: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "ifnet_set_nat64prefix",
            "prototype": "",
            "backtrace": [
                "ifioctl_nat64prefix",
                "ifioctl"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "skip attaching fsw to %s using legacy TX model\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: can't find netif for %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s kern_nexus_ifattach device failed %d %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: not attaching flowswitch to %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "dlil_attach_flowswitch_nexus",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "%s: SIOCGIFDEVMTU failed for %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: %s %d %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: can't determine MAX MTU for %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: can't get pbufpool info for %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: interface %s packet pool (rx %d * %d, tx %d * %d) can't support max mtu(%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "_dlil_get_flowswitch_buffer_size",
            "prototype": "",
            "backtrace": [
                "dlil_attach_flowswitch_nexus"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s can't get %s provider, error %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s register %s provider failed, error %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s alloc_provider_instance %s failed, %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "dlil_create_provider_and_instance",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "dlil_detach_flowswitch_nexus",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "dlil_detach_flowswitch_nexus",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "%s deregister_provider %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s kern_nexus_ifdetach device failed %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s free_provider_instance failed %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "dlil_detach_nexus",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "dlil_filter_event",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: eventhandler saw event type=net_filter_event_state event_code=0x%d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "dlil_filter_event",
            "prototype": "",
            "backtrace": [
                "dlil_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "main_input",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcat"
                },
                {
                    "string": "%s_input_poll",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "%s_input",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "inp->dlth_thread == THREAD_NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: couldn't create main input thread",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: couldn't create %s input thread",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "dlil_create_input_thread",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "m_head != NULL || (m_tail == NULL && m_cnt == 0)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "dlil_input_async",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s %s burst limit %u (sysctl: %u) exceeded. %u packets dropped [%u total in %u events]. new qlen %u ",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "dlil_input_async",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "overcommitted_qlen == target_qlen + dropped_pkts",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: qlen: %u -> %u, qsize: %llu -> %llu qlimit: %u (sysctl: %u) target_qlen: %u (if_rcvq_trim_pct: %u) pkts_to_drop: %u dropped_pkts: %u dropped_bytes %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "dlil_trim_overcomitted_queue_locked",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "dlil_trim_overcomitted_queue_locked",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "inp->dlth_ifp == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "dlil_main_input_thread_func",
            "prototype": "",
            "backtrace": [
                "dlil_create_input_thread"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "wres != THREAD_INTERRUPTED",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "!(inp->dlth_flags & (DLIL_INPUT_TERMINATE | DLIL_INPUT_RUNNING))",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "!(inp->dlth_flags & DLIL_INPUT_TERMINATE)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "dlil_main_input_thread_cont",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "!(ifp->if_eflags & IFEF_RXPOLL) || !net_rxpoll || !(ifp->if_xflags & IFXF_LEGACY)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "ifp->if_poll_mode == IFNET_MODEL_INPUT_POLL_OFF || !(ifp->if_xflags & IFXF_LEGACY)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "dlil_input_%s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "dlil_input_thread_func",
            "prototype": "",
            "backtrace": [
                "dlil_create_input_thread"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "(inp->dlth_flags & DLIL_INPUT_TERMINATE) != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: input thread terminated\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "dlil_terminate_input_thread",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "dlil_input_sync",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s %s burst limit %u (sysctl: %u) exceeded. %u packets dropped [%u total in %u events]. new qlen %u \n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "dlil_input_sync",
            "prototype": "",
            "backtrace": [
                "dlil_create_input_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: %s filter detached\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s filter detached\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "OSDecrementAtomic64(&net_api_stats.nas_iflt_attach_count) > 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "OSDecrementAtomic64(&net_api_stats.nas_iflt_attach_os_count) > 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "failed to detach %s filter (err=%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "dlil_detach_filter_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "m_head != NULL || (s == NULL && m_tail == NULL && !ext && poll)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "m_tail == NULL || ext",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "input_func != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: invalid mbuf %p\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: invalid input packet chain for %s, tail mbuf %p instead of %p\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: input packet count mismatch for %s, %d instead of %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ifnet_input_common",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IS_INTF_CLAT46(ifp)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "*proto_family == PF_INET",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "dlil_clat46",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "%s: frame header pointer 0x%llx out of range [0x%llx,0x%llx] for mbuf 0x%llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: partial cksum start offset %d is less than frame header length %d for mbuf 0x%llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: bad partial cksum value 0x%x (expected 0x%x) for mbuf 0x%llx [rx_start %d]\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "failed to restore",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "wake packet from %s len %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "dlil_input_packet_list_common",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "if_proto_count == tmp_ifproto_arr_idx",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "proto != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "dlil_event_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "proto->detached",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "if_proto_free",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "dlil_attach_protocol",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "dlil_attach_protocol",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ifnet_start_%s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "skywalk_doorbell_%s_tx",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "!ifp->if_start_embryonic && !ifp->if_start_active",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "ifnet_start_thread_func",
            "prototype": "",
            "backtrace": [
                "ifnet_attach"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: starter thread terminated\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "ifnet_start_thread_cont",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ifp != NULL && (ifp->if_eflags & IFEF_RXPOLL) && (ifp->if_xflags & IFXF_LEGACY)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "dlil_input_poll_%s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "dlil_rxpoll_input_thread_func",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "m != NULL || m_cnt == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: [%s] pkts avg %d max %d limits [%d/%d], wreq avg %d limits [%d/%d], bytes avg %d limits [%d/%d]\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: polling is now %s, pkts avg %d max %d limits [%d/%d], wreq avg %d limits [%d/%d], bytes avg %d limits [%d/%d]\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: error setting polling mode to %s (%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "dlil_rxpoll_input_thread_cont",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ifnet_poller_%s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "!(ifp->if_poll_flags & (IF_POLLF_EMBRYONIC | IF_POLLF_RUNNING))",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "ifnet_poll_thread_func",
            "prototype": "",
            "backtrace": [
                "ifnet_attach"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: polling up to %d pkts, pkts avg %d max %d, wreq avg %d, bytes avg %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "m_tail != NULL && m_cnt > 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: polled %d pkts, pkts avg %d max %d, wreq avg %d, bytes avg %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: no packets, pkts avg %d max %d, wreq avg %d, bytes avg %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: poller thread terminated\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "ifnet_poll_thread_cont",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "TAILQ_FIRST(&ifnet_detaching_head) != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "ifnet_detaching_cnt != 0 || ifp == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: flags mismatch (detaching not set) ifp=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ifp->if_datamov == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "ifp->if_drainers == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "ifp->if_suspend == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "LIST_EMPTY(&ifp->if_netns_tokens)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "ifnet_addrs[ifp->if_index - 1] == ifa",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "ifp->if_link.tqe_next == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "ifp->if_link.tqe_prev == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "ifp->if_ordered_link.tqe_next == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "ifp->if_ordered_link.tqe_prev == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: waiting for %s starter thread to terminate\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "ifnet_start_thread_exit",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                },
                {
                    "string": "%s: %s starter thread termination complete",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: waiting for %s poller thread to terminate\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: %s poller thread termination complete\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "ifp->if_xflags & IFXF_LEGACY",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "ifp->if_na_ops == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "ifp->if_na == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "!ifp->if_fwd_cacheok",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "!thread_call_isactive(ifp->if_dt_tcall)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: detached\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "qhead(&inp->dlth_pkts) == NULL && qempty(&inp->dlth_pkts)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "!inp->dlth_affinity",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "inp->dlth_affinity_tag == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "ifnet_detacher_thread_cont",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "dlil_detach_netif_nexus",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "dlil_detach_netif_nexus",
            "prototype": "",
            "backtrace": [
                "dlil_quiesce_and_detach_nexuses",
                "ifnet_detacher_thread_cont"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: dl_if %p has no debug structure @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "dlil_if_trace",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "dlil_if_trace",
            "prototype": "",
            "backtrace": [
                "dlil_if_acquire",
                "ifnet_allocate_extended"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "OSDecrementAtomic64(&net_api_stats.nas_ifnet_alloc_count) > 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "OSDecrementAtomic64(&net_api_stats.nas_ifnet_alloc_os_count) > 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "_dlil_if_release",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "WARNING: %s can't attach ip to %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "ether_attach_inet",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "ether_attach_inet",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: can't handle af%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "ether_inet_pre_output",
            "prototype": "",
            "backtrace": [
                "ether_attach_inet"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "WARNING: %s can't attach ipv6 to %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "ether_attach_inet6",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "ether_attach_inet6",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "lo_txstart",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "%s: couldn't allocate loopback ifnet (%d) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: couldn't attach loopback ifnet (%d) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "loopattach",
            "prototype": "",
            "backtrace": [
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "lo_attach_proto: ifnet_attach_protocol for %u returned=%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "lo_attach_proto",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "lo_input",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "lo_input",
            "prototype": "",
            "backtrace": [
                "lo_attach_proto"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(*m)->m_flags & M_PKTHDR",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "lo_pre_output",
            "prototype": "",
            "backtrace": [
                "lo_attach_proto"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: mbuf_set_status() failed %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "lo_tx_compl",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ifp == lo_ifp",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "lo_set_bpf_tap",
            "prototype": "",
            "backtrace": [
                "loopattach",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ifvlan_release: bad signature @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ifvlan_release: retain count is 0 @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ifvlan_release",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ifvlan_release",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vlan_parent_release: signature is bad @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vlan_parent_release: retain count is 0 @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vlan_parent_release",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "vlan_parent_release",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vlan_parent_wait",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                }
            ],
            "symbol": "vlan_parent_wait",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vlan_parent_create",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: siocgifdevmtu failed, %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "vlan_config",
            "prototype": "",
            "backtrace": [
                "vlan_ioctl",
                "vlan_clone_create"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vlan_attach_protocol",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "vlan_attach_protocol",
            "prototype": "",
            "backtrace": [
                "vlan_config",
                "vlan_ioctl",
                "vlan_clone_create"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "(scan->m_pkthdr.csum_flags & CSUM_VLAN_TAG_VALID) != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "tag != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "vlan_input",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s tag %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "vlan_input",
            "prototype": "",
            "backtrace": [
                "vlan_attach_protocol",
                "vlan_config",
                "vlan_ioctl",
                "vlan_clone_create"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "vlan_input_tag",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "vlan_input_packet_list",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s VLAN tag %d (dropped)",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: packets %d bytes %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "vlan_input_tag",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vlan_parent_link_event",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "vlan_parent_wait"
                }
            ],
            "symbol": "vlan_event",
            "prototype": "",
            "backtrace": [
                "vlan_attach_protocol",
                "vlan_config",
                "vlan_ioctl",
                "vlan_clone_create"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "feth_fake_tx_exp_policy_sysctl",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: if_fake_tx_exp_policy: %u -> %u (%d)",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "feth_fake_tx_exp_policy_sysctl",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.feth",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_nexus_register_domain_provider"
                },
                {
                    "string": "feth_register_nexus_domain_provider",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: failed to register domain provider",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "if_fake_init",
            "prototype": "",
            "backtrace": [
                "ether_family_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "fakeif->iff_retain_count == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "fakeif->iff_rx_pp == S_pp",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "fakeif->iff_tx_pp == S_pp",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "feth_free",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "feth_release",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "fakeif->iff_doorbell_tcall == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "feth_if_free",
            "prototype": "",
            "backtrace": [
                "feth_clone_create"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "feth shared pp",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "%s rx pp",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "%s tx pp",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "%s: feth used as ifname prefix but logical link support in feth is disabled.",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: TSO mode requires global packet pool mode",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: multi-buflet not supported for split rx & tx pool",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: rx pp create failed %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: tx pp create failed %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: create_non_default_llinks failed, %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: llink add failed, error %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "feth_clone_create",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "feth_nx_connected",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: connected channel %p",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "feth_nx_connected",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "feth_nx_pre_disconnect",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: pre-disconnect channel %p",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "feth_nx_pre_disconnect",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "feth_nx_disconnected",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: disconnected channel %p",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "feth_nx_disconnected",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "fakeif->iff_tx_ring[ring_idx] == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "fakeif->iff_tx_ring[0] == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "fakeif->iff_rx_ring[0] == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "feth_nx_ring_init",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: %s ring init",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "feth_nx_ring_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "feth threadcall",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                },
                {
                    "string": "%s: %s: RX ring fini",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: TX ring fini",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: thread_call_cancel %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: *waiting for threadcall",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: ^threadcall done",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: thread_call_free %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "feth_nx_ring_fini",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "clock_timebase.denom != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "feth_packet_has_expired",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "feth_get_effective_expn_action",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s sent expiry notification on nexus port %u notif code %u",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Packet has %llu usec until expiration",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Unrecognized value %d for \"net.link.fake.tx_exp_policy\"",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "feth_tx_expired_error",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "feth_tx_complete_error",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "feth_tx_complete_error",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "baddr != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "bufcnt == kern_packet_get_buflet_count(dph)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "feth_copy_packet",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "feth_clone_packet",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: packet clone err %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "feth_clone_packet",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "feth_nx_sync_rx",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "feth_nx_sync_rx",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "feth_nx_tx_doorbell",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: TX refill (sync) %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: TX refilled (sync)",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: schedule async refill",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "feth_nx_tx_doorbell",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "feth_nx_tx_dequeue_driver_managed",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_channel_tx_refill_common"
                },
                {
                    "string": "%s: %s: TX refill ring %d (%s) %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: TX refilled ring %d (%s)",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "feth_nx_tx_dequeue_driver_managed",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "feth_nx_capab_config",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "feth_nx_capab_config",
            "prototype": "",
            "backtrace": [
                "feth_clone_create"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "feth_nx_intf_adv_config",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s enable %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "feth_nx_intf_adv_config",
            "prototype": "",
            "backtrace": [
                "feth_nx_capab_config",
                "feth_clone_create"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "feth_notify_steering_info",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: notify_steering_info: qset_id 0x%llx, %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "feth_notify_steering_info",
            "prototype": "",
            "backtrace": [
                "feth_nx_capab_config",
                "feth_clone_create"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "feth_nx_tx_qset_notify",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s qset %p, idx %d, flags 0x%x",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s queue %p dequeue failed: err %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "feth_nx_tx_qset_notify",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "feth_nx_tx_queue_deliver_pkt_chain",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s -> %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "feth_nx_tx_queue_deliver_pkt_chain",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "feth_nx_queue_tx_push",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s queue %p",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "feth_nx_queue_tx_push",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.xnu.net.redirect",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "os_log_create"
                },
                {
                    "string": "redirect_register_nexus_domain_provider",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "if_redirect_init",
            "prototype": "",
            "backtrace": [
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "rd->rd_retain_count == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "redirect_free",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "redirect_release",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "redirect_max_mtu",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "redirect_max_mtu",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "redirect_clear_delegate_locked",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "redirect_clear_delegate_locked",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "rd->rd_doorbell_tcall == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: ifp is NULL\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "redirect_if_free",
            "prototype": "",
            "backtrace": [
                "redirect_clone_create"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "redirect_demux",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: data is NULL\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "redirect_demux",
            "prototype": "",
            "backtrace": [
                "redirect_clone_create"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "redirect_attach_netif_nexus",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: create params not specified\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: copyin failed: error %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: invalid type(0x%x) or len(0x%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: functional type(0x%x) not supported\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: invalid ifc_name(%s) or unit(%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: attach netif nexus failed: error %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s packet pool make failed: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s register provider failed, error %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s alloc net provider instance failed %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "redirect_clone_create",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "redirect_nx_connected",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: connected channel %p\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "redirect_nx_connected",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "redirect_nx_pre_disconnect",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: pre-disconnect channel %p\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "redirect_nx_pre_disconnect",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "redirect_nx_disconnected",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: disconnected channel %p\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "redirect_nx_disconnected",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "rd->rd_tx_ring[0] == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "rd->rd_rx_ring[0] == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "redirect_nx_ring_init",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: %s ring init\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "redirect_nx_ring_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "redirect threadcall",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                },
                {
                    "string": "%s: %s: RX ring fini\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: TX ring fini\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: thread_call_cancel %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: *waiting for threadcall\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: threadcall done\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: thread_call_free %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "redirect_nx_ring_fini",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "multicast_list_program: ifnet_get_multicast_list(%s%d) failed, %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "multicast_list_program",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "bond_clone_create",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: failed to add slow_proto multicast, %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bond_clone_create",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ifbond_release",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: removing multicast",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ifbond_release",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "bond_output",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: %s bytes %d, error=%d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bond_output",
            "prototype": "",
            "backtrace": [
                "bond_clone_create"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "bond_set_mtu",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ifbond_wait"
                }
            ],
            "symbol": "bond_set_mtu",
            "prototype": "",
            "backtrace": [
                "bond_ioctl",
                "bond_clone_create"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ifbond_wait",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                }
            ],
            "symbol": "ifbond_wait",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "bond_set_mtu_on_ports",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: SIOCSIFMTU %s failed, %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bond_set_mtu_on_ports",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "bondport_timer_process_func",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: (timer) generating LINK event",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bondport_timer_process_func",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "bond_attach_protocol",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bond_attach_protocol",
            "prototype": "",
            "backtrace": [
                "bond_add_interface",
                "bond_ioctl",
                "bond_clone_create"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "bond_input_packet_list",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: %s packets %d bytes %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bond_input_packet_list",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ifbond_list_find_moved_port",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "bond_receive_la_marker_pdu",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: dropping short LACP frame %d < %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: m_pullup LACPDU failed",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: m_pullup LA_MARKER failed",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: (receive) generating LINK event",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: simulating link status changed event",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: System %x:%x:%x:%x:%x:%x Port 0x%x moved from %s to %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bond_input",
            "prototype": "",
            "backtrace": [
                "bond_attach_protocol",
                "bond_add_interface",
                "bond_ioctl",
                "bond_clone_create"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "bondport_receive_machine_current",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "bondport_UpdateSelected",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "bondport_UpdateNTT",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: [%s] Receive CURRENT",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: [%s] updateSelected UNSELECTED",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: [%s] updateNTT: Need To Transmit",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: [%s] recordPDU: LACP will maintain",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: [%s] recordPDU: LACP partner in sync",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: [%s] recordPDU: LACP partner in sync (ind)",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bondport_receive_machine_current",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "bondport_set_selected",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: [%s] SetSelected: %s (was %s)",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bondport_set_selected",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "bondport_assign_to_LAG",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Key 0x%04x: LAG Created (0x%04x,%x:%x:%x:%x:%x:%x,0x%04x)",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bondport_assign_to_LAG",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "bondport_remove_from_LAG",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: [%s] Removed from LAG (0x%04x,%x:%x:%x:%x:%x:%x,0x%04x)",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Key 0x%04x: LAG Released (%04x,%x:%x:%x:%x:%x:%x,0x%04x)",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bondport_remove_from_LAG",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "bondport_receive_machine_expired",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: [%s] Receive EXPIRED",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bondport_receive_machine_expired",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "bondport_receive_machine_defaulted",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: [%s] Receive DEFAULTED",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bondport_receive_machine_defaulted",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "bondport_receive_machine_lacp_disabled",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: [%s] Receive LACP_DISABLED",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bondport_receive_machine_lacp_disabled",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "bondport_receive_machine_initialize",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: [%s] Receive INITIALIZE",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bondport_receive_machine_initialize",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "bondport_mux_machine_detached",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "bondport_DetachMuxFromAggregator",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: [%s] Mux DETACHED",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: [%s] Detached Mux From Aggregator",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bondport_mux_machine_detached",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "bondport_mux_machine_attached",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "bondport_AttachMuxToAggregator",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: [%s] Mux ATTACHED",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: [%s] Attached Mux To Aggregator",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bondport_mux_machine_attached",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "bondport_mux_machine_collecting_distributing",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: [%s] Mux COLLECTING_DISTRIBUTING",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bondport_mux_machine_collecting_distributing",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "bond_handle_event",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: (event) generating LINK event",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: [%s] Link UP %d Mbit/s %s duplex",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: [%s] Link DOWN",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: [%s] Port speed %d differs from LAG %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bond_handle_event",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "bondport_slow_proto_transmit",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: (%s) failed %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bondport_slow_proto_transmit",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "[%s] Transmit: failed to allocate packet buffer\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: [%s] Transmit Timer Already Set",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: [%s] Transmit Timer Deadline %d secs",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: [%s] Transmit Timer Complete",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: [%s] Transmit Packet %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bondport_transmit_machine",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ifbond_selection",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: LAG PORT SPEED CHANGED from %d to %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ifbond_selection",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "bondport_disable_distributing",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: [%s] Distribution Disabled",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bondport_disable_distributing",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "bond_set_mode",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ifbond_wait"
                }
            ],
            "symbol": "bond_set_mode",
            "prototype": "",
            "backtrace": [
                "bond_ioctl",
                "bond_clone_create"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "bond_set_promisc",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ifbond_wait"
                },
                {
                    "string": "%s: %s: ifnet_set_promiscuous(%s, %d): failed %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: ifnet_set_promiscuous(%s, %d): succeeded",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: multicast_list_program(%s) failed, %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "multicast_list_program"
                }
            ],
            "symbol": "bond_ioctl",
            "prototype": "",
            "backtrace": [
                "bond_clone_create"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "bond_if_detach",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: ifnet_detach failed, %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bond_clone_destroy",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "devtimer_set_absolute: uninitialized/freed timer\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "os_ref_panic_retain"
                }
            ],
            "symbol": "devtimer_set_absolute",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ndrvdomain == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "ndrv_dominit",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "rn_addmask: mask impossibly already in tree",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "rn_addmask",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "Non-unique normal route, mask not entered",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "rn_addroute",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "rn_delete: couldn't find our annotation\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "rn_delete: couldn't find us\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "rn_delete: Orphaned Mask 0x%llx at 0x%llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "rn_delete",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "rn_init: radix functions require max_keylen be set\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kmem_alloc_guard_internal"
                },
                {
                    "string": "radix_node",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_ext"
                }
            ],
            "symbol": "rn_init",
            "prototype": "",
            "backtrace": [
                "route_init",
                "route_dinit"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "rte_debug",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "rtentry",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_ext"
                }
            ],
            "symbol": "route_init",
            "prototype": "",
            "backtrace": [
                "route_dinit"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "buf != NULL && buflen >= sizeof(*ss)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "buflen >= sa->sa_len",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "sdl->sdl_alen == size",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: broken logic (sa_len %d < skip %d ) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "sa_trim",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "rtm_scrub",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "rtunref",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "rtunref: on freed rte=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "rtunref",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(p->rt_flags & RTF_DEAD) == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "rtref",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "rtref_audit: on freed rte=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "rtref",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "rt != ogwrt",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "rt->rt_gwroute == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "rt_set_gwroute",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "gwrt != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "rt->rt_flags & (RTF_CLONING | RTF_PRCLONING)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "rt_revalidate_gwroute",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "rt == gwrt && rt != hint",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "route_to_gwroute",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "p_gw_saddr->sa_len <= sizeof(p_rt_ev->rt_ev_arg.rt_addr)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "route_event_enqueue_nwk_wq_entry",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: eventhandler enqueuing event of type=route_event event_code=%s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "route_event_enqueue_nwk_wq_entry",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "sin6_get_embedded_ifscope",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "IN6_IS_SCOPE_EMBED(&(SIN6(sa)->sin6_addr))",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "sa_copy",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "rt %p invalid refcnt %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "!(rt->rt_flags & RTF_IFREF)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "rt %p freed while in radix tree @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "rt->rt_llinfo_free != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "rtfree_common",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "rte_free: rte=%p refcnt=%d non-zero @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "rte_free: rte=%p refcnt=%d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "rte_free: double free rte=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "rte_free: corrupted rte=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "rte_free",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "SIN6(dst)->sin6_scope_id != IFSCOPE_NONE",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "rtrequest delete @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "rt->rt_flags & RTF_HOST",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "rtrequest: RTF_GATEWAY but no gateway @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "rtrequest_common_locked",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(*ret_nrt)->rt_expire == 0 || (*ret_nrt)->rt_rmx.rmx_expire != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "(*ret_nrt)->rt_expire != 0 || (*ret_nrt)->rt_rmx.rmx_expire == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: route already exists: %s->%s->%s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "rtrequest_common_locked",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "!coarse || ifscope == IFSCOPE_NONE",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s unscoped search %p to %s->%s->%s ifa_ifp %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d (%s, %s, %u) return NULL\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d %u return NULL\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s %u return %p to %s->%s->%s ifa_ifp %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "rt_lookup_common",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: invalid count argument (%d) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: ifp=%p negative route refcnt! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "rte_if_ref",
            "prototype": "",
            "backtrace": [
                "rtref"
            ]
        },
        {
            "args": 4,
            "anchors": [
                {
                    "string": "link#%u",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "rt_str",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "evtag != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "eventhandler_deregister event_type=route_event",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "eventhandler_invoke(\"route_event\")",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "route_event_callback",
            "prototype": "",
            "backtrace": [
                "route_event_enqueue_nwk_wq_entry"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "in->rt_expire == 0 || in->rt_rmx.rmx_expire != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "in->rt_expire != 0 || in->rt_rmx.rmx_expire == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "rt_getmetrics",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "routedomain == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "route_dinit",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "out->rt_expire == 0 || out->rt_rmx.rmx_expire != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "out->rt_expire != 0 || out->rt_rmx.rmx_expire == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "rt_setmetrics",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "so->so_pcb == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "rts_attach",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "rp != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "rts_detach",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.netsrc",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcpy"
                },
                {
                    "string": "%s: ctl_register failed %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "netsrc_init",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "netsrc_init",
            "prototype": "",
            "backtrace": [
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: invalid family\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "netsrc_ctlsend",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "netsrc_ctlsend",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.xnu.net",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "os_log_create"
                },
                {
                    "string": "ntstat",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "os_log_create"
                },
                {
                    "string": "com.apple.network.statistics",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcpy"
                }
            ],
            "symbol": "nstat_init",
            "prototype": "",
            "backtrace": [
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ntstat_userland_stats_open",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - incorrect provider is supplied, %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ntstat_userland_stats_open",
            "prototype": "",
            "backtrace": [
                "necp_stats_initialize"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nstat_tcp_copy_descriptor",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - NSTAT_DEBUG_SOCKET <pid %d>: NSTAT: TCP - pid %d uid %d euuid %s persona id %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "nstat_tcp_copy_descriptor",
            "prototype": "",
            "backtrace": [
                "nstat_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nstat_udp_copy_descriptor",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - NSTAT_DEBUG_SOCKET <pid %d>: NSTAT: UDP - pid %d uid %d euuid %s persona id %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "nstat_udp_copy_descriptor",
            "prototype": "",
            "backtrace": [
                "nstat_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nstat_userland_protocol_add_watcher",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "nstat_userland_protocol_add_watcher",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nstat_generic_provider_add_watcher",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "nstat_generic_provider_add_watcher",
            "prototype": "",
            "backtrace": [
                "nstat_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nstat_generic_provider_reporting_allowed",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - attempt to filter conn provider by effective pid/uuid, not supported",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "nstat_generic_provider_reporting_allowed",
            "prototype": "",
            "backtrace": [
                "nstat_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "i == nkeyvals",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "i > 0 && i <= nkeyvals",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "nstat_sysinfo_send_data",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "nstat_client_handle_query_request",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "nstat_client_send",
            "prototype": "",
            "backtrace": [
                "nstat_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nstat_flush_accumulated_msgs",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - ctl_enqueuembuf failed: %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "nstat_flush_accumulated_msgs",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nstat_client_cleanup_source",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "nstat_client_cleanup_source",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "tcp_progress_probe_enable_for_interface",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - for interface index %u with flags %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - *matched* interface index %d, enable: %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - (%d) - nstat set tcp probe %d for interface index %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ntstat_tcp_progress_enable",
            "prototype": "",
            "backtrace": [
                "tcp_progress_probe_enable"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "gif_init",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "gif_init",
            "prototype": "",
            "backtrace": [
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "gif_attach_proto_family can't attach interface\t\t\t    fam=%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "gif_attach_proto_family",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "gif_clone_destroy: gif remove failed %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "gif_clone_destroy: ifnet_set_flags failed %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "gif_clone_destroy: ifnet_detach(%p) failed %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "gif_clone_destroy",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "gif_clone_create, ifnet_allocate failed - %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: unable to attach encap4\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: unable to attach encap6\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "gif_clone_create - ifnet_attach failed - %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "gif_clone_create",
            "prototype": "",
            "backtrace": [
                "gif_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "gif_add_proto: request add_proto for gif%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "gif_add_proto",
            "prototype": "",
            "backtrace": [
                "gif_clone_create",
                "gif_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "sftattach encap_attach_func failed\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "stfattach, ifnet_allocate failed - %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "stfattach: ifnet_attach returned error=%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "stfattach",
            "prototype": "",
            "backtrace": [
                "ip6_init_delayed",
                "ip6_init",
                "in6_dinit"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "stf: IFF_DOWN\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "stf_pre_output",
            "prototype": "",
            "backtrace": [
                "stf_attach_inet6",
                "stfattach",
                "ip6_init_delayed",
                "ip6_init",
                "in6_dinit"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "stf_attach_proto_family can't attach interface fam=%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "stf_attach_inet6",
            "prototype": "",
            "backtrace": [
                "stfattach",
                "ip6_init_delayed",
                "ip6_init",
                "in6_dinit"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "stf_add_proto: stf already has a proto\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "stf_add_proto",
            "prototype": "",
            "backtrace": [
                "stfattach",
                "ip6_init_delayed",
                "ip6_init",
                "in6_dinit"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "defer encapsulated ESP matching",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "net_port_info_log_npi"
                },
                {
                    "string": "%s: called PKTF_WAKE_PKT not set from %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: mbuf_copydata(ip) error %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: unexpected IPv4 protocol %u from %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: mbuf_copydata(ip6_hdr) error %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: mbuf_copydata(ip6_frag) error %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: unexpected IPv6 protocol %u from %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: unexpected protocol family %d from %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "if_ports_used_match_mbuf",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "TAILQ_EMPTY(&net_port_entry_hash_table[i])",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: IOPMCopySleepWakeUUIDKey got bad value %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: SleepWakeUUID not set, don't update the port list for %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: current wakeuuid %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "if_ports_used_update_wakeuuid",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: SYSCTL_OUT(xnpigen) error %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: SYSCTL_OUT(npi) error %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "sysctl_net_port_info_list",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: ifnet_get_local_ports_extended() error %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "sysctl_get_ports_used",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "sysctl_get_ports_used",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "is_encapsulated_esp",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: mbuf_copydata(ESP_HDR_SIZE) error %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "is_encapsulated_esp",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "wake packet match",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "net_port_info_log_npi"
                },
                {
                    "string": "wake packet no match",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "net_port_info_log_npi"
                }
            ],
            "symbol": "net_port_info_find_match",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "already notified wake packet",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "net_port_info_log_npi"
                }
            ],
            "symbol": "if_notify_wake_packet",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "if_notify_unattributed_wake_mbuf",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: mbuf_copydata() failed with error %d for wake uuid %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "if_notify_unattributed_wake_mbuf",
            "prototype": "",
            "backtrace": [
                "if_ports_used_match_mbuf"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "if_notify_unattributed_wake_pkt",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: receive interface is NULL",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "if_notify_unattributed_wake_pkt",
            "prototype": "",
            "backtrace": [
                "if_ports_used_match_pkt",
                "fsw_receive"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "if_set_low_power",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: ifp %s low_power mode %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ifnet_set_low_power_mode",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "if_low_power_evhdlr_callback",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: ifp %s event_code %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "if_low_power_evhdlr_callback",
            "prototype": "",
            "backtrace": [
                "dlil_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "!(einit.flags & IFNET_INIT_LEGACY) || (ifp->if_pre_enqueue == NULL && ifp->if_start == NULL && ifp->if_output_ctl == NULL && ifp->if_input_poll == NULL && ifp->if_input_ctl == NULL)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "!(einit.flags & IFNET_INIT_INPUT_POLL) || (ifp->if_input_poll != NULL && ifp->if_input_ctl != NULL)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "!(einit.flags & IFNET_INIT_LEGACY)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "(ifp->if_xflags & IFXF_LEGACY) == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "ifnet_allocate_extended",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "err == 0 || *addresses == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "return_inuse_addrs == 1",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "ifnet_get_address_list_family_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: already a cloner for %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: if_clone_attach failed %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "ifnet_clone_attach",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: no cloner for %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "ifnet_clone_detach",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "ifnet_clone_detach",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: delegating to %s would cause a loop\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: is now delegating %s (type 0x%x, family %u, sub-family %u)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: is no longer delegating %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "ifnet_set_delegate",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 4,
            "anchors": [
                {
                    "string": "*used_frames_count <= frames_array_count",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "ifnet_get_keepalive_offload_frames",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: set offload flags=0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "ifnet_set_offload_common",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.net.utun_control",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcpy"
                },
                {
                    "string": "utun_register_nexus",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "utun_register_control - ctl_register failed: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "utun_register_control - proto_register_plumber(PF_INET, IFNET_FAMILY_UTUN) failed: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "utun_register_control - proto_register_plumber(PF_INET6, IFNET_FAMILY_UTUN) failed: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "utun_register_control",
            "prototype": "",
            "backtrace": [
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "utun%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "utunid%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "utun_flowswitch_attach - ifnet_detach failed: %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "utun_ctl_connect - utun_nexus_ifattach failed: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "utun_ctl_connect - utun_flowswitch_attach failed: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "utun_ctl_connect - ifnet_allocate failed: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "utun_ctl_connect - ifnet_attach failed: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "utun_flowswitch_attach - flowswitch is NULL\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "utun_flowswitch_attach - unable to find flowswitch nexus\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "utun_ctl_connect",
            "prototype": "",
            "backtrace": [
                "utun_register_control",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "utun_start",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "utun_start: ctl_getenqueuepacketcount returned error %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "lck_rw_lock_shared"
                },
                {
                    "string": "utun_start: ifnet_disable_output returned error %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "utun_start",
            "prototype": "",
            "backtrace": [
                "utun_ctl_connect",
                "utun_register_control",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "utun_data_move_drain",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                },
                {
                    "string": "pcb->utun_pcb_drainers > 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "utun_wait_data_move_drain",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pcb->utun_netif_rxring == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "pcb->utun_netif_txring == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "utun_netif_ring_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "utun_netif_sync_tx",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "tx_offset >= UTUN_HEADER_SIZE(pcb)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "utun_netif_sync_tx %s: unknown ip version %u vhl %u tx_offset %u len %u header_size %zu\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "utun_netif_sync_tx %s - mbuf_copyback(%zu) error %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "utun_netif_sync_tx %s - mbuf_gethdr error %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "utun_netif_sync_tx %s - 0 length packet\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "utun_netif_sync_tx",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "utun_netif_sync_rx",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "utun_netif_sync_rx %s: legacy packet length too short for header %zu < %zu\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "utun_netif_sync_rx %s: legacy packet length %zu > %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "utun_netif_sync_rx %s: packet length too short for header %u < %zu\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "utun_netif_sync_rx",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "utun_nexus_detach",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "utun_nexus_detach",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "utun_ctl_disconnect - ifnet_detach failed: %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "utun_ctl_disconnect - ifnet_detach failed: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "utun_ctl_disconnect",
            "prototype": "",
            "backtrace": [
                "utun_register_control",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "utun_ctl_send",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - unexpected short mbuf pkt len %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - ifnet_input failed: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "utun_ctl_send",
            "prototype": "",
            "backtrace": [
                "utun_register_control",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "utun_ncd",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "utun_enable_channel",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "uuid_is_null(pcb->utun_kpipe_uuid)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "utun_enable_channel",
            "prototype": "",
            "backtrace": [
                "utun_ctl_setopt",
                "utun_register_control",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pcb->utun_kpipe_rxring == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "pcb->utun_kpipe_txring == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "utun_kpipe_ring_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "utun_kpipe_sync_tx",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "utun_kpipe_sync_tx",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "utun_kpipe_sync_rx",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "tx_baddr != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "mb_cnt <= avail",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "mb_cnt == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "utun_kpipe_sync_rx %s: invalid length %zu header_size %zu\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "utun_kpipe_sync_rx %s: unknown ip version %u vhl %u header_size %zu\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "utun_kpipe_sync_rx: ifnet_enable_output returned error %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "utun_kpipe_sync_rx",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "uuid_is_null(pcb->utun_kpipe_uuid) == !enabled",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "utun_disable_channel",
            "prototype": "",
            "backtrace": [
                "utun_ctl_setopt",
                "utun_register_control",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.net.ipsec_control",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcpy"
                },
                {
                    "string": "ipsec_register_nexus",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec_register_control - ctl_register failed: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec_register_control - proto_register_plumber(PF_INET, IFNET_FAMILY_IPSEC) failed: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec_register_control - proto_register_plumber(PF_INET6, IFNET_FAMILY_IPSEC) failed: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ipsec_register_control",
            "prototype": "",
            "backtrace": [
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ipsec_inject_inbound_packet",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ipsec_inject_inbound_packet",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "ipsec%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "ipsecid%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "%s: %s%d use_netif %d kpipe_count %d slot_size %u ring_size %u kpipe_tx_ring_size %u kpipe_rx_ring_size %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "ipsec_ctl_connect",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "!ipsec_flag_isset(pcb, IPSEC_FLAGS_KPIPE_ALLOCATED)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "ipsec_ncd",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "ipsec_nexus_ifattach",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec_flowswitch_attach - ifnet_detach failed: %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ipsec_ctl_connect: creating interface %s (id %s)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec_ctl_connect - kpipe requires netif: failed %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s failed to enable channels\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec_ctl_connect - ipsec_nexus_ifattach failed: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec_ctl_connect - ipsec_flowswitch_attach failed: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec_ctl_connect - ifnet_allocate failed: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec_ctl_connect - ifnet_attach failed: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s failed to register kernel pipe nexus\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s pbufbool create failed, error %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s enabling wmm mode\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec_flowswitch_attach - flowswitch is NULL\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec_flowswitch_attach - unable to find flowswitch nexus\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ipsec_ctl_connect",
            "prototype": "",
            "backtrace": [
                "ipsec_register_control",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pcb->ipsec_kpipe_count != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "ipsec_nexus_pre_disconnect",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ipsec_data_move_drain",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                },
                {
                    "string": "pcb->ipsec_pcb_drainers > 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "ipsec_wait_data_move_drain",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ipsec_kpipe_ring_init",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "pcb->ipsec_kpipe_rxring[ring_idx] == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "pcb->ipsec_kpipe_txring[ring_idx] == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: %s cannot find channel %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ipsec_kpipe_ring_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ipsec_kpipe_sync_tx",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ipsec_kpipe_sync_tx",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ring_idx <= pcb->ipsec_kpipe_count",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "interface != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "dph != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: %s ring %s index %d no room in rx_ring\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s ring %s index %d bad netif_txring 1\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s ring %s index %d bad netif_txring 2\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec_kpipe_sync_rx %s: failed to allocate packet\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec_kpipe_sync_rx %s: packet length %zu",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec_kpipe_sync_rx %s: failed to encrypt packet",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec_kpipe_sync_rx: ifnet_enable_output returned error %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec encrypt kpipe pkt: source buffer shorter than ip header, %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec4 interface kpipe output error %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec6 interface kpipe output error %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "received unknown packet version: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ipsec_kpipe_sync_rx",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pcb->ipsec_netif_rxring[0] == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "pcb->ipsec_netif_txring[ring_idx] == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "ipsec_netif_ring_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "!found",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "ipsec_netif_ring_fini",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ipsec_netif_sync_tx",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ring_idx < IPSEC_IF_MAX_RING_COUNT",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "ipsec_netif_sync_tx %s - failed policy check\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec_netif_sync_tx %s - ipsec_output error %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec_netif_sync_tx %s - mbuf_copyback(%zu) error %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec_netif_sync_tx %s - mbuf_gethdr error %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec_netif_sync_tx %s - 0 length packet\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec_netif_sync_tx %s: no encrypted packet to send\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ipsec_netif_sync_tx",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ipsec_netif_sync_rx",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "fragment_chain != fragment_chain->m_nextpkt",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "netif_ph != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "kpipe_buf != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "netif_buf != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "ipsec_netif_sync_rx %s: legacy decrypted packet length cannot hold IP %zu < %zu\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec_netif_sync_rx %s: legacy unknown ip version %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec_netif_sync_rx %s: failed to fragment IPv4 packet of length %zu (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec_netif_sync_rx %s: failed to fragment IPv6 packet of length %zu < %zu\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec_netif_sync_rx %s: failed to fragment IPv6 packet of length %zu (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec_netif_sync_rx %s: uknown legacy decrypted packet length %zu > %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec_transform_kpipe_pkt_to_netif_pkt %s: kpipe buffer length %u > pcb ipsec slot size %u",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec_transform_kpipe_pkt_to_netif_pkt %s - bad ip version %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec_transform_kpipe_pkt_to_netif_pkt %s - netif buffer length %u too short\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec_transform_kpipe_pkt_to_netif_pkt %s: wake packet flag is set\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ipsec_netif_sync_rx",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "ipsec_netif_tx_doorbell",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ipsec_netif_tx_doorbell",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "(flags & KERN_NEXUS_TXDOORBELLF_ASYNC_REFILL) == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: %s ring %s tx refill failed %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s ring %s index %d bad netif_txring 3\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec_netif_tx_doorbell: ifnet_disable_output returned error %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ipsec_netif_tx_doorbell_one",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ipsec_nexus_detach",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ipsec_nexus_detach",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ipsec_ctl_disconnect: detaching interface %s (id %s)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "ipsec_ctl_disconnect - ifnet_detach failed: %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "dc->count >= 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "dc->count <= IPSEC_IF_MAX_RING_COUNT",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "!uuid_is_null(pcb->ipsec_kpipe_uuid[i])",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "pcb->ipsec_kpipe_pp",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "!pcb->ipsec_kpipe_pp",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "ipsec_ctl_disconnect - ifnet_detach failed: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ipsec_ctl_disconnect",
            "prototype": "",
            "backtrace": [
                "ipsec_register_control",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "!result",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "dc->pp",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "ipsec_free_channels",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: IPSEC_OPT_SLOT_SIZE %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: IPSEC_OPT_NETIF_RING_SIZE %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: IPSEC_OPT_TX_FSW_RING_SIZE %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: IPSEC_OPT_KPIPE_TX_RING_SIZE %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: IPSEC_OPT_KPIPE_RX_RING_SIZE %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s IPSEC_OPT_SET_DELEGATE_INTERFACE %s to %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s IPSEC_OPT_OUTPUT_TRAFFIC_CLASS %s svc %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s IPSEC_OPT_OUTPUT_DSCP_MAPPING %s DSCP %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ipsec_ctl_setopt",
            "prototype": "",
            "backtrace": [
                "ipsec_register_control",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Only platform-signed binaries can open NECP sessions",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Process does not hold necessary entitlement to open NECP session",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "necp_create_session",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Created NECP session, control unit %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_session_open",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.xnu.net.necp",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "os_log_create"
                },
                {
                    "string": "necp-data-trace",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "os_log_create"
                }
            ],
            "symbol": "necp_init",
            "prototype": "",
            "backtrace": [
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "RESULT - Loopback PASS <NO MATCH>",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "RESULT - DROP <NO CLIENT / MULTICAST>",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_application_find_policy_match_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "RESULT - Loopback PASS",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "RESULT - Inactive Agent DROP",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "socket unscoped for PASS result",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "FLOW DIVERT <ROUTE RULE>",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "socket unscoped for <NO MATCH>",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "RESULT - DROP <MISSING CLIENT>",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: DATA-TRACE: Socket Policy - INP UPDATE - RESULT - CACHED <MATCHED>: %p (BoundInterface %d Proto %d) Policy %d Result %d Parameter %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Marking socket in state %d as defunct\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: DATA-TRACE: Socket Policy: <so %llx> (BoundInterface %d Proto %d) Policy %d Skip %d Result %d Parameter %d Filter %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_socket_find_policy_match",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "necp_mark_packet_from_socket",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "START - MARK PACKET",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "RESULT - MARK PACKET",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_mark_packet_from_socket",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "necp_policy_apply_all",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Applied NECP policies",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "necp_policy_delete",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "necp_policy_unapply"
                },
                {
                    "string": "Removed NECP policy",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "necp_policy_unapply"
                },
                {
                    "string": "necp_kernel_socket_policies_dump_all",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "NECP Application Policies:\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "NECP Socket Policies:\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "necp_kernel_ip_output_policies_dump_all",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "NECP IP Output Policies:\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: \tApp Bucket: %d\n\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:  ID Bucket: %d\n\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: \t%3d. Policy ID: %5d\tProcess: %10.10s\tOrder: %04d.%04d.%d\tMask: %llx\tResult: %s\n\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_policy_apply_all",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Error applying socket kernel policy",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "necp_get_new_string_id",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Failed to find a free route rule id.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Allocate route rule ID failed.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "necp_kernel_socket_policy_add",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Failed to find a free socket kernel policy ID.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Added kernel policy: socket, id=%d, mask=%llx\n\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_policy_apply",
            "prototype": "",
            "backtrace": [
                "necp_policy_apply_all"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Failed to find a free service UUID.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Allocate uuid ID failed.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_create_uuid_service_id_mapping",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Failed to find a free aggregate route rule id.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_create_aggregate_route_rule",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Failed to find a free IP kernel policy ID.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "necp_kernel_ip_output_policy_add",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Added kernel policy: ip output, id=%d, mask=%llx\n\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_kernel_ip_output_policy_add",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "Pass (%X)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "Skip (%u)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "Drop (%X)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "SocketDivert (%d)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "SocketFilter (%d)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "IPTunnel (%s%d)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "IPFilter",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "SocketScoped (%s%d)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "ScopedDirect",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "AllowUnentitled",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "RouteRules (Only %s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "RouteRules (%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "!Cell ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "!WiFi ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "!Wired ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "!Exp ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "!Constrained ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "!Companion ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "!VPN ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "RouteRules (QoSMarking %s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "RouteRules (Unknown)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "UseNetAgent (%s)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "NetAgentScoped (%s)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "RemoveNetAgent (%s)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "Unknown %d (%d)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "necp_get_result_description",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "necp_delete_session",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Deleted NECP session",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_session_op_close",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Failed to validate policy result",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Route rules size overflowed, too large",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Failed to get policy route rules",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Failed to validate policy route rule",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Failed to validate route rule; contained multiple default route rules",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Conditions size overflowed, too large",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Failed to get policy conditions",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Failed to validate policy condition",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Failed to validate conditions; contained default and non-default conditions",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Failed to validate conditions; did not contain application condition",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Failed to validate conditions; kernel pid (0) condition allows only Pass/Skip result",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_session_add_policy invalid input (%zu)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_session_add_policy invalid output buffer (%zu)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_session_add_policy tlv copyin error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_session_add_policy failed to add policy (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_session_add_policy policy_id copyout error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Failed to get policy order: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Failed to find policy result TLV: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Failed to get policy result length: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Policy result length too large: %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Failed to allocate a policy result buffer (size %d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Failed to get policy result: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Route rules length too large: %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Failed to allocate a policy route rules array (size %d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Conditions length too large: %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Failed to allocate a policy conditions array (size %d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_session_add_policy",
            "prototype": "",
            "backtrace": [
                "necp_session_action"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "necp_get_tlv_at_offset tlv_value is NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_get_tlv_at_offset out_buffer_length is too small for TLV value (%u < %u)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_get_tlv_at_offset",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "necp_policy_result_is_valid",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Policy result type %d, valid %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_policy_result_is_valid",
            "prototype": "",
            "backtrace": [
                "necp_session_add_policy",
                "necp_session_action"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "necp_policy_route_rule_is_valid",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Policy route rule type %d, valid %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_policy_route_rule_is_valid",
            "prototype": "",
            "backtrace": [
                "necp_session_add_policy",
                "necp_session_action"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "necp_policy_condition_is_valid",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Policy condition type %d, valid %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_policy_condition_is_valid",
            "prototype": "",
            "backtrace": [
                "necp_session_add_policy",
                "necp_session_action"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "necp_policy_create",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Created NECP policy, order %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_policy_create",
            "prototype": "",
            "backtrace": [
                "necp_session_add_policy",
                "necp_session_action"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "necp_session_dump_all",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Session does not hold the necessary entitlement to get Network Extension Policy information",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Gathering policies",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_session_dump_all invalid output buffer (%zu)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Failed to allocate tlv_buffer_pointers (%lu bytes)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Failed to allocate tlv_buffer_lengths (%lu bytes)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Policy: process: %s, result: %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Failed to allocate tlv_buffer (%u bytes)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Failed to allocate cond_buffer (%u bytes)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: out_buffer_length too small (%lu < %lu)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Failed to allocate result_buffer (%lu bytes)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Failed to copy out result_buffer (%lu bytes)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_session_dump_all",
            "prototype": "",
            "backtrace": [
                "necp_session_action"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "necp_get_new_domain_filter_id",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Failed to find a free filter ID.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_create_domain_filter",
            "prototype": "",
            "backtrace": [
                "necp_session_add_domain_filter",
                "necp_session_action"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "com.apple.configd",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strcmp"
                },
                {
                    "string": "com.apple.private.necp.drop_all_bypass",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "necp_check_drop_all_bypass_result",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "com.apple.developer.networking.multicast",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "proc_min_sdk"
                },
                {
                    "string": "necp_check_restricted_multicast_drop",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Dropping unentitled multicast (SDK 0x%x, min 0x%x)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_check_restricted_multicast_drop",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "RESULT - DROP - (session order > drop-all order)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "SKIP (cleared saved skip)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Scope",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "NECP_KERNEL_CONDITION_APP_ID",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "NECP_KERNEL_CONDITION_SIGNING_IDENTIFIER",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "<n/a>",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "NECP_KERNEL_CONDITION_REAL_APP_ID",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "NECP_KERNEL_CONDITION_PLATFORM_BINARY",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "NECP_KERNEL_CONDITION_EXACT_DOMAIN",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "NECP_KERNEL_CONDITION_DOMAIN",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "NECP_KERNEL_CONDITION_URL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "NECP_KERNEL_CONDITION_ACCOUNT_ID",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "NECP_KERNEL_CONDITION_PID",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "NECP_KERNEL_CONDITION_UID",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "NECP_KERNEL_CONDITION_REAL_UID",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "NECP_KERNEL_CONDITION_TRAFFIC_CLASS",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "NECP_KERNEL_CONDITION_AGENT_TYPE",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "NECP_KERNEL_CONDITION_CLIENT_FLAGS",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "NECP_KERNEL_CONDITION_LOCAL_EMPTY",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "NECP_KERNEL_CONDITION_REMOTE_EMPTY",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "NECP_KERNEL_CONDITION_IS_LOOPBACK",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "NECP_KERNEL_CONDITION_DELEGATE_IS_PLATFORM_BINARY",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: DATA-TRACE: Socket Policy <so %llx>: (Application %d Real Application %d BoundInterface %d Proto %d) Filter %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: DATA-TRACE: Socket Policy <so %llx>: (Application %d Real Application %d BoundInterface %d Proto %d) Route Rule %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: DATA-TRACE: Socket Policy <so %llx>: (Application %d Real Application %d BoundInterface %d Proto %d) %s Netagent %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: DATA-TRACE: Socket Policy <so %llx>: (Application %d Real Application %d BoundInterface %d Proto %d) Remove Netagent %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: DATA-TRACE: Socket Policy <so %llx>: (Application %d Real Application %d BoundInterface %d Proto %d) flow divert %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: DATA-TRACE: Socket Policy <so %llx>: MATCHED SKIP POLICY (Application %d Real Application %d BoundInterface %d Proto %d) set skip_policy_id %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_socket_find_policy_match_with_info_locked",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "necp_socket_verify_netagents",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: DATA-TRACE: Socket Policy: <so %llx> Triggering inactive agent (%d), error %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_socket_verify_netagents",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "RESULT - DROP (session order > drop-all order)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "RESULT - DROP (destination address rule)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "necp_ip_output_check_policy",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_ip_output_find_policy_match_locked",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 6,
            "anchors": [
                {
                    "string": "necp_route_is_allowed",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Route Allowed: no route or interface, Rule %d Allowed %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_route_is_allowed",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "START - RESULT - CACHED DROP",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "START - RESULT - CACHED",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "RESULT - CACHED <DROP>",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "RESULT - loopback",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "RESULT - AGENT INACTIVE",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "RESULT - DROP - NO MATCH",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "RESULT - DROP - MULTICAST",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: DATA-TRACE: Socket Policy - Send/Recv - RESULT - CACHED <MATCHED>: %p (BoundInterface %d Proto %d) Policy %d Skip %d Result %d Parameter %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: DATA-TRACE: Socket Policy - Send/Recv: %p (BoundInterface %d Proto %d) Policy %d Result %d Parameter %d Allowed %d <filter_control_unit %d flow_divert_aggregate_unit %d>\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_socket_is_allowed_to_send_recv_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "necp_client_assert_bb_radio_manager",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Couldn't find client",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "BB radio manager agent not found",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "netagent_client_message failed",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_client_assert_bb_radio_manager",
            "prototype": "",
            "backtrace": [
                "mptcp_check_subflows_and_add"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "necp_update_all_clients_immediately_if_needed",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_update_all_clients immediate %s update %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_update_all_clients_immediately_if_needed",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "NULL proc",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "NULL fp",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Could not find client structure for backgrounded client",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Not a client fd, ignore",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_set_client_as_background",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "Client does not hold necessary entitlement to observe other NECP clients",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_open",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "necp_set_socket_attributes",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: NECP_SOCKET_ATTRIBUTE_LOG: NECP ATTRIBUTES SOCKET - domain <%s> owner <%s> context <%s> tracker domain <%s> account <%s>\n\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Set on socket: Domain %s, Domain owner %s, Domain context %s, Tracker domain %s, Account %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_set_socket_attributes",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "necp_client_remove_assertion",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Netagent uuid not previously asserted",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_client_remove_assertion",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "Multiple resolver tags are not supported",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Resolver tag invalid client ID",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Resolver tag hostname does not match",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Resolver tag address type does not match",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Resolver tag port does not match",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Resolver tag address does not match",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Failed to validate resolve answer",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Resolver tag length too short: %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Resolver tag unknown sign type: %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: NECP_CLIENT_PARAMS_LOG <pid %d %s>: Parsing param - type %d length %d value <%llu (%llX)> %s\n\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: NECP_CLIENT_PARAMS_LOG <pid %d %s>: Parsing param - type %d length %d\n\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: NECP_CLIENT_PARAMS_LOG <pid %d %s>: Parsed params - valid_fields %X flags %X delegated_upid %llu local_addr %s remote_addr %s required_interface_index %u required_interface_type %d local_address_preference %d ip_protocol %d transport_protocol %d ethertype %d effective_pid %d effective_uuid %s uid %d persona_id %d traffic_class %d\n\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: NECP_CLIENT_PARAMS_LOG <pid %d %s>: Parsed params - tracker flags <known-tracker %X> <non-app-initiated %X> <silent %X> <app-approved %X>\n\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: NECP_CLIENT_PARAMS_LOG <pid %d %s>: Parsed prohibited_interfaces[%d] <%s>\n\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": null
                }
            ],
            "symbol": "necp_client_parse_parameters",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "need_defunct == TRUE",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "necp_fd_defunct",
            "prototype": "",
            "backtrace": [
                "networking_defunct_callout",
                "pid_shutdown_sockets"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nai->nai_use_count == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "necp_arena_info_free",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "necp_process_defunct_list",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_memcmp"
                }
            ],
            "symbol": "necp_process_defunct_list",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nai->nai_use_count >= 1",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "nai->nai_flags & NAIF_ATTACHED",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "necp_stats_arenas_destroy",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "necp_destroy_client",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "netagent_client_message_with_params"
                }
            ],
            "symbol": "necp_destroy_client",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "necp_destroy_client_flow_registration",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_remove close nexus error (%d) MESSAGE TYPE %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_destroy_client_flow_registration",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "No channel for kqfilter",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: bad filter request %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necpop_kqfilter",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "NECP client observers with push enabled may not add their own clients",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "necp_client_add, no necp_client_inherit_from_parent as can't find parent on fd_data",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "necp_client_add, child does not have a demux pattern",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "necp_client_add, parent ID is null",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "necp_client_add, multiple parent flows not supported",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "necp_client_add, parent/child ip protocol mismatch",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "necp_client_add, local/remote address family mismatch",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "necp_client_add, parent/child address family mismatch",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "necp_client_add, parent/child local address mismatch",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "necp_client_add, parent/child remote address mismatch",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "necp_client_add, parent/child local port mismatch",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "necp_client_add, parent/child remote port mismatch",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_add parameters copyin error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: NECP_CLIENT_LOG <pid %d %s>: Adding client\n\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_add client_id copyout error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s(%d) does not hold the necessary entitlement to delegate network traffic for other processes by upid\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s(%d) does not hold the necessary entitlement to set attributed bundle identifier\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s(%d) does not hold the necessary entitlement to open a custom nexus client\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s(%d) does not hold the necessary entitlement for custom protocol APIs\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_add listener invalid address family (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_add netns_reserve_ephemeral error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_add netns_reserve error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_add, flow demux pattern not supported for %d protocol\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_add, flow demux pattern not supported for %d family\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_client_add",
            "prototype": "",
            "backtrace": [
                "necp_client_action"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "necp_client_update_local_port_parameters",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_client_update_local_port_parameters",
            "prototype": "",
            "backtrace": [
                "necp_client_add",
                "necp_client_action"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "parameters != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "necp_client_copy_parameters_locked",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "necp_find_conn_netstat_data",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_find_conn_netstat_data",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "necp_client_claim cannot claim from flow UUID",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_claim copyin client_id error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: NECP_CLIENT_LOG <pid %d %s>: Claiming client\n\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_client_claim",
            "prototype": "",
            "backtrace": [
                "necp_client_action"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "necp_client_remove ntstat shutdown finds nstat_context NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_remove copyin client_id error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: NECP_CLIENT_LOG <pid %d %s>: Removing client\n\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_remove invalid client_id (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_client_remove",
            "prototype": "",
            "backtrace": [
                "necp_client_action"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "necp_client_check_tcp_heuristics",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_parse_parameters error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_client_check_tcp_heuristics",
            "prototype": "",
            "backtrace": [
                "necp_client_fillout_flow_tlvs"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Client does not hold necessary entitlement to list other NECP clients",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_list buffer copyout error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_list client count copyout error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_client_list",
            "prototype": "",
            "backtrace": [
                "necp_client_action"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Requested nexus not found",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_add_flow invalid client_id (length %zu)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_add_flow invalid buffer (length %zu)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_add_flow copyin client_id error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_add_flow process not found for pid %d error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: NECP CLIENT FLOW TRACE <pid %d %s> <flow %s>: adding flow\n\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: NECP CLIENT FLOW TRACE <pid %d %s> <flow %s>: Initializing stats\n\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_add_flow copyout add_request error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Add flow error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_client_add_flow",
            "prototype": "",
            "backtrace": [
                "necp_client_action"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "stats-%u.%s.%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tsnprintf"
                },
                {
                    "string": "!(nai->nai_flags & NAIF_ATTACHED)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: failed to create stats arena for pid %d\n\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: failed to map stats arena for pid %d\n\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_arena_initialize",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "fd_data->stats_arena_active != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "fd_data->stats_arena_active->nai_arena != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "!(fd_data->stats_arena_active->nai_flags & (NAIF_REDIRECT | NAIF_DEFUNCT))",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "necp_stats_initialize",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "necp_find_netstat_initial_properties",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: NECP CLIENT FLOW TRACE <pid %d %s> <flow %s>: Initialized stats <error %d>\n\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_stats_initialize",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "necp_find_netstat_data",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_find_netstat_data",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "necp_client_remove_flow",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "copyin"
                },
                {
                    "string": "%s: necp_client_remove_flow invalid client_id (length %zu)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_remove_flow copyin client_id error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: NECP CLIENT FLOW TRACE <pid %d %s> <flow %s>: removing flow\n\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Remove flow error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_client_remove_flow",
            "prototype": "",
            "backtrace": [
                "necp_client_action"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "necp_client_request_nexus",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "copyin"
                },
                {
                    "string": "%s: necp_client_request_nexus copyin client_id error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_request_nexus process not found for pid %d error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_request_nexus copyin bufreq error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_request_nexus copyout bufreq error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Request nexus error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_client_request_nexus",
            "prototype": "",
            "backtrace": [
                "necp_client_action"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "necp_client_agent_action invalid parameters",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Invalid TLV value",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_agent_action copyin client_id error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_agent_action invalid buffer size (>%u)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_agent_action parameters copyin error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_client_agent_action",
            "prototype": "",
            "backtrace": [
                "necp_client_action"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "necp_client_copy_interface bad input",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_copy_interface copyin interface_index error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_copy_interface bad interface_index (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_copy_interface copyout error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_client_copy_interface",
            "prototype": "",
            "backtrace": [
                "necp_client_action"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "necp_client_get_interface_address bad input",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "necp_client_get_interface_address no matching interface found",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "necp_client_get_interface_address route lookup failed",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_get_interface_address copyin interface_index error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_get_interface_address bad interface_index (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_get_interface_address copyin address error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_get_interface_address invalid address family (%u)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_get_interface_address invalid address length (%u)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_get_interface_address local address selection failed (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_get_interface_address local address too long for buffer (%u)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_get_interface_address copyout error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_client_get_interface_address",
            "prototype": "",
            "backtrace": [
                "necp_client_action"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "sysctl.%s.%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tsnprintf"
                },
                {
                    "string": "%s: failed to create arena for pid %d\n\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: failed to map sysctl arena for pid %d\n\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_client_map_sysctls",
            "prototype": "",
            "backtrace": [
                "necp_client_action"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "necp_client_copy_route_statistics bad input",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_copy_route_statistics copyin client_id error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_copy_route_statistics copyout error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_client_copy_route_statistics",
            "prototype": "",
            "backtrace": [
                "necp_client_action"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "NECP fd is not observer, cannot copy client update",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Client id invalid, cannot copy client update",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Buffer invalid, cannot copy client update",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "fd_data->update_count > 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: Copy client update copyout client id error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Buffer size cannot hold update (%zu < %zu)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Copy client update copyout error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_client_copy_client_update",
            "prototype": "",
            "backtrace": [
                "necp_client_action"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Process does not hold the necessary entitlement to sign resolver answers",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_sign allocate signable %zu failed\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_sign copyin signable error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_sign unknown signable type (%u)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_sign unexpected tag size %zu\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_sign copyout error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_client_sign",
            "prototype": "",
            "backtrace": [
                "necp_client_action"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Process does not hold the necessary entitlement to directly validate resolver answers",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_validate allocate struct %zu failed\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_validate copyin error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_client_validate",
            "prototype": "",
            "backtrace": [
                "necp_client_action"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "necp_client_get_signed_client_id bad input",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_get_signed_client_id copyin request_type error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_get_signed_client_id bad request_type (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_get_signed_client_id unexpected tag size %zu\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_get_signed_client_id copyout error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_client_get_signed_client_id",
            "prototype": "",
            "backtrace": [
                "necp_client_action"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "necp_client_set_signed_client_id client lacks the necessary entitlement",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "necp_client_set_signed_client_id bad input",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_set_signed_client_id copyin request_type error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_set_signed_client_id bad request_type (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_set_signed_client_id copyin request error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_set_signed_client_id signature validation failed (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_client_set_signed_client_id",
            "prototype": "",
            "backtrace": [
                "necp_client_action"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Failed to get socket attribute",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Failed to allocate a socket attribute buffer (size %zu)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_set_socket_attribute",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "necp_update_all_clients_callout",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_update_all_clients_callout running for coalesced %u updates\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_update_all_clients_callout",
            "prototype": "",
            "backtrace": [
                "necp_client_init",
                "necp_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Cannot register agent on NULL session",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Cannot register NULL agent",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "netagent_register",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "netagent_unregister",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Cannot unregister NULL session",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "FlowSwitch",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "fsw_netagent_register",
            "prototype": "",
            "backtrace": [
                "fsw_host_setup",
                "fsw_ctl_attach",
                "fsw_ctl"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "netagent_post_updated_interfaces",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Interface event with no associated agent",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "netagent_post_updated_interfaces",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "netagent_ioctl",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Client does not hold the necessary entitlement to get netagent information",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "netagent_ioctl",
            "prototype": "",
            "backtrace": [
                "ifioctl"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "netagent_get_flags",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Flags requested for invalid netagent",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "netagent_get_flags",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "netagent_set_flags",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Attempt to set flags for invalid netagent",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "netagent_set_flags",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "netagent_get_generation",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Generation requested for invalid netagent",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "netagent_get_generation",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Type requested for invalid netagent",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Invalid arguments for netagent_get_agent_domain_and_type %p %p\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "netagent_get_agent_domain_and_type",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Requested netagent for kernel trigger could not be found",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Requested netagent for kernel trigger is not kernel activated",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Requested netagent for kernel trigger is already active",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "netagent_kernel_trigger",
            "prototype": "",
            "backtrace": [
                "necp_socket_verify_netagents"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Requested netagent for nexus instance is not a nexus provider",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Requested netagent for nexus instance is not active",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Requested netagent for group operation is not a group provider",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Requested netagent for group operation is not active",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "assigned_results == NULL || *assigned_results == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "assigned_results_length == NULL || *assigned_results_length == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "Failed to allocate client for trigger",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "netagent_send_error_message",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "netagent_send_group_message",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "netagent_send_client_message",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Client netagent message type (%d) is invalid\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Triggered network agent %s, error = %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Failed to send client group message %d on control unit %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "netagent_client_message_with_params",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "netagent_use",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "netagent_assert: Requested netagent UUID is not registered",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "netagent_use",
            "prototype": "",
            "backtrace": [
                "necp_client_agent_use",
                "necp_client_action"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Network agent for request UUID could not be found",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Network agent does not have any tokens",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "netagent_acquire_token",
            "prototype": "",
            "backtrace": [
                "necp_client_acquire_agent_token",
                "necp_client_action"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "uap == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Requested netagent UUID is empty",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Requested netagent UUID is not registered",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Requested netagent UUID is not eligible for triggering",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Requested netagent UUID is already active",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Incorrect length (got %zu, expected %lu)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: copyin error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "netagent_trigger",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "Got a NULL session",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "NETAGENT_MESSAGE_TYPE_GET no longer supported",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "NETAGENT_MESSAGE_TYPE_ASSERT no longer supported",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "NETAGENT_MESSAGE_TYPE_UNASSERT no longer supported",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Got a bad packet, length (%lu) < sizeof header (%lu)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: mbuf_copydata failed for the header: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Received unknown message type %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "netagent_ctl_send",
            "prototype": "",
            "backtrace": [
                "netagent_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "netagent_send_success_response",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "netagent_send_success_response",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "netagent_send_error_response",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "netagent_send_error_response",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "Request for registration",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Request for update",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Request for unregistration",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Request for assigning nexus",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Request for assigning group members",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Request to set use count",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Request to add a token",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Request to flush tokens",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Request to set token low water mark",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Request to reset client error",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Group assign message is too short",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Agent assigned group members to client",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "No token received",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Session cannot add more tokens",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "netagent_handle_flush_tokens_setopt",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "netagent_handle_reset_client_error_setopt",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Update message size (%zu > %u) too large\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Failed to allocate group assign message (%lu bytes)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Client group assignment failed: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Payload length is invalid (%lu)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Token length is invalid (%lu)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "netagent_ctl_setopt",
            "prototype": "",
            "backtrace": [
                "netagent_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Request to get use count",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Request to get token count",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Request to get token low water mark",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "netagent_ctl_getopt",
            "prototype": "",
            "backtrace": [
                "netagent_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "netagent_unregister_session_wrapper",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Unregistered agent",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "netagent_unregister_session_wrapper",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Invalid argument: agent_changed",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Basic agent parameters do not match, cannot update",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Updated agent (no changes)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Updated agent",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "netagent_handle_update_inner",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "netagent_send_trigger",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Failed to send trigger message on control unit %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "netagent_send_trigger",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "netagent_send_tokens_needed",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Failed to send client tokens needed message on control unit %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "netagent_send_tokens_needed",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: unit (%d) exceeds max (%d) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "if_pflog.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: ifnet_allocate failed - %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: ifnet_attach failed - %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "pflog_clone_create",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pflogoutput",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "pflogoutput",
            "prototype": "",
            "backtrace": [
                "pflog_clone_create"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pflogdemux",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "pflogdemux",
            "prototype": "",
            "backtrace": [
                "pflog_clone_create"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s synthesized  %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "nat464_synthesize_ipv6",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "nat464_synthesize_ipv6",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "prefix_len < sizeof(prefix)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s desynthesized to %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "nat464_synthesize_ipv4",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "nat464_synthesize_ipv4",
            "prototype": "",
            "backtrace": [
                "dlil_input_packet_list_common"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s translated to IPv4 (inner) ip_len: %#x ip_p: %d ip_sum: %#x ip_src: %s ip_dst: %s \n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s translated to IPv6 (inner) ip6_plen: %#x ip6_nxt: %d ip6_src: %s ip6_dst: %s \n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "nat464_translate_icmp_ip",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s translated to IPv4 ip_len: %#x ip_p: %d ip_sum: %#x ip_src: %s ip_dst: %s \n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "nat464_translate_64",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "nat464_translate_64",
            "prototype": "",
            "backtrace": [
                "dlil_input_packet_list_common"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s translated to IPv6 ip6_plen: %#x  ip6_nxt: %d ip6_src: %s ip6_dst: %s \n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "nat464_translate_46",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "nat464_translate_46",
            "prototype": "",
            "backtrace": [
                "dlil_clat46"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "af == PF_INET || af == PF_INET6",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "IN_ARE_ADDR_EQUAL(&odst->natv4addr, &iph2->ip_src)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s translated to ICMPV6 type: %d code: %d checksum: %#x \n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s translated to ICMP type: %d code: %d checksum: %#x \n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "FALSE",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "nat464_translate_proto",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "in6_clat46_event_enqueue_nwk_wq_entry",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "IN6_CLAT46_EVENT_V4_FLOW",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "IN6_CLAT46_EVENT_V6_ADDR_CONFFAIL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "UNKNOWN_IN6_CLAT46_EVHDLR_CODE",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: eventhandler enqueuing event of type=in6_clat46_event event_code=%s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "in6_clat46_event_enqueue_nwk_wq_entry",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "pf_find_state_all @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pf_find_state_all",
            "prototype": "",
            "backtrace": [
                "pfioctl_ioc_natlook",
                "pfioctl"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pf: src_tree insert failed: ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "pf_insert_src_node",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "s->state_key != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "tree_lan_ext",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "pf_stateins_err"
                },
                {
                    "string": "tree_ext_gwy",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "pf_stateins_err"
                },
                {
                    "string": "pf: state insert failed: id: %016llx creatorid: %08x",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "pf_status.states != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "pf_insert_state",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pf_purge",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tsleep0"
                }
            ],
            "symbol": "pf_purge_thread_fn",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "state->timeout != PFTM_UNLINKED",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "state->timeout < PFTM_MAX",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "pf_state_expires",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "s->src_node->conn > 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "s->src_node->states > 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "s->nat_src_node->states > 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "pf_src_tree_remove_state",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "cur->timeout == PFTM_UNLINKED",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "cur->rule.ptr->states > 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "cur->nat_rule.ptr->states > 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "cur->anchor.ptr->states > 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "pf_status.states > 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "pf_free_state",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "GRE%u ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "ICMP ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "ICMPV6 ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": " %u:%u",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "pf_print_state",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "psk->app_state == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "pf_alloc_state_key",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pf: pool %s hard limit reached (%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "pool_get",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(tag == NULL) || (pftag->pftag_flags & PF_TAG_REASSEMBLED)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "pf_find_fragment_tag",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pf: state insert failed: %s %s ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "ICMP4",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "PROTO=%u",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": " lan: ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": " gwy: ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": " ext_lan: ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": " ext_gwy: ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "pf_stateins_err",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pf_purge_cont",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tsleep0"
                }
            ],
            "symbol": "pf_purge_thread_cont",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "[%08x]",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "pf_print_sk_host",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "invalid address type: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "pf_addr_wrap_neq",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pf_send_tcp: not AF_INET or AF_INET6! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pf_send_tcp",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "pf_test: pf_get_mtag_pbuf returned NULL\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "pf_test: kif == NULL, if_name %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "pf: dropping packet with ip options [hlen=%u]\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "pf_test",
            "prototype": "",
            "backtrace": [
                "pf_test_mbuf"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "pf: state reuse ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "pf: loose state match: ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": " seq=%u (%u) ack=%u len=%u ackskew=%d pkts=%llu:%llu dir=%s,%s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "pf: BAD state: ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "\n   seq=%u (%u) ack=%u len=%u ackskew=%d sws=%u dws=%u pkts=%llu:%llu dir=%s,%s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "pf: State failure on: %c %c %c %c | %c %c\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "pf_test_state_tcp",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "pf_find_state @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pf_find_state",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(*state)->src_node->conn != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "pf_src_connlimit: blocking address ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": ", %u states killed",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "pf_src_connlimit",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "!NETNS_TOKEN_VALID(&nstoken)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "s->rule.ptr->states != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "s->anchor.ptr->states != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "s->nat_rule.ptr->states != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "s->src_node->states != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "s->nat_src_node->states != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "pf_normalize_tcp_stateful failed on first pkt",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "pf_tag_packet failed",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pf_test_rule",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 7,
            "anchors": [
                {
                    "string": "pf: NAT proxy port allocation (%u-%u) failed\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "pf_get_translation_aux",
            "prototype": "",
            "backtrace": [
                "pf_test_rule"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "pf_map_addr: src tracking maps ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "pf_map_addr: selected address ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "pf_map_addr",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "gs->rule.ptr->states != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "gs->anchor.ptr->states != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "gs->nat_rule.ptr->states != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "pf_pptp_handler: bad directional!\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "pf_pptp_handler: failed to spoof call id\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "gs->src_node->states != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "gs->nat_src_node->states != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "pf_pptp_handler: error inserting GREv1 state.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "pf_pptp_handler",
            "prototype": "",
            "backtrace": [
                "pf_test_rule"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pf_calc_mss: not AF_INET or AF_INET6! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pf_calc_mss",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "pf: IKE message too small.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "pf: IKE initiator cookie = 0.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "pf_test_state_udp",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 4,
            "anchors": [
                {
                    "string": "pf: ICMP error message too short (ip)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "pf: ICMP error message too short (ip6)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "pf: ICMPv6 short opt\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "pf: ICMP error message too short (tcp)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "pf: BAD ICMP %d:%d ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": " state: ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": " seq=%u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "pf: ICMP error message too short (udp)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "pf: ICMP error, embedded IKE message too small.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "pf: ICMP error message too short i(icmp)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "pf: ICMP error message too short (icmp6)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "pf_test_state_icmp",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pf_route: invalid parameters @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "pf_route: packet length < sizeof (struct ip)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "pf_route: TAILQ_EMPTY(&r->rpool.list)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "pf_route",
            "prototype": "",
            "backtrace": [
                "pf_test",
                "pf_test_mbuf"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pf_test6: pf_get_mtag_pbuf returned NULL\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "pf_test6: kif == NULL, if_name %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "pf: IPv6 short fragment header\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "pf: IPv6 short opt\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "pf: dropping packet with dangerous v6addr headers\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "pf_test6",
            "prototype": "",
            "backtrace": [
                "pf_test6_mbuf"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pf_route6: m0->m_len < sizeof (struct ip6_hdr)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "pf_route6: TAILQ_EMPTY(&r->rpool.list)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "pf_route6:dropped refragmented packet\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "pf_route6",
            "prototype": "",
            "backtrace": [
                "pf_test6",
                "pf_test6_mbuf"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pfiaddrpl",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_ext"
                },
                {
                    "string": "pfi_kif_get for pfi_all failed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pfi_initialize",
            "prototype": "",
            "backtrace": [
                "pfinit",
                "dlil_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pfi_kif_unref: rules refcount <= 0\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "pfi_kif_unref: state refcount <= 0\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "pfi_kif_unref with unknown type @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pfi_kif_unref",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pfi_kif_get failed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pfi_attach_ifnet",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": ":network",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcat"
                },
                {
                    "string": ":broadcast",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcat"
                },
                {
                    "string": ":peer",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcat"
                }
            ],
            "symbol": "pfi_dynaddr_setup",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "pfi_dynaddr_update @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "pfi_table_update: cannot set %d new addresses into table %s: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "pfi_kif_update",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "pfi_address_add: address buffer full (%d/%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "pfi_address_add: no memory to grow buffer (%d/%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "pfi_address_add",
            "prototype": "",
            "backtrace": [
                "pfi_kif_update"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pfrulepl",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_ext"
                },
                {
                    "string": "pfsrctrpl",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_ext"
                },
                {
                    "string": "pfstatepl",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_ext"
                },
                {
                    "string": "pfstatekeypl",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_ext"
                },
                {
                    "string": "pfappstatepl",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_ext"
                },
                {
                    "string": "pfpooladdrpl",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_ext"
                },
                {
                    "string": "%s: unable to start purge thread!",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: failed to allocate major number!\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "pfosfpen",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_ext"
                },
                {
                    "string": "pfosfp",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_ext"
                }
            ],
            "symbol": "pfinit",
            "prototype": "",
            "backtrace": [
                "dlil_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 4,
            "anchors": [
                {
                    "string": "*mppn == *mp",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "pf_af_hook",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pfdevcnt > 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "pfclose",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pf: unable to generate token\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "pf: enabled refcount decremented\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "pf: token mismatch\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "cmd == DIOCOSFPGET",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: rule not found! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "pf_delete_rule_by_ticket",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: parent rule of anchor not found! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "pf_deleterule_anchor_step_out",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pfioctl",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pf_is_enabled == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "pf: started\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "pf_start",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "generate_token",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: NR_TOKENS_LIMIT reached",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "generate_token",
            "prototype": "",
            "backtrace": [
                "pfioctl"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pf_is_enabled",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "pf: stopped\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "pf_stop",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pf : remove failure\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "remove_token",
            "prototype": "",
            "backtrace": [
                "pfioctl"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pfioctl_ioc_tokens",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: size overflows",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "pfioctl_ioc_tokens",
            "prototype": "",
            "backtrace": [
                "pfioctl"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: rcount value broken! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "pf_delete_rule_from_ruleset",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pf_delete_rule_from_ruleset",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "pf_default_rule.states != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "pfioctl_ioc_state",
            "prototype": "",
            "backtrace": [
                "pfioctl"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pffrent",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_ext"
                },
                {
                    "string": "pffrag",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_ext"
                },
                {
                    "string": "pffrcache",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_ext"
                },
                {
                    "string": "pffrcent",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_ext"
                },
                {
                    "string": "pfstscr",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_ext"
                }
            ],
            "symbol": "pf_normalize_init",
            "prototype": "",
            "backtrace": [
                "pfinit",
                "dlil_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "BUFFER_FRAGMENTS(frag)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "expiring IPv4 %d(0x%llx) from queue.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "expiring IPv6 %d(0x%llx) from queue.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "!BUFFER_FRAGMENTS(frag)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "expiring IPv4 %d(0x%llx) from cache.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "expiring IPv6 %d(0x%llx) from cache.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "TAILQ_EMPTY(&pf_cachequeue) || TAILQ_LAST(&pf_cachequeue, pf_cachequeue) != frag",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "pf_purge_expired_fragments",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pf_norm.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "pkt too short",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "refragment error %d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "pf_refragment6",
            "prototype": "",
            "backtrace": [
                "pf_test6",
                "pf_test6_mbuf"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "IP_DF\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "mff and %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "max packet %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "reass IPv4 frag %d @ %d-%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "dropping bad IPv4 fragment\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "pf_normalize_ip",
            "prototype": "",
            "backtrace": [
                "pf_test",
                "pf_test_mbuf"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "reass IPv6 frag %d @ %d-%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "dropping bad IPv6 fragment\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "pf_normalize_ip6",
            "prototype": "",
            "backtrace": [
                "pf_test6",
                "pf_test6_mbuf"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "src->scrub == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "pf_normalize_tcp_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "src->scrub || dst->scrub",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "multiple TS??",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "src idled out of PAWS\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "dst idled out of PAWS\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Timestamp failed %c%c%c%c\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": " tsval: %u  tsecr: %u  +ticks: %u  idle: %lus %ums\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": " src->tsval: %u  tsecr: %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": " dst->tsval: %u  tsecr: %u  tsval0: %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Did not receive expected RFC1323 timestamp\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Broken RFC1323 stack did not timestamp data packet. Disabled PAWS security.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "pf_normalize_tcp_stateful",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "LIST_EMPTY(&frag->fr_cache) || LIST_FIRST(&frag->fr_cache)->fr_off > frcache->fr_end",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "pf_free_fragment",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "complete: 0x%llx(%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "pf_reassemble",
            "prototype": "",
            "backtrace": [
                "pf_normalize_ip",
                "pf_test",
                "pf_test_mbuf"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pf_flush_fragments",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "trying to free > %d frents\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "trying to free > %d cache entries\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "pf_flush_fragments",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "fragcache[%d]: new %d-%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "fragcache[%d]: dead (%d-%d) %d-%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "fragcache[%d]: adjacent (%d-%d) %d-%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "fragcache[%d]: chop %d (%d-%d) %d-%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "(int)m->m_len == ntohs(h->ip_len) - precut",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "fragcache[%d]: gap %d (%d-%d) %d-%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "fragcache[%d]: adjacent %d-%d (%d-%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "fragcache[%d]: chop %d %d-%d (%d-%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "(int)m->m_len == ntohs(h->ip_len) - aftercut",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "fragcache[%d]: gap %d %d-%d (%d-%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "fragcache[%d]: done 0-%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "fragcache[%d]: dropping overall fragment\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "pf_fragcache",
            "prototype": "",
            "backtrace": [
                "pf_normalize_ip",
                "pf_test",
                "pf_test_mbuf"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "0x%llx IPv6 frag plen %u off %u fr_ip6f_hlen %u fr_max %u m_len %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "frep at %d, next %d, max %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "drop: atomic fragment\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "complete: 0x%llx ip6_plen %d m_pkthdr.len %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "pf_reassemble6",
            "prototype": "",
            "backtrace": [
                "pf_normalize_ip6",
                "pf_test6",
                "pf_test6_mbuf"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "0x%llx plen %u off %u fr_max %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "frag6cache[%d]: new %d-%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "frag6cache[%u]: dead (%d-%d) %d-%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "frag6cache[%u]: adjacent (%d-%d) %d-%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "frag6cache[%u]: chop %d (%d-%d) %d-%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "(int)m->m_len == ntohs(h->ip6_plen) - precut",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "frag6cache[%u]: gap %d (%d-%d) %d-%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "frag6cache[%u]: adjacent %d-%d (%d-%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "frag6cache[%u]: chop %d %d-%d (%d-%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "(int)m->m_len == ntohs(h->ip6_plen) - aftercut",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "frag6cache[%u]: gap %d %d-%d (%d-%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "frag6cache[%u]: done 0-%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "frag6cache[%u]: dropping overall fragment\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "pf_frag6cache",
            "prototype": "",
            "backtrace": [
                "pf_normalize_ip6",
                "pf_test6",
                "pf_test6_mbuf"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "fingerprinted %s:%d  %d:%d:%d:%d:%llx (%d) (TS=%s,M=%s%d,W=%s%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "pf_osfp_fingerprint_hdr",
            "prototype": "",
            "backtrace": [
                "pf_osfp_fingerprint"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "osfp no match against %x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "osfp matched %s %s %s  %x==%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "fingerprint 0x%x didn't match\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "pf_osfp_match",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "adding osfp %s %s %s = %s%d:%d:%d:%s%d:0x%llx %d (TS=%s,M=%s%d,W=%s%d) %x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "pf_osfp_add",
            "prototype": "",
            "backtrace": [
                "pfioctl"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nm->pm_buffer != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "nm->pm_buffer_len != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "nm->pm_len != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "nm->pm_len <= nm->pm_buffer_len",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "nm->pm_offset < nm->pm_len",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "pbuf_sync",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pbuf_sync",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: packet too big for cluster (%u)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "pbuf_to_mbuf",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "pbuf_to_mbuf",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pbuf_clone_to_mbuf",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pbuf_clone_to_mbuf",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "pbuf_ensure_writable",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pbuf_ensure_writable",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "(u_int)off <= pbuf->pb_packet_len",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "pbuf->pb_mbuf != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "nm->pm_offset + (nm->pm_len + delta_len) <= nm->pm_buffer_len",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "(nm->pm_len + nm->pm_offset) <= nm->pm_buffer_len",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "pbuf_csum_flags_get: bad pb_type: %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pbuf_resize_segment",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pbuf_contig_segment",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pbuf_contig_segment",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "(size_t)len <= src_buflen",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "pbuf_copy_back",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pbuf_copy_back",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "(size_t)len <= dst_buflen",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "pbuf_copy_data",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pbuf_copy_data",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pbuf_inet_cksum",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pbuf_inet_cksum",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pbuf_inet6_cksum",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pbuf_inet6_cksum",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pf_find_or_create_ruleset: RB_INSERT1 '%s' '%s' collides with '%s' '%s'\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "pf_find_or_create_ruleset: RB_INSERT2 '%s' '%s' collides with '%s' '%s'\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "pf_find_or_create_ruleset",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pf_anchor_setup: .. beyond root\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "pf_anchor_setup: ruleset\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "pf_anchor_setup",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pf_anchor_copyout: '%s' '%s'\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "pf_anchor_copyout",
            "prototype": "",
            "backtrace": [
                "pfioctl"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "pf_anchor_remove: broken refcount\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "pf_rm_rule",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pfrktable",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_ext"
                },
                {
                    "string": "pfrkentry",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_ext"
                },
                {
                    "string": "pfrkentry2",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_ext"
                }
            ],
            "symbol": "pfr_initialize",
            "prototype": "",
            "backtrace": [
                "pfinit",
                "dlil_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pfr_clr_addrs: corruption detected (%d).\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "pfr_clr_addrs",
            "prototype": "",
            "backtrace": [
                "pfioctl"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pfr_get_addrs: corruption detected (%d).\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "pfr_get_addrs",
            "prototype": "",
            "backtrace": [
                "pfioctl"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pfr_get_astats: corruption detected (%d).\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "pfr_get_astats",
            "prototype": "",
            "backtrace": [
                "pfioctl"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "pfr_get_tables: corruption detected (%d).\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "pfr_get_tables",
            "prototype": "",
            "backtrace": [
                "pfioctl"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pfr_get_tstats: corruption detected (%d).\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "pfr_get_tstats",
            "prototype": "",
            "backtrace": [
                "pfioctl"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pfr_update_stats: assertion failed.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "pfr_update_stats",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pfr_unroute_kentry: delete failed.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "pfr_unroute_kentry",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ke != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "pfr_walktree",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "iptap_init",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "iptap.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "com.apple.network.advisory",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcpy"
                },
                {
                    "string": "pthread kernel extension not loaded (function table is NULL). @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Copyright (c) 1982, 1986, 1989, 1991, 1993\n\tThe Regents of the University of California. All rights reserved.\n\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "bsd_init: We have a problem, current task is not kernel task\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "bsd_init: failed to mount network root, error %d, %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "We are hanging here...\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "cannot mount root, errno = %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOFindBSDRoot"
                },
                {
                    "string": "bsd_init: cannot find root vnode: %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "rootvp not authenticated after mounting @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "trying to find and mount BaseSystem dmg as root volume\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "bsdmgpath",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "System/Volumes/macOS",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "imageboot_pivot_image"
                },
                {
                    "string": "bsd_autoconf: calling kminit\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "/usr/standalone/firmware/",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcat"
                },
                {
                    "string": "arm64eBaseSystem.rooted.dmg",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcat"
                },
                {
                    "string": "arm64eBaseSystem.dmg",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcat"
                },
                {
                    "string": "/BaseSystem.rooted.dmg",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcat"
                },
                {
                    "string": "/BaseSystem.dmg",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcat"
                },
                {
                    "string": "-bsdmgroot",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "-nobsdmgroot",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "com.apple.kauth.process",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kauth_register_scope"
                },
                {
                    "string": "com.apple.kauth.generic",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kauth_register_scope"
                },
                {
                    "string": "com.apple.kauth.fileop",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kauth_register_scope"
                }
            ],
            "symbol": "bsd_init",
            "prototype": "",
            "backtrace": [
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "iptap_tap_callback",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "iptap_total_tap_count >= 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "iptap_tap_callback",
            "prototype": "",
            "backtrace": [
                "iptap_clone_create"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "iptap_ipf_register",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: ipf_addv4 for %s0 failed - %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: ipf_addv6 for %s0 failed - %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "iptap_clone_create",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "iptap_ipf_input",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "iptap_ipf_input",
            "prototype": "",
            "backtrace": [
                "iptap_clone_create"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "iptap_ipf_output",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "iptap_ipf_output",
            "prototype": "",
            "backtrace": [
                "iptap_clone_create"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "iptap_ipf_unregister",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: ipf_remove (ipv4) for %s0 failed - %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: ipf_remove (ipv6) for %s0 failed - %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "iptap_detach",
            "prototype": "",
            "backtrace": [
                "iptap_clone_create"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pktap_inited == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "pktap_init",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "pktap.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pktap_init",
            "prototype": "",
            "backtrace": [
                "dlil_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "pktap_clone_destroy",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "pktap_clone_destroy",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pktap_tap_callback",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "pktap_tap_callback",
            "prototype": "",
            "backtrace": [
                "pktap_clone_create"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "pktap_if_output",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "pktap_if_output",
            "prototype": "",
            "backtrace": [
                "pktap_clone_create"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pktap_demux",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "pktap_demux",
            "prototype": "",
            "backtrace": [
                "pktap_clone_create"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pktap_add_proto",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "pktap_add_proto",
            "prototype": "",
            "backtrace": [
                "pktap_clone_create"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pktap_del_proto",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "pktap_del_proto",
            "prototype": "",
            "backtrace": [
                "pktap_clone_create"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: PKTP_CMD_FILTER_GET ifd_len %llu too small - error %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: PKTP_CMD_FILTER_GET copyout - error %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "pktap_getdrvspec",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: PKTP_CMD_FILTER_SET bad ifd_len %llu - error %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: copyin - error %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "pktap_setdrvspec",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pktap_detach",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "pktap_detach",
            "prototype": "",
            "backtrace": [
                "pktap_clone_create"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pktap_bpf_tap",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d unknown if_type %u for %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "pktap_bpf_tap",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pktap_output",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "pktap_output",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 6,
            "anchors": [
                {
                    "string": "pktap_input_packet",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d IN %s proto %u pid %d epid %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "pktap_input_packet",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 6,
            "anchors": [
                {
                    "string": "pktap_output_packet",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d OUT %s proto %u pid %d epid %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "pktap_output_packet",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "bpf_pkt->bpfp_header_length >= sizeof(struct pktap_header)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "extra_src_size <= sizeof(union pktap_header_extra)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "pktap_v2_hdr->pth_length + extra_src_size <= sizeof(struct pktap_buffer_v2_hdr_extra)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "pktap_v2_hdr->pth_length + extra_src_size <= bpf_pkt->bpfp_header_length",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "convert_to_pktap_header_to_v2",
            "prototype": "",
            "backtrace": [
                "bpf_tap_imp"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "droptap_inited == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "droptap_init",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "droptap.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "droptap_init",
            "prototype": "",
            "backtrace": [
                "dlil_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: ifnet_allocate_extended failed, error: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: ifnet_attach failed, error: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "droptap_clone_create",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "lr->lr_reqcnt >= 1",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "lr->lr_reqcnt != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "lr->lr_reqcnt == 1",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: lr=%p wraparound refcnt @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "iflr_addref",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ifnet_llreach_alloc",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: lr=%p negative reqcnt @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: Attempt to detach an unattached llreach lr=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ifnet_llreach_free",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ifp != NULL && iflri != NULL && (af == AF_INET || af == AF_INET6)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "ifnet_llreach_get_defrouter",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: lr=%p negative refcnt @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "iflr_remref",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: attached lr=%p is being freed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: lr %p cannot be freed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: non-zero refcount lr=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: non-zero reqcnt lr=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "iflr_remref",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: couldn't create flow event advisory thread @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "flowadv_init",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "flowadv.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "flowadv_init",
            "prototype": "",
            "backtrace": [
                "dlil_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "!fadv_active",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "flowadv_thread_cont",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.content-filter",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcpy"
                },
                {
                    "string": "%s:%d ctl_register failed: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: Can't create statistics report thread",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "cfil_stats_report_thread != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "cfil_init",
            "prototype": "",
            "backtrace": [
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "%s:%d CFIL: TCP (dir %d) - debug flow with port %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d already attached\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d cfil_info_attach_unit(%u) failed\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d so %llx filter_control_unit %u sockID %llu <%llx>\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "cfil_sock_attach",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 4,
            "anchors": [
                {
                    "string": "%s:%d CFIL: TCP(OUT) <so %llx> - filter state changed - dropped pre-existing flow\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d CFIL: TCP(OUT) <so %llx> - filter state changed - dropped pre-existing flow (old state 0x%x new state 0x%x)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "so %p SB_LOCK not set @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s sb_cfil_thread %p not NULL @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "cfil_sock_data_out",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d CFIL: TCP(IN) <so %llx> - filter state changed - dropped pre-existing flow\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d CFIL: TCP(IN) <so %llx> - filter state changed - dropped pre-existing flow (old state 0x%x new state 0x%x)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "cfil_sock_data_in",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "cfil_sock_is_closed",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "cfil_sock_is_closed",
            "prototype": "",
            "backtrace": [
                "soclose_locked"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "cfil_sock_notify_shutdown",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "cfil_sock_notify_shutdown",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "CFIL: SKIP CLOSE WAIT",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "cfil_sock_close_wait",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d so %llx waiting\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d so %llx timed out %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "cfil_sock_close_wait",
            "prototype": "",
            "backtrace": [
                "soclose_locked"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "cfil_sock_buf_update",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "cfil_sock_buf_update",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d CFIL: FILTER SHOW: Filter <unit %d, entry count %d> flags <%lx>:\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "cfil_filter_show",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d CFIL: FILTER SHOW:-DETACHING\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d CFIL: FILTER SHOW:-ACTIVE\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d CFIL: FILTER SHOW:-FLOW CONTROLLED\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "CFIL: FILTER SHOW:-DETACHED",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cfil_info_log"
                },
                {
                    "string": "CFIL: FILTER SHOW:-ATTACHED",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cfil_info_log"
                },
                {
                    "string": "%s:%d CFIL: FILTER SHOW:Filter - total entries shown: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "cfil_filter_show",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d CFIL: INFO SHOW:count %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "cfil_info_show",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "CFIL: INFO SHOW",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cfil_info_log"
                },
                {
                    "string": "%s:%d CFIL: INFO FLAG - DROP\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d CFIL: INFO FLAG - CLOSE_WAIT\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d CFIL: INFO FLAG - SOCK_CLOSED\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d CFIL: INFO FLAG - RETRY_INJECT_IN\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d CFIL: INFO FLAG - RETRY_INJECT_OUT\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cfil_info_log"
                },
                {
                    "string": "%s:%d CFIL: INFO FLAG - SHUT_WR\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cfil_info_log"
                },
                {
                    "string": "%s:%d CFIL: INFO FLAG - SHUT_RD\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cfil_info_log"
                },
                {
                    "string": "%s:%d CFIL: INFO SHOW:total cfil_info shown: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "cfil_info_show",
            "prototype": "",
            "backtrace": [
                "sysctl_cfil_sock_list"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "CFIL: flow ACTION timeout expired",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cfil_info_log"
                }
            ],
            "symbol": "cfil_info_action_timed_out",
            "prototype": "",
            "backtrace": [
                "cfil_dgram_gc_needed",
                "cfil_ctl_connect",
                "cfil_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d CFIL: queue threshold exceeded:mbuf max < count: %d bytes: %d > tail drop count < OUT: %d IN: %d > \n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "cfil_info_buffer_threshold_exceeded",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "CFIL: queue threshold exceeded",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cfil_info_log"
                },
                {
                    "string": "CFIL: UDP PER-FLOW GC NEEDED",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cfil_info_log"
                }
            ],
            "symbol": "cfil_dgram_gc_needed",
            "prototype": "",
            "backtrace": [
                "cfil_ctl_connect",
                "cfil_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d bad sc_unit %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d sc_unit %u in use\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "cfil_ctl_connect",
            "prototype": "",
            "backtrace": [
                "cfil_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "CFIL: UDP PER-FLOW GC PERFORM",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cfil_info_log"
                }
            ],
            "symbol": "cfil_dgram_gc_perform",
            "prototype": "",
            "backtrace": [
                "cfil_ctl_connect",
                "cfil_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d CFIL <%s>: <so %llx> - use count %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "cfil_sock_udp_unlink_flow",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "cfil_sock_udp_unlink_flow",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "CFIL: DGRAM DETACH ENTRY",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cfil_info_log"
                }
            ],
            "symbol": "cfil_dgram_detach_entry",
            "prototype": "",
            "backtrace": [
                "cfil_ctl_connect",
                "cfil_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d CFIL: DGRAM DETACH DB <so %llx>\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "cfil_dgram_detach_db",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "cfil_dgram_detach_db",
            "prototype": "",
            "backtrace": [
                "cfil_ctl_connect",
                "cfil_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "CFIL: FILTER DISCONNECTED",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cfil_info_log"
                },
                {
                    "string": "cfc->cf_sock_count == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "cfil_ctl_disconnect",
            "prototype": "",
            "backtrace": [
                "cfil_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d no socket for sock_id %llx gencnt %llx flowhash %x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "cfil_socket_from_sock_id",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "cfil_socket_from_sock_id",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "%s:%d so %llx %s dropped\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d pass %llu peek %llu\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d pass_offset %llu <= cfe_pass_offset %llu\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "CFIL: OUT - PASSED ALL - DETACH",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cfil_info_log"
                },
                {
                    "string": "CFIL: IN - PASSED ALL - DETACH",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cfil_info_log"
                },
                {
                    "string": "CFIL: WAKING",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cfil_info_log"
                },
                {
                    "string": "%s:%d CFIL: <so %llx, sockID %llu <%llx>> outgoing %d cfi_pending_first %llu cfi_pending_last %llu\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d CFIL: <so %llx, sockID %llu <%llx>>, cfi_pass_offset %llu\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "cfil_action_data_pass",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d CFIL: SERVICE CTL-Q: pass_offset %llu peeked %llu peek_offset %llu\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "copylen <= datalen",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s:%d CFIL: SERVICE CTL-Q PASSING: %llx first %llu peeked %llu pass %llu peek %lludatalen %u copylen %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d %llx first %llu peeked %llu pass %llu peek %lludatalen %u copylen %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "copyoffset < datalen",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s:%d CFIL: SERVICE CTL-Q PEEKING: %llx current %llu peeked %llu pass %llu peek %llu datalen %u copylen %u copyoffset %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d %llx first %llu peeked %llu pass %llu peek %lludatalen %u copylen %u copyoffset %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d cfil_service_pending_queue() error %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d first %llu peeked %llu pass %llu peek %llu\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d m_copym_mode() failed\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d mbuf_allocpacket() failed\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d CFIL: Failed to get audit token for <sockID %llu <%llx>> \n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "CFIL: SENDING DATA UP",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cfil_info_log"
                },
                {
                    "string": "%s:%d CFIL: VERDICT ACTION: so %llx sockID %llu <%llx> outgoing %d: mbuf %llx copyoffset %u copylen %u (%s)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "IP HDR",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "NO IP HDR",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d CFIL: Failed to sign data msg <sockID %llu <%llx>>\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "cfil_dispatch_data_event_sign",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d CFIL: SERVICE PENDING-Q: data %llx datalen %u passlen %llu curlen %llu\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "cfil_data_service_ctl_q",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "cfil_data_length(m, NULL, NULL) == len",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "cfil_queue_remove",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "cfq->q_start <= cfq->q_end",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "(MBUFQ_EMPTY(&cfq->q_mq) && cfq->q_start == cfq->q_end) || (!MBUFQ_EMPTY(&cfq->q_mq) && cfq->q_start != cfq->q_end)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s - mq %p is free at %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s - %p unsupported type %u @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s - %p m_length() %u != chainsize %lu @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s - %p queuesize %llu != offsetdiffs %llu @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "cfil_queue_verify",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d CFIL Preserve Connections - %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "cfil_update_behavior_flags",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "cfil_update_behavior_flags",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "%s:%d null mbuf\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d too short %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d bad version %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d bad type %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d bad length %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d bad len: %u for op %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d bad op %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d bad sock_id %llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d so %llx <id %llu> not attached\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "CFIL: RECEIVED MSG FROM FILTER",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cfil_info_log"
                },
                {
                    "string": "%s:%d so %llx no filter\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d so %llx attached not sent for %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "CFIL: RECEIVED CFM_OP_DATA_UPDATE",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cfil_info_log"
                },
                {
                    "string": "%s:%d CFIL: VERDICT RECEIVED: <so %llx sockID %llu <%llx>> <IN peek:%llu pass:%llu, OUT peek:%llu pass:%llu>\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "CFIL: RECEIVED CFM_OP_DROP",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cfil_info_log"
                },
                {
                    "string": "%s:%d CFIL: VERDICT DROP RECEIVED: <so %llx sockID %llu <%llx>> <IN peek:%llu pass:%llu, OUT peek:%llu pass:%llu>\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "cfil_ctl_send",
            "prototype": "",
            "backtrace": [
                "cfil_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "CFIL: VERDICT RECEIVED: BLESS",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cfil_info_log"
                }
            ],
            "symbol": "cfil_action_bless_client",
            "prototype": "",
            "backtrace": [
                "cfil_ctl_send",
                "cfil_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d CFIL: VERDICT RECEIVED - STATS FLOW INSERTED: <so %llx sockID %llu <%llx>> stats frequency %d msecs\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d CFIL: VERDICT RECEIVED - STATS FLOW DELETED: <so %llx sockID %llu <%llx>> stats frequency reset\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "cfil_info_stats_toggle",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "CFIL: DROP - DETACH",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cfil_info_log"
                }
            ],
            "symbol": "cfil_action_drop",
            "prototype": "",
            "backtrace": [
                "cfil_ctl_send",
                "cfil_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d len too small %lu\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d len does not match %lu\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d data not passed\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d CFIL: GET_SOCKET_INFO failed: bad sock_id %llu\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d CFIL: GET_SOCKET_INFO failed: so %llx not attached, cannot fetch info\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d CFIL: GET_SOCKET_INFO failed: so %llx NULL so_proto / pr_domain\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "cfil_ctl_getopt",
            "prototype": "",
            "backtrace": [
                "cfil_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d CFIL_OPT_NECP_CONTROL_UNIT len too small %lu\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d CFIL_OPT_NECP_CONTROL_UNIT already set %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d CFIL_OPT_PRESERVE_CONNECTIONS got %d (kcunit %d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "cfil_ctl_setopt",
            "prototype": "",
            "backtrace": [
                "cfil_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "cfil_info_alloc",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "cfil_info_alloc",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "cfil_info_attach_unit",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "cfil_info_attach_unit",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "cfe_buf->cfe_ctl_q.q_start >= cfe_buf->cfe_pending_q.q_end",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "cfe_buf->cfe_peek_offset >= cfe_buf->cfe_pass_offset",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "cfe_buf->cfe_ctl_q.q_start <= cfe_buf->cfe_peeked",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "cfil_entry_buf_verify",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "cfil_info_free",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "CFIL: FREEING CFIL_INFO",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cfil_info_log"
                }
            ],
            "symbol": "cfil_info_free",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d so %llx filter_control_unit %u kcunit %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d CFIL: Failed to get effective audit token for <sockID %llu <%llx>> \n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d CFIL: Failed to get real audit token for <sockID %llu <%llx>> \n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "CFIL: SENDING ATTACH UP",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cfil_info_log"
                },
                {
                    "string": "%s:%d CFIL: Failed to sign attached msg <sockID %llu <%llx>>\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "cfil_dispatch_attach_event_sign",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "cfil_dispatch_attach_event",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "%s:%d CFIL: QUEUEING DATA: <so %llx> %s: data %llx len %u flags 0x%x nextpkt %llx - cfi_pending_last %llu cfi_pending_mbcnt %u   cfi_pass_offset %llu\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d CFIL: QUEUEING DATA: <so %llx> %s: FAST PATH\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d so %llx outgoing %d datalen %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "cfil_update_entry_offsets",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "cfil_data_common",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d CFIL: IPHDR STRIPPING: <so %llx>: <hlen %d m_len %d>\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "cfil_strip_ip_header",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "hlen <= data_start->m_len",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "cfil_strip_ip_header",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d so %llx kcunit %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "CFIL: SENDING CLOSED UP",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cfil_info_log"
                },
                {
                    "string": "%s:%d CFIL: Failed to sign closed msg <sockID %llu <%llx>>\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "cfil_dispatch_closed_event_sign",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "cfil_dispatch_closed_event",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "cfil_acquire_sockbuf",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                },
                {
                    "string": "sb->sb_cfil_thread == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "cfil_acquire_sockbuf",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d CFIL: SERVICE INJECT-Q: <so %llx> outgoing %d queue len %llu\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d CFIL: SERVICE INJECT-Q: <so %llx> data %llx datalen %u (mbcnt %u)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "CFIL: Error: sosend_reinject() failed",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cfil_info_log"
                },
                {
                    "string": "%s:%d CFIL: sosend() failed %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d CFIL: SERVICE INJECT-Q: <so %llx> injected %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "CFIL: Marked previoulsy delayed socket as DEAD",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cfil_info_log"
                },
                {
                    "string": "CFIL: Handled previously delayed socket for TCP time wait",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cfil_info_log"
                }
            ],
            "symbol": "cfil_service_inject_queue",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s sb_cfil_thread %p not current %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s SB_LOCK not set on %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "cfil_release_sockbuf",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d so %llx disconnect already sent\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d so %llx control queue not empty\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "CFIL: OUT - SENDING DISCONNECT UP",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cfil_info_log"
                },
                {
                    "string": "CFIL: IN - SENDING DISCONNECT UP",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cfil_info_log"
                }
            ],
            "symbol": "cfil_dispatch_disconnect_event",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "CFIL: UDP PER-FLOW WAIT FOR FLOW TO FINISH",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cfil_info_log"
                },
                {
                    "string": "cfil_filters_udp_attached_per_flow",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "msleep"
                },
                {
                    "string": "CFIL: UDP PER-FLOW WAIT FOR FLOW DONE",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cfil_info_log"
                },
                {
                    "string": "CFIL: UDP PER-FLOW WAIT FOR FLOW TIMED OUT, FORCE DETACH",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cfil_info_log"
                }
            ],
            "symbol": "cfil_filters_udp_attached_per_flow",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d <%s>: <%s(%d) so %llx cfil %p, entry %p, sockID %llu <%llx> feat_ctxt_id <%llu> lport %d fport %d laddr %s faddr %s hash %X\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "cfil_hash_entry_log",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d <%s>: <%s so %llx cfil %p - flags 0x%x 0x%x, sockID %llu <%llx>> lport %d fport %d laddr %s faddr %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d <%s>: <%s so %llx - flags 0x%x 0x%x> lport %d fport %d laddr %s faddr %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "cfil_info_log",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 6,
            "anchors": [
                {
                    "string": "%s:%d CFIL: UDP no active filter\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d CFIL: UDP failed to get control unit\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d CFIL: UDP user space only\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d CFIL: <so %llx> NULL soflow_hash_entry\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d CFIL: <so %llx> NULL soflow_hash_entry db\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "CFIL: Got flow",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cfil_info_log"
                },
                {
                    "string": "CFIL: UDP DROP",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cfil_info_log"
                },
                {
                    "string": "%s:%d CFIL: UDP(%s) <so %llx> - filter state changed - dropped pre-existing flow (old state 0x%x new state 0x%x)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d CFIL: <so %llx> UDP (outgoing %d) - debug flow with port %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d CFIL: <so %llx> UDP so_gencnt %llx entry flowhash %x cfil %p sockID %llu <%llx>\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d CFIL: <so %llx> UDP cfil_info_attach_unit(%u) failed\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d CFIL: UDP <so %llx> filter_control_unit %u sockID %llu <%llx> attached\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d CFIL: UDP <so %llx> cfil_dispatch_attach_event failed <error %d>\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "cfil_sock_udp_handle_data",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "CFIL: UDP PER-FLOW NOTIFY_SHUTDOWN",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cfil_info_log"
                }
            ],
            "symbol": "cfil_sock_udp_notify_shutdown_per_flow",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "cfil_sock_udp_shutdown",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "cfil_sock_shutdown",
            "prototype": "",
            "backtrace": [
                "soshutdownlock"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "CFIL: UDP PER-FLOW IS_CLOSED",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cfil_info_log"
                }
            ],
            "symbol": "cfil_sock_udp_is_closed_per_flow",
            "prototype": "",
            "backtrace": [
                "cfil_sock_is_closed",
                "soclose_locked"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "cfil_sock_udp_buf_update_per_flow",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "cfil_sock_udp_buf_update_per_flow",
            "prototype": "",
            "backtrace": [
                "cfil_sock_buf_update"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "CFIL_STATS_REPORT",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "bsd_setthreadname"
                }
            ],
            "symbol": "cfil_stats_report_thread_func",
            "prototype": "",
            "backtrace": [
                "cfil_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d CFIL: STATS COLLECTION RUNNING\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d CFIL: STATS: no flow\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d CFIL: STATS REPORT - so %llx no filter\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d CFIL: STATS reporting for %d flows\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d CFIL: STATS: no buffer\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d CFIL: STATS REPORT - elapsed time - ts %llu %llu cur ts %llu %llu diff %llu %llu(usecs %llu) @freq %llu usecs sockID %llu <%llx>\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d CFIL: STATS REPORT - in %llu reported %llu\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d CFIL: STATS REPORT - out %llu reported %llu\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "CFIL: STATS COLLECTED",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "cfil_info_log"
                },
                {
                    "string": "%s:%d STATS (kcunit %d): msg size %lu - %lu %lu %lu\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d ctl_enqueuedata() failed:%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d CFIL: STATS REPORT:send msg to %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "cfil_stats_report",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d Inited client key\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "cfil_crypto_init_client",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "cfil_action_set_crypto_key",
            "prototype": "",
            "backtrace": [
                "cfil_ctl_send",
                "cfil_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d Signed data: datalen %lu\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d %s \t%s: %hhX %hhX %hhX %hhX %hhX %hhX %hhX %hhX %hhX %hhX %hhX %hhX %hhX %hhX %hhX %hhX %hhX %hhX %hhX %hhX %hhX %hhX %hhX %hhX %hhX %hhX %hhX %hhX %hhX %hhX %hhX %hhX\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Signature",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s:%d %s NE Filter crypto data:\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "flow_id",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "sock_id",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "direction",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "remote",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "socketProtocol",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "effective_pid",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "responsible_pid",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "effective_uuid",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "responsible_uuid",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "byte_count_in",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "byte_count_out",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "cfil_crypto_sign_data",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: couldn't create network work queue thread",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "nwk_wq_init",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "nwk_wq_init",
            "prototype": "",
            "backtrace": [
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nwk_wq_thread_func",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "msleep0"
                }
            ],
            "symbol": "nwk_wq_thread_func",
            "prototype": "",
            "backtrace": [
                "nwk_wq_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nwk_wq_thread_cont",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "lck_mtx_lock_slow"
                },
                {
                    "string": "TAILQ_EMPTY(&nwk_wq_head)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "TAILQ_FIRST(&temp_nwk_wq_head) != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "nwk_wq_thread_cont",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "restricted_port_init: bitmap allocation failed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "restricted_in_port.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "restricted_in_port_init",
            "prototype": "",
            "backtrace": [
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.private.network.restricted.port.control",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "current_thread_ro"
                },
                {
                    "string": "%s:%u sysctl net.restricted_port.verbose: %d -> %d)",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "sysctl_restricted_port_verbose",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.private.network.restricted.port.lights_out_management",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "entitlement restricted port %u for protocol %u via %s cannot be used by kernel",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "entitlement restricted port %u for protocol %u via %s cannot be used by process %s:%u -- IOTaskHasEntitlement(%s) failed",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "entitlement restricted port %u for protocol %u via %s can be used by process %s:%u",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "current_task_can_use_restricted_in_port",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.net.rvi_control",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcpy"
                },
                {
                    "string": "rvi_start failed: rvi_register_control failure",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "rvi_init",
            "prototype": "",
            "backtrace": [
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "rvi_ctl_connect",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: failure to create virtual interface %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: ifnet_allocate for %s%d failed - %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: ifnet_attach for %s%d failed - %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "rvi_ctl_connect",
            "prototype": "",
            "backtrace": [
                "rvi_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "rvi_set_bpf_tap",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: ifnet_softc is NULL for ifp %p",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "rvi_set_bpf_tap",
            "prototype": "",
            "backtrace": [
                "rvi_ctl_connect",
                "rvi_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "rvi_ctl_disconnect: received a disconnect notification without a cache entry @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "remote_vif.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "rvi_destroy_if",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: ifnet_detach for %s%d failed - %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "rvi_ctl_disconnect",
            "prototype": "",
            "backtrace": [
                "rvi_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "rvi_ctl_send",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "rvi_bpf_tap",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: mbuf_copydata failed %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s mbuf_pullup failed",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "rvi_ctl_send",
            "prototype": "",
            "backtrace": [
                "rvi_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "qlen(q) != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "_addq",
            "prototype": "",
            "backtrace": [
                "arp_llinfo_addq",
                "arp_lookup_ip"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "qlen(q) == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "_getq",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "n != NULL || (qlen(q) == 1 && m == MBUFQ_FIRST(head))",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "m == MBUFQ_FIRST(head)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "n != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "_getq_tail",
            "prototype": "",
            "backtrace": [
                "arp_lookup_ip"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "c == 0 || !MBUFQ_EMPTY(&freeq)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "c == 0 || !KPKTQ_EMPTY(&freeq)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "_flushq_flow",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "ifq->ifcq_sflags == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "ifclassq_setup",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "packets != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "MBUF_VALID_SC(sc) || sc == MBUF_SC_UNSPEC",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "ifclassq_get_len",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "IFCQ_TBR_IS_ENABLED(ifq)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "ifclassq_tbr_dequeue_common",
            "prototype": "",
            "backtrace": [
                "ifclassq_dequeue_common_default"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ptype == QP_PACKET",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "fq_alloc",
            "prototype": "",
            "backtrace": [
                "fq_if_hash_pkt"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "!fq->fq_in_dqlist",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "fq_empty(fq, ptype)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "!(fq->fq_flags & (FQF_NEW_FLOW | FQF_OLD_FLOW | FQF_EMPTY_FLOW))",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "fq_destroy",
            "prototype": "",
            "backtrace": [
                "fq_if_destroy_flow"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "!(*pkt_flags & PKTF_PRIV_GUARDED)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "fq->fq_group == fq_grp",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "fqs->fqs_ptype == pkt->pktsched_ptype",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "STAILQ_NEXT(fq, fq_actlink) == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "fq_detect_dequeue_stall",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:num: %d, scidx: %d, flow: 0x%x, iface: %s grp: %hhu",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "fq_addq",
            "prototype": "",
            "backtrace": [
                "fq_if_enqueue_classq"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "fq->fq_bytes >= plen",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "fq_getq_flow_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pkt->pktsched_pkt_mbuf == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "fq_getq_flow",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: dequeue num overflow, flow: 0x%x, iface: %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "fq_getq_flow",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kern_packet_finalize(ph2) == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "pktsched_clone_pkt",
            "prototype": "",
            "backtrace": [
                "nlc_enqueue",
                "netem_config"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "cnt == (uint32_t)pcnt",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "pktsched_free_pkt",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ifclassq_enable_pacing",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "ifcq_drr_max",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "buf[i] >= '0' && buf[i] <= '9'",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "pktsched_fq_init",
            "prototype": "",
            "backtrace": [
                "dlil_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "fq_if_enqueue_classq",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "pktsched_drop_pkt"
                }
            ],
            "symbol": "fq_if_enqueue_classq",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "fq_if_setup_ifclassq",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: error from fq_if_create_grp, failed to create a fq group: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "fq_if_setup_ifclassq",
            "prototype": "",
            "backtrace": [
                "pktsched_setup"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "!fq_empty(fq, fqs->fqs_ptype)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "fq->fq_flags & FQF_NEW_FLOW",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "fq_if_drop_packet",
            "prototype": "",
            "backtrace": [
                "fq_addq",
                "fq_if_enqueue_classq"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "fq_if_add_fcentry",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: num: %d, scidx: %d, flowsrc: %d, flow: 0x%x, iface: %s, B:%u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "fq_if_add_fcentry",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "fq_if_flow_feedback",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: num: %d, scidx: %d, flowsrc: %d, flow: 0x%x, iface: %s grp: %hhu, B:%u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "fq_if_flow_feedback",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "fqs != NULL && ifq->ifcq_type == PKTSCHEDT_FQ_CODEL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "fq_if_teardown_ifclassq",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "i <= flowstat_cnt",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "fq_if_getqstats_ifclassq",
            "prototype": "",
            "backtrace": [
                "ifclassq_getqstats",
                "ifioctl_qstats",
                "ifioctl"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "svc == MBUF_SC_UNSPEC",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "!TAILQ_EMPTY(grp_list)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "pri > 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "TAILQ_EMPTY(grp_list)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "fq_if_dequeue_classq_multi_common",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "pktlimit > 0 && bytelimit > 0 && top != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "(fq->fq_flags & (FQF_NEW_FLOW | FQF_OLD_FLOW)) == FQF_OLD_FLOW",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "top->cp_mbuf != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "fq_if_dequeue",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "fqs->fqs_empty_list_cnt == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "fq_if_purge_empty_flow_list",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "STAILQ_EMPTY(&fqs->fqs_fclist)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "LIST_EMPTY(&fqs->fqs_flows[i])",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "fq_if_purge",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "STAILQ_EMPTY(&fq_cl->fcl_new_flows)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "STAILQ_EMPTY(&fq_cl->fcl_old_flows)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "fq_if_purge_classq",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "pkt.pktsched_ptype == QP_INVALID",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "(fq->fq_flags & (FQF_NEW_FLOW | FQF_OLD_FLOW | FQF_EMPTY_FLOW))",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "fq_if_purge_flow",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "req->flow != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "FQ_IF_CLASSQ_IDLE(fq_cl)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "fq_if_request_classq",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ifp->if_mtu <= IF_MAXMTU",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "ifp->if_mtu <= UINT16_MAX",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "ifp->if_tso_v4_mtu <= UINT16_MAX",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "ifp->if_tso_v6_mtu <= UINT16_MAX",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "fq_if_calc_quantum",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "fq_cl->fcl_quantum == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "fq_if_create_grp",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "NETEM: %-30s ┌ begin %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "NETEM: %-30s | netem no traffic shapping %s on %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "NETEM: %-30s | netem create %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "NETEM: %-30s | netem disable %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "NETEM: %-30s | netem destroy %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "NETEM: %-30s └ ret %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "NETEM: %-30s | error: invalid scheduler model %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "NETEM: %-30s | error: corruption_p %d > %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "NETEM: %-30s | error: duplication_p %d > %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "NETEM: %-30s | error: duplication needs latency param\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "NETEM: %-30s | error: latency %d too big (> 1 sec)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "NETEM: %-30s | error: jitter %dms too big (latency %dms)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "NETEM: %-30s | error: loss params not all zero when p_gr_gl is zero\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "NETEM: %-30s | error: loss recovery %dms too big\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "NETEM: %-30s | error: loss params too big\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "NETEM: %-30s | error: reordering %d > %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "NETEM: %-30s | error: output interval %dms too big\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s can't create thread",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "NETEM: %-30s | %s set_params success\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "NETEM: %-30s | model %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "NETEM: %-30s | bandwidth %llu bps %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "no limit",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "NETEM: %-30s | corruption  %d%%\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "NETEM: %-30s | duplication  %d%%\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "NETEM: %-30s | latency_ms  %d jitter_ms %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "NETEM: %-30s | loss p_gr_gl  %d%%\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "NETEM: %-30s |      p_gr_bl  %d%%\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "NETEM: %-30s |      p_bl_gr  %d%%\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "NETEM: %-30s |      p_bl_br  %d%%\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "NETEM: %-30s |      p_br_bl  %d%%\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "NETEM: %-30s |      recovery_ms  %dms\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "NETEM: %-30s | reordering  %d%% %d ms behind\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "NETEM: %-30s | output ival  %d ms\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "Network link conditioner",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "netem_config",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "!(ne->netem_flags & NETEMF_RUNNING)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "netem_output_thread_func",
            "prototype": "",
            "backtrace": [
                "netem_config"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "NETEM: %-30s %s output thread terminated\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "netem_output_thread_cont",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "NETEM: %-30s ┌ begin\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "netem_dequeue_internal_locked",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "NETEM: %-30s | heap empty\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "NETEM: %-30s | TTS not yet reached: %llu now %llu\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "NETEM: %-30s └ end\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "netem_output_thread_cont",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "NETEM: %-30s ┌ begin p %p len %u, now %llu\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "NETEM: %-30s | zero-bw blocked\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "NETEM: %-30s | lost\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "NETEM: %-30s | dup'ed\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "NETEM: %-30s | heap_insert p %p err(%d), freeing pkt\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "NETEM: %-30s | %p enqueued TTS %llu\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "NETEM: %-30s └ %p end\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "NETEM: %-30s | corrupted\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "corruption_event",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "NETEM: %-30s | reorder %dms behind\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "NETEM: %-30s | total delay %dms\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "nlc_enqueue",
            "prototype": "",
            "backtrace": [
                "netem_config"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "%s: mbuf %p too short (%d) for IPv4 header @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "inet_cksum",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "inet_cksum",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: off (%d) >= len (%d) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "inet_cksum_buffer",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "inet_cksum_buffer",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "igmp_domifattach",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: allocated igmp_ifinfo for ifp %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "igmp_domifattach",
            "prototype": "",
            "backtrace": [
                "ifnet_attach"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "!(igi->igi_debug & IFD_ATTACHED)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "igmp_domifreattach",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: reattached igmp_ifinfo for ifp %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "igmp_domifreattach",
            "prototype": "",
            "backtrace": [
                "ifnet_attach"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "igmp_domifdetach",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: igmp_ifinfo not found for ifp %p(%s) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "igi_delete",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "igmp_domifdetach",
            "prototype": "",
            "backtrace": [
                "ifnet_detach"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: igi=%p negative refcnt @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: attached igi=%p is being freed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: ifp not NULL for igi=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: igi %p cannot be freed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: non-zero refcnt igi=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: freeing igmp_ifinfo for ifp %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "igi_remref",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: called w/mbuf(0x%llx,%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "igmp_input",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "igmp_input",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "igmp_init",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "igmp_init",
            "prototype": "",
            "backtrace": [
                "in_dinit"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "sysctl_igmp_default_version",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: changed igmp_default_version from %d to %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "sysctl_igmp_default_version",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: cancel v3 timers on ifp 0x%llx(%s)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "igmp_v3_cancel_link_timers",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "igmp_v3_cancel_link_timers",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "process v2 query %s on ifp 0x%llx(%s)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: ignore v2 query on IGIF_LOOPBACK ifp %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "igmp_input_v2_query",
            "prototype": "",
            "backtrace": [
                "igmp_input"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "igmp_v2_update_group",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "inet_ntop"
                }
            ],
            "symbol": "igmp_v2_update_group",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "process v3 %s query on ifp 0x%llx(%s)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "igmp_input_v3_group_query",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: ignore v3 query on IGIF_LOOPBACK ifp %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: ignore v3 query in v%d mode on ifp %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: process v3 general query on ifp %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: GS query throttled.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: v3 general query response scheduled in T+%d seconds on ifp %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: schedule response to SG query\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "igmp_input_v3_query",
            "prototype": "",
            "backtrace": [
                "igmp_input"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "report suppressed for %s on ifp 0x%llx(%s)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "process v2 report %s on ifp 0x%llx(%s)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "igmp_input_v2_report",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: process v2 report on ifp %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "igmp_input_v2_report",
            "prototype": "",
            "backtrace": [
                "igmp_input"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "inm->inm_igi->igi_version == IGMP_VERSION_3",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "igmp_v3_suppress_group_record",
            "prototype": "",
            "backtrace": [
                "igmp_input_v2_report",
                "igmp_input"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "igmp_v1v2_process_querier_timers",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: cancel v2 timer on 0x%llx(%s)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "igmp_v3_dispatch_general_query",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "igi == inm->inm_igi",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "igmp_timeout",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "inm->inm_st[1].iss_asm == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: m_adj(m, -ig)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: m_append() failed",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: m_get*() failed",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "igmp_v3_enqueue_group_record",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "igmp_v1v2_queue_report",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: v1 / v2 outbound queue full on %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "igmp_v1v2_queue_report",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "igmp_dispatch_queue",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "(m->m_flags & M_PKTHDR)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: igmpreclen is %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: ip_output(0x%llx) = %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: invalid length %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "igmp_dispatch_queue",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "igmp_flush_relq",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "inm->inm_in_nrele == true",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: flushing %llx on relq ifp %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "igmp_flush_relq",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "igmp_initial_join",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "igi->igi_rv > 1",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: T1->T0 for %s / %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: nothing to do \n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "inm->inm_debug & IFD_ATTACHED",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: T1 now MCAST_UNDEFINED for %s/%s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "igmp_change_state",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "cmd == SIOCDIFADDR",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "in_control",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "cmd == SIOCDIFADDR || cmd == SIOCSIFADDR || cmd == SIOCSIFNETMASK || cmd == SIOCSIFDSTADDR",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "Another thread is already attempting to delete IPv4 address: %s on interface %s. Go to sleep and check again after the operation is done",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "snprintf"
                }
            ],
            "symbol": "in_control",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: SIOCDIFADDR ifp=%s ifa_addr=%s ifa_dstaddr=%s (err=%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: error retrieving list of AF_INET addresses for ifp=%s (err=%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "in_purgeaddrs",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "in_domifattach",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "in_domifattach",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: failed to add membership to all-hosts multicast address on %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "in_ifinit",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "pinm != NULL || error != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "in_ifinit",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "attempt to remove wrong ia %p from hash table @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "in_iahash_remove",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "in_ifaddr_free",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "in_ifaddr_free",
            "prototype": "",
            "backtrace": [
                "in_ifaddr_alloc",
                "in_control"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: draining ARP entries\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "in_arpdrain",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "in_arpdrain",
            "prototype": "",
            "backtrace": [
                "ip_drain"
            ]
        },
        {
            "args": 5,
            "anchors": [
                {
                    "string": "%s: can't allocate llinfo for %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "arp_lookup_ip",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "pkt.cp_mbuf == packet",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "arp_lookup_ip",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s duplicate IP address %s sent from address %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "arp: %s on %s sent probe for %s, already on %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "arp: sending conflicting probe to %s on %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "arp: %s is on %s but got reply from %s on %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "arp: %s moved from %s to %s on %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "arp: %s attempts to modify permanent entry for %s on %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s: sending %u held packets\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "arp_ip_handle_input",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "qempty(&llinfo->la_holdq)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "ARP reply",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "lck_mtx_lock"
                },
                {
                    "string": "ARP announcement",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "lck_mtx_lock"
                },
                {
                    "string": "%s: %s%s for %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "arp_ip_handle_input",
            "prototype": "",
            "backtrace": [
                "ether_inet_arp_input",
                "ether_inet_input",
                "ether_attach_inet"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "host is not on local network",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "rt_unlock"
                },
                {
                    "string": "could not allocate llinfo",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "rt_unlock"
                },
                {
                    "string": "gateway route is not ours",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "inet_ntop"
                },
                {
                    "string": "%s: link#%d %s failed: %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "arp_lookup_route",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "arp_lookup_route",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "la->la_llreach != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "has alias(es) and hasn't been used in a while",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "net_uptime"
                },
                {
                    "string": "haven't heard from it in a while",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "net_uptime"
                },
                {
                    "string": "%s: ARP probe(s) needed for %s; %s [lastused %lld, lastrcvd %lld] secs ago\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "arp_llreach_reachable",
            "prototype": "",
            "backtrace": [
                "arp_lookup_ip"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: dropping packet due to maxhold_total\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "_m != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: dropping packet (scidx %u)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s: enqueued packet (scidx %u), qlen now %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "arp_llinfo_addq",
            "prototype": "",
            "backtrace": [
                "arp_lookup_ip"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: probe scheduled in T+%llus.%lluu\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "arp_sched_probe",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "arp_sched_probe",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: not rescheduling probe\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "arp_probe",
            "prototype": "",
            "backtrace": [
                "arp_sched_probe"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "arp_rtrequest",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "arp_rtrequest",
            "prototype": "",
            "backtrace": [
                "arp_ifinit"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "rt->rt_llinfo_purge == arp_llinfo_purge && la != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "arp_llinfo_purge",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "arp_llinfo_free",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "in_arp.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "la->la_rt->rt_llinfo == la",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "arp_llinfo_free",
            "prototype": "",
            "backtrace": [
                "arp_rtrequest",
                "arp_ifinit"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: timer scheduled in T+%llus.%lluu\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "arp_sched_timeout",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "arp_sched_timeout",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: not rescheduling timer\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "arp_timeout",
            "prototype": "",
            "backtrace": [
                "arp_sched_timeout"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "inm->inm_st[1].iss_rec == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "inm_clear_recorded",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "imf_purge",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "imf_purge",
            "prototype": "",
            "backtrace": [
                "imo_remref"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "inm_commit",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "inm_commit",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "inm_purge",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "inm_purge",
            "prototype": "",
            "backtrace": [
                "inm_remref"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "in_leavegroup",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "inet_ntop"
                },
                {
                    "string": "inm->inm_ifp == inm->inm_ifma->ifma_ifp",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "in_leavegroup",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: error copyin IP_ADD_MEMBERSHIP/IP_ADD_SOURCE_MEMBERSHIP %d err=%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "imo->imo_mfilters != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: new join w/o source\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "inp_join_group",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: opt=%d is_final=0\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "inm == imo->imo_membership[idx]",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "inp_leave_group",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: inm=%p negative reqcnt @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: Attempt to detach an unattached record inm=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: inm %p is already in trash list @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "in_multi_detach",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: inm=%p negative/missing refcnt @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "inm_remref",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: attached inm=%p is being freed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: ifma not NULL for inm=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: inm %p cannot be freed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: non-zero refcount inm=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: non-zero reqcnt inm=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "inm_remref",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: --- begin inm 0x%llx ---\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "inm_print",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "igi 0x%llx nsrc %lu sctimer %u scrv %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: --- end inm 0x%llx ---\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "inm_print",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "inm_get_source",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "inm_reap",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "inm_merge",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: in_getmulti() failure\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "ifma->ifma_addr->sa_family == AF_INET",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "inm->inm_ifma == ifma",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "in_hosteq(inm->inm_addr, *group)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "in_joingroup",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: Attempt to attach an already attached inm=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: Attempt to reattach a detached inm=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "inm->inm_reqcnt == 1",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "in_multi_attach",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: inm %p has no debug structure @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "inm_trace",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "inm_trace",
            "prototype": "",
            "backtrace": [
                "in_joingroup"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "imf_rollback",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "imf_rollback",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "imf_reap",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "imf_reap",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: can't find ifp for addr=%s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "inp_set_multicast_if",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "inp_set_multicast_if",
            "prototype": "",
            "backtrace": [
                "inp_setmoptions",
                "ip_ctloutput"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "!inpcb_initialized",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "unable to alloc the inpcb thread call @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "in_pcbinit",
            "prototype": "",
            "backtrace": [
                "socketinit",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: ipi %p already in the list @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "in_pcbinfo_attach",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "in_pcbinfo_attach",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "[%u %s:%u %s:%u]",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "inp_snprintf_tuple",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: insufficient space to align inp_stat @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: insufficient space to align inp_cstat @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: insufficient space to align inp_wstat @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: insufficient space to align inp_Wstat @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: insufficient space to align inp_btstat @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "in_pcballoc",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: so %p [%d,%d] usecount %d lockhistory %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: inp %p invalid wantcnt %d, so %p [%d,%d] usecount %d retaincnt %d state 0x%x flags 0x%x lockhistory %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: inp %p invalid wantcnt %d no socket @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: so=%p head still exist @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "in_pcbdispose",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "phd != NULL && inp->inp_lport > 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "inp->inp_pcbinfo->ipi_twcount != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "!(inp->inp_flags2 & INP2_IN_FCTREE)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "in_pcbremlists",
            "prototype": "",
            "backtrace": [
                "in_pcbdispose"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: pcb=%p so=%p usecount is negative @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: pcb=%p release with zero count @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: RELEASE pcb=%p so=%p usecount is negative @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: so=%p not a valid state =%x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "in_pcb_checkstate",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "inp_route_copyin",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "inp_route_copyin",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "RB_INSERT(inp_fc_tree, &inp_fc_tree, inp) == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "inp_calc_flowhash",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "tmp_inp == inp",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "inp_set_fc_state",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pid %d (%s) is unable to receive packets on %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "_inp_restricted_recv %s:%d not allowed on management interface %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "inp_restricted_recv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pid %d (%s) is unable to transmit packets on %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "_inp_restricted_send %s:%d not allowed on management interface %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "inp_restricted_send",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "inpcb_timeout_run >= 0 && inpcb_timeout_run < 2",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "inpcb_timeout",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "proc != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "in_pcbladdr",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "NOACCESS",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "inp_update_cellular_policy",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "inp_update_cellular_policy",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "WANTED",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "UNWANTED",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "inp_update_necp_want_app_policy",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "inp_update_necp_want_app_policy",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 4,
            "anchors": [
                {
                    "string": "inpcb_get_ports_used",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "inpcb_get_ports_used",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "throttle[%d]: so 0x%llx [%d,%d] %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "SUSPENDED",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "RESUMED",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "inpcb_count_opportunistic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: sosetdefunct() error %d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "socket_lock"
                },
                {
                    "string": "shutdown_sockets_on_interface_proc_callout",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "shutdown_sockets_on_interface_proc_callout",
            "prototype": "",
            "backtrace": [
                "if_low_power_evhdlr_callback",
                "dlil_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "inetdomain == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: failed to register PF_INET protocol: %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "in_dinit",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "in_proto.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "in_dinit",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "in_validate",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "in_validate",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "in_rtqdrain",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "in_rtqdrain",
            "prototype": "",
            "backtrace": [
                "ip_drain"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "head != inet_rt_table || *head == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "in_inithead",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "in_rmx.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "in_rtqkill",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "in_deleteroute",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "in_deleteroute",
            "prototype": "",
            "backtrace": [
                "in_inithead"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "in_ifadownkill",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "in_ifadownkill",
            "prototype": "",
            "backtrace": [
                "in_ifadown",
                "rip_ctlinput"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "SO_VALID_TC(optval)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "throttle[%d]: so 0x%llx [%d,%d] opportunistic %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "so_set_traffic_class",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(SOCK_CHECK_DOM(so, PF_INET) || SOCK_CHECK_DOM(so, PF_INET6)) && SOCK_CHECK_TYPE(so, SOCK_STREAM) && SOCK_CHECK_PROTO(so, IPPROTO_TCP)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "throttle[%d]: so 0x%llx [%d,%d] TCP %s send; %s recv\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "set_tcp_stream_priority",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "SO_VALID_TC(sotc)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "MBUF_VALID_SC(msc)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "set_packet_service_class",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "invalid QoS marking type @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "in_tclass.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s qos_allowed %d sotc %u netsvctype %u dscp %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s set msc %u for dscp %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "set_packet_qos",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "netsvctype_dscp_map != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "set_netsvctype_dscp_map",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "UNKNOWN_DUMMYNET_EVENT",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "dummynet_event_enqueue_nwk_wq_entry",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "dummynet: -- unknown option %d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "dummynet: no memory for new pipe\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "dummynet: ++ ref to pipe %d from fs %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "ip_dn_ctl",
            "prototype": "",
            "backtrace": [
                "rip_ctloutput",
                "icmp_dgram_ctloutput"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "\ndummynet: net.inet.ip.dummynet.red_lookup_depth must be > 0\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "dummynet: sorry, cannot allocate red lookup table\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "set_fs_parms",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "dummynet: heap_init, resize %d failed\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "heap_insert",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "dummynet_io m: 0x%llx pipe: %d dir: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "dummynet: no pipe %d for queue %d, drop pkt\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "dummynet: ++ ouch! not eligible but empty scheduler!\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "dummynet: OUCH! pipe should have been idle!\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "dummynet: waking up pipe %d at %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "dummynet: sorry, cannot allocate queue for new flow\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "\ndummynet: %d q: %2u ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "dummynet: avg: %u ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "dummynet: - drop",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "dummynet: - red drop",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "dummynet_io",
            "prototype": "",
            "backtrace": [
                "rip_ctloutput",
                "icmp_dgram_ctloutput"
            ]
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "dummynet: ready_event pipe is gone\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "heap_insert"
                }
            ],
            "symbol": "ready_event",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "dummynet: warning, extract from empty heap 0x%llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "dummynet: heap_extract from middle not supported on this heap!!! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "dummynet: heap_extract, father %d out of bound 0..%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "dummynet: heap_extract @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "heap_extract_0",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "dummynet: pipe %d ready from %s --\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "ready_event_wfq",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "dummynet: bad ready_event_wfq for pipe %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "dummynet",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "dummynet_send m: 0x%llx dn_dir: %d dn_flags: 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "dummynet: bad switch %d!\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "dummynet_send",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "dummynet_event",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "eventhandler_find_list"
                },
                {
                    "string": "eventhandler_invoke(\"dummynet_event\")",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "dummynet_event_callback",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "(u_int)type <= ICMP_MAXTYPE",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "code <= UINT8_MAX",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "icmp_error",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: redirect dst %s to %s from %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "icmp_input",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "icmp_input",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "icmp_dgram_attach @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ip_icmp.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "icmp_dgram_attach",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: Unable to find [PF_INET,IPPROTO_RAW,SOCK_RAW] @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ip_init",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "dp == inetdomain && dp->dom_family == PF_INET",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "ip_checkinterface",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "inaddr_nhash",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "ip_moptions",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_ext"
                }
            ],
            "symbol": "ip_init",
            "prototype": "",
            "backtrace": [
                "in_dinit"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ip_input",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ip_input",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: failed to initialise lo0's address, error=%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "ip_init_delayed",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "ip_init_delayed",
            "prototype": "",
            "backtrace": [
                "ip_init",
                "in_dinit"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ip_input_first_pass",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ip_input_process_list",
            "prototype": "",
            "backtrace": [
                "ip_proto_input",
                "in_dinit"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "attempted source route from %s to %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "ip_dooptions",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ip_fwd_route_copyout",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ip_fwd_route_copyin",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ip_forward",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "sysctl_ip_checkinterface",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: ip_checkinterface is now %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "sysctl_ip_checkinterface",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ip_output: Invalid policy found. %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "ip4_output (ipsec): error code %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: can't update route after IPsec processing\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "interface_mtu != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s->%s ifscope %d->%d ifa_if %s ro_if %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s->%s ifscope %d->%d ifa_if %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s->%s ifscope %d ifa_if %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s->%s ifscope %d ro_if %s != ifa_if %s (cached route cleared)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s->%s ifscope %d ro_if %s (no ifa_if found)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s->%s ifscope %d (neither ro_if/ifa_if found)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "ip_output_list",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "%s: mbuf %p pkt len (%u) < hoff+ip_hdr (%u+%u)\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: mbuf %p pkt too short (%d) for IP header (%u), hoff %u @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: mbuf 0x%llx proto %d IP len %d (%x) [swapped %d (%x)] doesn't match actual packet length; %d is used instead\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: mlen %u - hoff %u > 65535 @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "_hlen == sizeof(*ip)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "in_finalize_cksum",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: imo %p negative refcnt @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: imo %p cannot be freed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "imo_remref",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: imo %p has no debug structure @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "imo_trace",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "imo_trace",
            "prototype": "",
            "backtrace": [
                "ip_allocmoptions"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ripcb",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "lck_grp_init_flags"
                }
            ],
            "symbol": "rip_init",
            "prototype": "",
            "backtrace": [
                "in_dinit"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "%s in_pcbladdr(%p) error %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "rip_output",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "rip_output",
            "prototype": "",
            "backtrace": [
                "rip_send",
                "icmp_dgram_send"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "rip_unlock: bad refoucnt so=%p val=%x lrh= %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "rip_unlock",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "rip_attach @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "rip_attach",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "oldest_cache != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "tcp_getcache_with_lock",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s could not allocate cache",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "tcp_getcache_with_lock",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "__tcp_heuristic_tfo_middlebox_common",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s disable TFO until %u now %u on %lx\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__tcp_heuristic_tfo_middlebox_common",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "tcp_heuristic_ecn_aggressive_common",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s disable ECN until %u now %u on %lx\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "tcp_heuristic_ecn_aggressive_common",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "oldest_heur != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "tcp_getheuristic_with_lock",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s could not allocate heuristic",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "tcp_getheuristic_with_lock",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "sysctl_cleartfo",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s could not parse int: %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "sysctl_cleartfo",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IPv6 bad tcp checksum",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_drop_pkt"
                },
                {
                    "string": "src IPv6 address unspecified",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_drop_pkt"
                },
                {
                    "string": "IPv4 bad tcp checksum",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_drop_pkt"
                },
                {
                    "string": "bad tcp offset",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_drop_pkt"
                },
                {
                    "string": "drop SYN FIN",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_drop_pkt"
                },
                {
                    "string": "Connection attempt to TCP %s:%d from %s:%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "Connection attempt to TCP %s:%d from %s:%d flags:0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "Stealth Mode connection attempt to TCP %s:%d from %s:%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "blackhole 1 syn for closed port",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_drop_pkt"
                },
                {
                    "string": "blackhole 2 closed port",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_drop_pkt"
                },
                {
                    "string": "blackhole closed port",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_drop_pkt"
                },
                {
                    "string": "closed port",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_drop_pkt"
                },
                {
                    "string": "inp_socket NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_drop_pkt"
                },
                {
                    "string": "inp state WNT_STOPUSING",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_drop_pkt"
                },
                {
                    "string": "tp is NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_drop_pkt"
                },
                {
                    "string": "tp state TCPS_CLOSED",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_drop_pcb"
                },
                {
                    "string": "rfc5961 TH_ACCEPT == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_drop_pcb"
                },
                {
                    "string": "closing a listening socket",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_drop_pcb"
                },
                {
                    "string": "ignore SYN with RST",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_drop_pcb"
                },
                {
                    "string": "ignore RST",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_drop_pcb"
                },
                {
                    "string": "bad SYN with ACK",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_drop_pcb"
                },
                {
                    "string": "bad SYN",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_drop_pcb"
                },
                {
                    "string": "bad tuple same port",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_drop_pcb"
                },
                {
                    "string": "bad tuple same IPv4 address",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_drop_pcb"
                },
                {
                    "string": "mbuf M_BCAST | M_MCAST",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_drop_pcb"
                },
                {
                    "string": "IN6_IS_ADDR_MULTICAST",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_drop_pcb"
                },
                {
                    "string": "multicast or broadcast address",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_drop_pcb"
                },
                {
                    "string": " listen drop",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_drop_pcb"
                },
                {
                    "string": " in_pcbinshash failed",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_drop_pcb"
                },
                {
                    "string": "tcp_input: could not copy policy\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": " cfil_sock_attach failed",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_drop_pcb"
                },
                {
                    "string": "recwin_conn < INT32_MAX && recwin_conn > INT32_MIN",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": " LISTEN in6_pcbconnect failed",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_drop_pcb"
                },
                {
                    "string": " LISTEN in_pcbconnect failed",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_drop_pcb"
                },
                {
                    "string": "connect incoming",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_connection"
                },
                {
                    "string": "SYN_RECEIVED bad ACK",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_drop_pcb"
                },
                {
                    "string": "SYN_SENT bad ACK",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_drop_pcb"
                },
                {
                    "string": "SYN_SENT got RST",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_drop_pcb"
                },
                {
                    "string": "SYN_SENT no SYN",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_drop_pcb"
                },
                {
                    "string": "ESTABLISHED rfc5961 challenge ACK",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_drop_pcb"
                },
                {
                    "string": "SYN_RECEIVED bad SEQ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_drop_pcb"
                },
                {
                    "string": "SS_NOFDREF",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_drop_pcb"
                },
                {
                    "string": "SOF_MP_SUBFLOW SS_NOFDREF",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_drop_pcb"
                },
                {
                    "string": "SOF_DEFUNCT",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_drop_pcb"
                },
                {
                    "string": "SS_CANTRCVMORE",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_drop_pcb"
                },
                {
                    "string": "rfc5961 bad SYN rate limited",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_drop_pcb"
                },
                {
                    "string": "rfc5961 bad SYN challenge ack",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_drop_pcb"
                },
                {
                    "string": "LIST_EMPTY(&tp->t_segq)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "rfc5961 rcvacktoomuch",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_drop_pcb"
                },
                {
                    "string": "rfc5961 bad ACK",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_drop_pcb"
                },
                {
                    "string": "INPCB_STATE_DEAD",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_drop_pcb"
                },
                {
                    "string": "17 {curProtocol: 100, prevProtocol: 80, localPort: %hu, remotePort: %hu, tcpSeq: %u, tcpAck: %u, tcpLen: %hu, tcpFlags: 0x%02x, pid: %hu, logSeqn: %hhu}",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "TE_SENDIPECT flag is set but TCP_L4S_ENABLED is not",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "tcp_input",
            "prototype": "",
            "backtrace": [
                "tcp6_input"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "len <= TFO_COOKIE_LEN_MAX",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "tcp_tfo_synack",
            "prototype": "",
            "backtrace": [
                "tcp_input",
                "tcp6_input"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "tcp_pulloutofband @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "tcp_input.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "tcp_pulloutofband",
            "prototype": "",
            "backtrace": [
                "tcp_input",
                "tcp6_input"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: rtt is %d - maxing it at 4 x MSL\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_message"
                }
            ],
            "symbol": "tcp_xmit_timer",
            "prototype": "",
            "backtrace": [
                "tcp_compute_rtt"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "tp->sackhint.sack_bytes_acked >= 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "tp->sackhint.sack_bytes_rexmit >= 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "flight_size (%d) can't be negative (snd_nxt:%u snd_max:%u, snd_una:%u, sacked:%u lost:%u retransmitted:%u)",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "tcp_flight_size",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "no source address silently ignored",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_output"
                },
                {
                    "string": "recwin_announced < INT32_MAX && recwin_announced > INT32_MIN",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "sackoptlen < UINT8_MAX",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "nsack == 0 || tp->rcv_numsacks >= nsack",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "(u_char *)lp - opt <= MAX_TCPOPTLEN",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "ECN flags (0x%x) not set correctly @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "tcphdr too big @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "error ENOBUFS silently handled",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_output"
                },
                {
                    "string": "error EMSGSIZE silently handled",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_output"
                },
                {
                    "string": "soft error %d silently handled",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_output"
                },
                {
                    "string": "error %d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_output"
                },
                {
                    "string": "not enough space to add any AccECN option",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_message"
                },
                {
                    "string": "add empty AccECN option, optlen=%u",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_message"
                },
                {
                    "string": "add single counter for AccECN option, optlen=%u",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_message"
                },
                {
                    "string": "add 2 counters for AccECN option, optlen=%u",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_message"
                },
                {
                    "string": "add all 3 counters for AccECN option, optlen=%u",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_message"
                },
                {
                    "string": "%s - %lx: snd_nxt is %u and snd_una is %u, cnt %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: offset is negative! len %d off %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "tcp_output",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "flow controlled",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_output"
                },
                {
                    "string": "flow suspended",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_output"
                }
            ],
            "symbol": "tcp_ip_output",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "num_sack_blks <= (TCP_MAX_SACK + 1)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "tcp_sack_doack",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: Computed sack hole not the same as cached value\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "tcp_sack_output",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: Computed sack_bytes_retransmitted (%d) not the same as cached value (%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "tcp_sack_output",
            "prototype": "",
            "backtrace": [
                "tcp_output"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "SEQ_GEQ(snd_fack, s->rxmit)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "tcp_sack_detect_reordering",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "tcppcb",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "lck_grp_init_flags"
                },
                {
                    "string": "WARNING: TCB hash size not a power of 2, scaled from %d to %d.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "tcp_init @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "tcptimerlist",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "lck_grp_init_flags"
                },
                {
                    "string": "com.apple.xnu.tcp",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "os_log_create"
                },
                {
                    "string": "MPKL_CREATE_LOGOBJECT failed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "tcp_log",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "tcp_init: set tcp_log_enable_flags to 0x%x",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "tcp_init",
            "prototype": "",
            "backtrace": [
                "in_dinit"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "(MHLEN - max_linkhdr) >= (sizeof(*ip6) + sizeof(*nth))",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "(MHLEN - max_linkhdr) >= (sizeof(*ip) + sizeof(*nth))",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "tcp_respond",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "tcp_lock: so=%p NO PCB! lr=%p lrh= %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "tcp_lock: so=%p so_pcb=%p lr=%p ref=%x lrh= %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "tcp_lock",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "tcp_unlock: so=%p usecount=%x lrh= %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "tcp_unlock: so=%p NO PCB usecount=%x lr=%p lrh= %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "tcp_unlock",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "tcp_getlock: so=%p usecount=%x lrh= %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "tcp_getlock: so=%p NULL so_pcb %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "tcp_getlock",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "tcp_rxtseg_insert",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_message"
                },
                {
                    "string": "removed rxseg list overflow %u:%u ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_message"
                }
            ],
            "symbol": "tcp_rxtseg_insert",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "tcp_notify_kao_timeout",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: dropped lport %u fport %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "tcp_notify_kao_timeout",
            "prototype": "",
            "backtrace": [
                "ifnet_notify_tcp_keepalive_offload_timeout"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "SLIST_EMPTY(&tp->t_notify_ack)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "tcp_add_notify_ack_marker",
            "prototype": "",
            "backtrace": [
                "tcp_ctloutput"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "skip ifp no fsw",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_kern_nexus_flow_config"
                },
                {
                    "string": "add err %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_fsw_flow"
                }
            ],
            "symbol": "tcp_add_fsw_flow",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "err == 0 || err == ENOENT || err == ENXIO",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "tcp_del_fsw_flow",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_fsw_flow"
                },
                {
                    "string": "del err %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_fsw_flow"
                }
            ],
            "symbol": "tcp_del_fsw_flow",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "tp != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "tcp_notify",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "tp->t_pmtud_saved_maxopd > 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "tcp_pmtud_revert_segment_size",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "FIN wait timeout drop",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_drop_pcb"
                },
                {
                    "string": "retransmission timeout drop",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_drop_pcb"
                },
                {
                    "string": "persist timeout drop",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_drop_pcb"
                },
                {
                    "string": "keep alive timeout drop",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_drop_pcb"
                },
                {
                    "string": "SACK_ENABLED(tp)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: tcp_output() returned %u with retransmission timer disabled for %u > %u in state %d, reset timer to %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "tcp_timers",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "tcp_garbage_collect",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: Still inside %d usecount %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "tcp_garbage_collect",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "kern.skywalk.stats.flow",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kernel_sysctlbyname"
                },
                {
                    "string": "kernel_sysctlbyname err %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "kernel_sysctlbyname invalid len %zu\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "tcp_fill_info_for_info_tuple",
            "prototype": "",
            "backtrace": [
                "tcp_sysctl_info"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: so %p inp %p ifp NULL @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: so %p inp %p ifp %p if_tcp_kao_cnt == 0 @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "tcp_clear_keep_alive_offload",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "connect outgoing",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_connection"
                }
            ],
            "symbol": "tcp_usr_connect_common",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "tcp_connect: inp=0x%llx err=EADDRINUSE\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "tcp_connect",
            "prototype": "",
            "backtrace": [
                "tcp_usr_connect_common"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "!(so->so_flags & SOF_MP_SUBFLOW) || (so->so_snd.sb_flags & SB_NOCOMPRESS)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "tcp_usr_send",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "tp->t_ccstate->cub_origin_point > 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "tcp_cubic_congestion_avd",
            "prototype": "",
            "backtrace": [
                "tcp_cubic_ack_rcvd"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "is_incr == false",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "update_cwnd",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "tcp_rack_update_segment_acked",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_message"
                },
                {
                    "string": "Spurious inference as either tsecr (%u) doesn't lie between xmit_ts(%u) and now (%u) OR the rtt (%u) is less than base-rtt (%u). end_seq is:%u",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_message"
                }
            ],
            "symbol": "tcp_rack_update_segment_acked",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "outgoing ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_pkt_addresses"
                },
                {
                    "string": "incoming ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tcp_log_pkt_addresses"
                },
                {
                    "string": "tcp drop %s[%s:%u<->%s:%u] interface: %s (skipped: %lu)\nso_gencnt: %llu t_state: %s process: %s:%u t_state: %s so_error: %d reason: %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "tcp_log_drop_pcb",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "outgoing",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "tcp control %s %s%s%s%s[%s:%u<->%s:%u] interface: %s (skipped: %lu)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "tcp control %s %s%s%s%s[%s:%u<->%s:%u] interface: %s (skipped: %lu)\nso_gencnt: %llu t_state: %s process: %s:%u SYN in/out: %u/%u ",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "tcp_log_th_flags",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.network.tcp_ccdebug",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcpy"
                },
                {
                    "string": "failed to register tcp_cc debug control",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "tcp_ccdbg_control_register",
            "prototype": "",
            "backtrace": [
                "tcp_init",
                "in_dinit"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "failed to disconnect tcp_cc debug control",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "tcp_ccdbg_control_disconnect",
            "prototype": "",
            "backtrace": [
                "tcp_ccdbg_control_register",
                "tcp_init",
                "in_dinit"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "udp_log",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "udppcb",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "lck_grp_init_flags"
                },
                {
                    "string": "udp_init: set udp_log_enable_flags to 0x%x",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "udp_init",
            "prototype": "",
            "backtrace": [
                "in_dinit"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "%s: bad so back ptr inp=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "udp_input",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Stealth Mode connection attempt to UDP %s:%d from %s:%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "inet_ntop"
                }
            ],
            "symbol": "udp_input",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 4,
            "anchors": [
                {
                    "string": "outif == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "inp->inp_boundifp != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "udp_output",
            "prototype": "",
            "backtrace": [
                "udp_send"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "udp_abort",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "udp_abort",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s so=%p inp=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "udp_attach",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "udp_attach",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "udp_detach",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "udp_detach",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "udp_unlock",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "udp_unlock",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: so=%p NULL so_pcb lrh= %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "udp_getlock",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "udp_getlock",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s[%d, %s]: defuncting so 0x%llu drop multicast memberships",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "udp_defunct",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "udp_defunct",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ENOBUFS in in_gif_output %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "in_gif_output",
            "prototype": "",
            "backtrace": [
                "gif_output",
                "gif_clone_create",
                "gif_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "NULL pointer passed to ip_ecn_egress @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ip_ecn_egress",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "NULL pointer passed to ip6_ecn_ingress @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ipsec6_encapsulate",
            "prototype": "",
            "backtrace": [
                "ipsec6_output_tunnel_internal"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "NULL pointer passed to ip46_ecn_egress @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ip46_ecn_egress",
            "prototype": "",
            "backtrace": [
                "esp6_input_extended"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "NULL pointer passed to ip64_ecn_ingress @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ipsec64_encapsulate",
            "prototype": "",
            "backtrace": [
                "ipsec6_output_tunnel_internal"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "NULL pointer passed to ip64_ecn_egress @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ip64_ecn_egress",
            "prototype": "",
            "backtrace": [
                "esp4_input_extended"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kipf_ref overflow @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ipf_ref",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kipf_ref underflow @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ipf_unref",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "g_tcp_protosw != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "g_udp_protosw != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "g_tcp6_protosw != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "g_udp6_protosw != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "com.apple.flow-divert",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcpy"
                },
                {
                    "string": "(%u): flow_divert_kctl_init - ctl_register failed: %d\n\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "flow_divert_init",
            "prototype": "",
            "backtrace": [
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "flow divert group %u is disconnecting, but no groups are active (active count = %u) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "flow divert group %u is disconnecting, but groups array is NULL @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "group with unit %d (%p) != unit info (%p) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "flow divert group %u is disconnecting, but in-process group list is empty @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "(%u): disconnecting group %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "flow_divert_kctl_disconnect",
            "prototype": "",
            "backtrace": [
                "flow_divert_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: mppi %p already in the list @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "mp_pcbinfo_attach",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "mp_pcb.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "mp_pcbinfo_attach",
            "prototype": "",
            "backtrace": [
                "mptcp_init"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mpsotomppcb(so) == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "mp_pcballoc",
            "prototype": "",
            "backtrace": [
                "mptcp_usr_attach"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "mpp->mpp_state == MPPCB_STATE_DEAD",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "mppi->mppi_count != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "mptcp_pcbdispose",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "mpp->mpp_inside == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "mpp->mpp_socket != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "mpp->mpp_socket->so_usecount == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: No more MPTCP-flows, but cell icon counter is %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mptcp_pcbdispose",
            "prototype": "",
            "backtrace": [
                "mptcp_gc",
                "mptcp_init"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mbuf invalid: %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "mptcp.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "iter == NULL || iter->m_flags & M_PKTHDR",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "mptcp_input",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(mp_tp->mpt_rcvnxt - mb_dsn) <= INT_MAX",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "mb_datalen >= 0 && mb_datalen <= USHRT_MAX",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s - %lx: dropping dsn %u dlen %u rcvnxt %u rcvwnd %u todrop %lld\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mptcp_input",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "!(mpte->mpte_mppcb->mpp_flags & MPP_WUPCALL)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "mptcp_output",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: Error = %d mpts_flags %#x\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mptcp_output",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mptcp_update_rcv_state_meat",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: Infinite Mapping.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: Bad checksum %x \n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mptcp_update_rcv_state_meat",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mpp->mpp_flags & flag",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "mptcp_handle_deferred_upcalls",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ifindex != IFSCOPE_NONE",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "mptcp_session_necp_cb",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "slot_index >= 0 && slot_index < (int)mpte->mpte_itfinfo_size",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s - %lx: action: %u ifindex %u delegated to %u usecount %u mpt_flags %#x state %u v4 %u v6 %u nat64 %u power %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: malloc failed for %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mptcp_session_necp_cb",
            "prototype": "",
            "backtrace": [
                "mptcp_ctloutput"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "real_len >= 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "mptcp_validate_csum",
            "prototype": "",
            "backtrace": [
                "mptcp_subflow_soreceive"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mpp != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "mpp->mpp_pcbe == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "mptcp_session_create",
            "prototype": "",
            "backtrace": [
                "mp_pcballoc",
                "mptcp_usr_attach"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "handover",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "pure-handover",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "j < NAT64_MAX_NUM_PREFIXES",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s - %lx: %s: cell %u wifi-state %d flags %#x rxt %u first-party %u sb_cc %u ifindex %u this %u rtt %u rttvar %u rto %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: target-based: %llu now %llu wifi quality %d cell %u sostat %#x mpts_flags %#x tcp-state %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: no NAT64-prefix on itf %s, error %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: cannot synthesize this addr\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: asked irat to bringup cell for uuid %s, err %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: UUID is already null\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mptcp_check_subflows_and_add",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mptcp_sched_create_subflows",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mptcp_sched_create_subflows",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "!(mpts->mpts_flags & (MPTSF_CONNECTING | MPTSF_CONNECTED | MPTSF_CONNECT_PENDING))",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s - %lx: state %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: malloc subflow failed\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mptcp_subflow_add",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "mpts->mpts_mpte == mpte",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "mpte->mpte_numflows != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "mptcp_subflow_del",
            "prototype": "",
            "backtrace": [
                "tcp_garbage_collect"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "mptcp_subflow_disconnect",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: sosetdefunct failed with %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mptcp_subflow_disconnect",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "!(mpte->mpte_mppcb->mpp_flags & MPP_INSIDE_OUTPUT)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "!INP_WAIT_FOR_IF_FEEDBACK(sotoinpcb(so))",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "(mpts->mpts_flags & MPTSF_MP_CAPABLE) || (mpts->mpts_flags & MPTSF_MP_DEGRADED) || (mpts->mpts_flags & MPTSF_TFO_REQD)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "mptcp_subflow_cwnd_space(mpts->mpts_socket) > 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "sb_mb->m_pkthdr.pkt_flags & PKTF_MPTCP",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "(mpt_mbuf == NULL) || (mpt_mbuf->m_pkthdr.pkt_flags & PKTF_MPTCP)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "m->m_next == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "so_m->m_flags & M_PKTHDR",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "so_m->m_pkthdr.pkt_flags & PKTF_MPTCP",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s - %lx: No data in MPTCP-sendbuffer! smax %u snxt %u suna %u state %u flags %#x\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: dropping data, should have been done earlier dsn %u suna %u reinject? %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - $%lx: send-buffer is empty\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: dropping data in degraded mode, should have been done earlier dsn %u sndnxt %u suna %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: send-buffer is still empty\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: this should not happen: sndnxt %u sndmax %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: sb_cc is %d, mp_so->sb_cc %u, sndwnd %u,sndnxt %u sndmax %u cwnd %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: mlen %d mp_rlen %u off %u sb_cc %u tot_sent %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: m_copym_mode failed\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: %u error %d len %d subflags %#x sostate %#x soerror %u hiwat %u lowat %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mptcp_subflow_output",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mptcp_subflow_sosetopt",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: sopt %s val %d set error %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mptcp_subflow_sosetopt",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "mptcp_subflow_sogetopt",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: sopt %s get error %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mptcp_subflow_sogetopt",
            "prototype": "",
            "backtrace": [
                "mptcp_ctloutput"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mpsofilt_hint_mask & SO_FILT_HINT_LOCKED",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "(so->so_state & (SS_NBIO | SS_NOFDREF)) == (SS_NBIO | SS_NOFDREF)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "mptcp_subflow_workloop",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: so=%p so_pcb=%p lr=%p ref=%x lrh= %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "mptcp_lock",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: so=%p NO PCB usecount=%x lr=%p lrh= %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: mpp=%p inside=%x lrh= %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "mptcp_unlock",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: so=%p NULL so_pcb %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "mptcp_getlock",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "m_pktlen(m) >= 0 && m_pktlen(m) < UINT16_MAX",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "mptcp_insert_dsn",
            "prototype": "",
            "backtrace": [
                "mptcp_usr_send"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "!(m->m_pkthdr.pkt_flags & PKTF_MPTCP)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "mptcp_insert_rmap",
            "prototype": "",
            "backtrace": [
                "tcp_input",
                "tcp6_input"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mptcp_get_map_for_dsn",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %llu not found \n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mptcp_get_map_for_dsn",
            "prototype": "",
            "backtrace": [
                "tcp_do_mptcp_options",
                "tcp_dooptions"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "off >= mdss_subflow_off",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "mptcp_adj_sendlen",
            "prototype": "",
            "backtrace": [
                "tcp_output"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "prp != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "prp6 != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "mppcb",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "lck_grp_init_flags"
                },
                {
                    "string": "com.apple.xnu.net.mptcp",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "os_log_create"
                }
            ],
            "symbol": "mptcp_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mptcpstats_get_index",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: no ifp on subflow, state %u flags %#x\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mptcpstats_get_index",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mptcp_pure_handover_subflows_remove",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "mptcp_remove_wifi_subflows",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "mptcp_handover_subflows_remove",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: Found Wi-Fi: %u Found Cellular %u",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: removing wifi subflow\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mptcp_check_subflows_and_remove",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mptcp_remove_cell_subflows",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: removing cell subflow\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mptcp_remove_cell_subflows",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mptcp_create_subflows",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: bit was already cleared!\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mptcp_create_subflows",
            "prototype": "",
            "backtrace": [
                "mptcp_sched_create_subflows"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mptcp_remove_subflows",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "%s - %lx: itf %u close_reqd last itf %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": null
                },
                {
                    "string": "%s - %lx: itf %u killing %#x\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mptcp_remove_subflows",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mptcp_subflow_necp_cb",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: Subflow on itf %u became non-viable, power %u",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mptcp_subflow_necp_cb",
            "prototype": "",
            "backtrace": [
                "mptcp_subflow_socreate",
                "mptcp_subflow_add"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(mpts->mpts_flags & (MPTSF_CONNECTING | MPTSF_CONNECTED)) == MPTSF_CONNECTING",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s - %lx: ifindex %u dst %s:%d pended %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: connectx failed with error %d ifscope %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mptcp_subflow_soconnectx",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mpts->mpts_refcnt == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "mpts->mpts_mpte == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "mpts->mpts_socket == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "mptcp_subflow_free",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "!(mpte->mpte_mppcb->mpp_flags & MPP_INSIDE_INPUT)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "mptcp_subflow_input",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "sock_receive_internal"
                },
                {
                    "string": "%s - %lx: cid %d error %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "sock_receive_internal"
                }
            ],
            "symbol": "mptcp_handle_input",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(n->m_flags & M_PKTHDR) && (n->m_pkthdr.pkt_flags & PKTF_MPTCP)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "mptcp_copy_mbuf_list",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "n->m_flags & M_PKTHDR",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "n->m_next == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "n->m_pkthdr.mp_dsn == dsn",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "n->m_pkthdr.mp_rlen == dlen",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "n->m_pkthdr.mp_rseq == rseq",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "n->m_len == m->m_len",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s - %lx\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx no alternate path\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: switched from %d to %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: m_copym_mode returned NULL\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: dsn %u dlen %u rseq %u fully covered with len %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: m (dsn %u len %u) is covering existing mbuf (dsn %u len %u)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: prev (dsn %u len %u) covers us (dsn %u len %u)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mptcp_subflow_failover_ev",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "mp_droplen <= (UINT_MAX)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "mp_droplen >= tcp_droplen",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "mp_so->so_snd.sb_mb != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "mptcp_desynthesize_ipv6_addr",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: desynthesized to %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mptcp_subflow_connected_ev",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "mp_tp->mpt_version == MPTCP_VERSION_0 || mp_tp->mpt_version == MPTCP_VERSION_1",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "mptcp_init_local_parms",
            "prototype": "",
            "backtrace": [
                "mptcp_subflow_add"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mptcp_symptoms_ctl_connect",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: MPTCP kernel-control socket for Symptoms already open!",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mptcp_symptoms_ctl_connect",
            "prototype": "",
            "backtrace": [
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "mptcp_allow_uuid",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: kcunit %u is different from expected one %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: mbuf is %lu but need %lu\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: wifi new,old: %d,%d, cell new, old: %d,%d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: mbuf is %lu but need %lu or %lu\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: mbuf_copydata returned %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: Got allowance for useApp with rssi %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "socket_lock"
                }
            ],
            "symbol": "mptcp_symptoms_ctl_send",
            "prototype": "",
            "backtrace": [
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "val < INT32_MAX",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s - %lx: Cell is off, but should be at least %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: Increments is %u but want to dec by %u.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: Inconsistent state! Cell refcount is zero but increments are at %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mptcp_unset_cellicon",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "so->so_proto->pr_flags & PR_CONNREQUIRED",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "mptcp_subflow_soreceive 2",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "sblastrecordchk"
                },
                {
                    "string": "m_pktlen(m) < UINT16_MAX",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s - %lx: No DSS on secondary subflow. Killing %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: Received more than 64KB without DSS mapping. Killing %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: Received incorrect second mapping: DSN: %u - %u , SSN: %u - %u, DLEN: %u - %u, DFIN: %u - %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: m_split failed dlen %u dfin %u off %d pktlen %d, killing subflow %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mptcp_subflow_soreceive",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "addr == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "uio == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "flags == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "(so->so_flags & SOF_CONTENT_FILTER) == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "top->m_pkthdr.len > 0 && top->m_pkthdr.len <= UINT16_MAX",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "top->m_pkthdr.pkt_flags & PKTF_MPTCP",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "mptcp_subflow_sosend",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s - %lx: skipped state [u=%d,r=%d,s=%d]\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "mptcp_gc",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "TAILQ_EMPTY(&mpte->mpte_subflows) && mpte->mpte_numflows == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "mptcp_session_destroy",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "TAILQ_EMPTY(&mpte->mpte_sopts)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s - %lx: Destroying session\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mptcp_gc",
            "prototype": "",
            "backtrace": [
                "mptcp_init"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mptcpstats_get_bytes",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: cellbytes is %lld\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mptcpstats_get_bytes",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "SO_LINGER",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "SO_LINGER_SEC",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "SO_DEBUG",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "SO_KEEPALIVE",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "SO_USELOOPBACK",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "SO_TYPE",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "SO_NREAD",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "SO_NWRITE",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "SO_ERROR",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "SO_SNDBUF",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "SO_RCVBUF",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "SO_SNDLOWAT",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "SO_RCVLOWAT",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "SO_SNDTIMEO",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "SO_RCVTIMEO",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "SO_NKE",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "SO_NOSIGPIPE",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "SO_NOADDRERR",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "SO_RESTRICTIONS",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "SO_LABEL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "SO_PEERLABEL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "SO_RANDOMPORT",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "SO_TRAFFIC_CLASS",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "SO_RECV_TRAFFIC_CLASS",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "SO_TRAFFIC_CLASS_DBG",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "SO_PRIVILEGED_TRAFFIC_CLASS",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "SO_DEFUNCTIT",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "SO_DEFUNCTOK",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "SO_ISDEFUNCT",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "SO_OPPORTUNISTIC",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "SO_FLUSH",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "SO_RECV_ANYIF",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "SO_NOWAKEFROMSLEEP",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "SO_NOAPNFALLBK",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "SO_CELLFALLBACK",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "SO_FALLBACK_MODE",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "SO_MARK_KNOWN_TRACKER",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "SO_MARK_KNOWN_TRACKER_NON_APP_INITIATED",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "SO_MARK_APPROVED_APP_DOMAIN",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "SO_DELEGATED",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "SO_DELEGATED_UUID",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "SO_NECP_ATTRIBUTES",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "SO_NECP_CLIENTUUID",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "IP_TOS",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "IPV6_TCLASS",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "TCP_NODELAY",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "TCP_KEEPALIVE",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "TCP_KEEPINTVL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "TCP_KEEPCNT",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "TCP_CONNECTIONTIMEOUT",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "TCP_RXT_CONNDROPTIME",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "PERSIST_TIMEOUT",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "NOTSENT_LOWAT",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "ADAPTIVE_READ_TIMEOUT",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "ADAPTIVE_WRITE_TIMEOUT",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "TCP_FASTOPEN_FORCE_ENABLE",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "MPTCP_SERVICE_TYPE",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "MPTCP_ALTERNATE_PORT",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "MPTCP_FORCE_ENABLE",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "MPTCP_FORCE_VERSION",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "MPTCP_EXPECTED_PROGRESS_TARGET",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "mptcp_sopt2str",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "mpsotomppcb(mp_so) == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "mptcp_usr_attach",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mptcp_usr_detach",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: state: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mptcp_usr_detach",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mptcp_entitlement_check",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: MPTCP prohibited on svc %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mptcp_entitlement_check",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 5,
            "anchors": [
                {
                    "string": "pcid != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s - %lx: state %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: fell back to TCP\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: IPv4 dst len %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: IPv6 dst len %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: IPv4 src len %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: IPv6 src len %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mptcp_usr_connectx",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "mp_so->so_snd.sb_flags & SB_NOCOMPRESS",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "mptcp_usr_send",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mp_so->so_type == SOCK_STREAM",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "!(mp_so->so_flags & SOF_MP_SUBFLOW)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "top != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "top != NULL && *top == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "mb->m_flags & M_PKTHDR",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "progress == tot",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "mptcp_usr_sosend",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "sopt->sopt_level == SOL_SOCKET",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "mptcp_usr_socheckopt",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "mpo != &smpo",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "TAILQ_EMPTY(&mpte->mpte_subflows)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "mpts->mpts_oldintval == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s - %lx: Can't set urgent activity when svctype is %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: Not ok to create subflows, state %u flags %#x\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: Not rescheduling timer %llu now %llu target %llu\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: sopt %s (%d, %d) val %d can't be issued error %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mptcp_ctloutput",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mptcp_usr_preconnect",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: invalid preconnect ",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mptcp_usr_preconnect",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: no space left %d \n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "mptcp_setup_join_ack_opts",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "mptcp_setup_join_ack_opts",
            "prototype": "",
            "backtrace": [
                "mptcp_setup_opts",
                "tcp_output"
            ]
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "optlen too large @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s - %lx: no space left %d flags %x tp->t_mpflags %x len %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: not enough space in TCP option, optlen: %u, mmco_len: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mptcp_setup_opts",
            "prototype": "",
            "backtrace": [
                "tcp_output"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "acked <= INT_MAX",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "mptcp_data_ack_rcvd",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: acked %u, sb_cc %u full %u suna %u state %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mptcp_data_ack_rcvd",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mptcp_setup_first_subflow_syn_opts",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: Not doing MPTCP due to heuristics",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mptcp_setup_syn_opts",
            "prototype": "",
            "backtrace": [
                "tcp_output"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "mptcp_sanitize_option",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "mptcp_do_mpcapable_opt",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: remote key %llx local key %llx remote rand %x local rand %x \n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "mptcp_validate_join_hmac",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s - %lx: type = %d \n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: SYN_ACK optlen = %u, sizeof mp opt = %lu \n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "local version: %d > peer version %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: SYN_ACK: unexpected optlen = %u mp option = %lu\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: SYN_ACK error = %d \n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "tcp_do_mptcp_options",
            "prototype": "",
            "backtrace": [
                "tcp_dooptions"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mptcp_set_urgency_timer",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: timer at %llu now %llu usecount %u ret %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mptcp_set_urgency_timer",
            "prototype": "",
            "backtrace": [
                "mptcp_ctloutput"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mptcp_timer_demux",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: REXMT %d sndnxt %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mptcp_timer",
            "prototype": "",
            "backtrace": [
                "mptcp_init"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mp_so->so_usecount >= 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "mptcp_urgency_timer",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: timer at %llu now %llu usecount %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mptcp_urgency_timer",
            "prototype": "",
            "backtrace": [
                "mptcp_session_create",
                "mp_pcballoc",
                "mptcp_usr_attach"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mptcp_urgency_stop",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: usecount %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mptcp_urgency_stop",
            "prototype": "",
            "backtrace": [
                "mptcp_session_create",
                "mp_pcballoc",
                "mptcp_usr_attach"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mptcp_cancel_urgency_timer",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: Canceled timer thread usecount %u ret %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mptcp_cancel_all_timers",
            "prototype": "",
            "backtrace": [
                "mptcp_disconnect"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ah_hmac_state_init: what? @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ah_hmac_state_init: unsupported algorithm.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ah_hmac_state_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ah_hmac_loop: what? @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "len <= UINT_MAX",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "ah_hmac_loop",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ah_hmac_result: what? @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ah_hmac_result",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ah_update_mbuf: wrong offset specified @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ah_update_mbuf",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "(off + sizeof(struct ah) + sizoff + siz1) <= INT_MAX",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "IPv4 AH input: can't pullup;dropping the packet for simplicity\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "IPv4 AH input: no key association found for spi %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "IPv4 AH input: non-mature/dying SA found for spi %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "IPv4 AH input: unsupported authentication algorithm for spi %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "sum length too short in IPv4 AH input (%u, should be at least %u): %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "sum length mismatch in IPv4 AH input (%d should be %u): %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "IPv4 AH input: can't pullup\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "replay packet in IPv4 AH input: %s %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "IPv4 AH input: couldn't alloc temporary region for cksum\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "IPv4 AH input: bad length ip header len %u, total len %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "checksum mismatch in IPv4 AH input: %s %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec tunnel protocol mismatch in IPv4 AH input: %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ah4_input",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ah_output.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ah4_output: assumption failed (first mbuf length) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ah4_output: internal error: sav->replay is null: %x->%x, SPI=%u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ah4_output: unsupported algorithm: SPI=%u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ENOBUFS in ah4_output %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "IPv4 AH output: size exceeds limit\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "error after ah4_calccksum, called from ah4_output",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ah4_finaldst: parameter mbuf wrong (not pulled up)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ah4_finaldst: wrong optlen %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ah4_output",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mbuf chain? @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "esp_auth: mbuf length < skip\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "esp_auth: mbuf length < skip + length\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "esp_auth: length is not multiple of 4\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "esp_auth: NULL SA passed\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "esp_auth: bad ESP auth algorithm passed: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "esp_auth: AH_MAXSUMSIZE is too small: siz=%u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "esp_auth",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "algo != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s:%d esp auth: auth size=%zu is lesser than siz=%zu SPI 0x%08x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s:%d esp auth: algo init failed with error %d, SPI 0x%08x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s:%d esp auth: input data length %zu is not a multiple 4, SPI 0x%08x\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "esp_auth_data",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.xnu.esp",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "os_log_create"
                },
                {
                    "string": "MPKL_CREATE_LOGOBJECT for ESP failed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "key_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d payload length %zu must be a multiple of ESP_CBC_DES_BLOCKLEN, SPI 0x%08x",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "esp_cbc_des_encrypt_data",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "esp_common_ivlen: unknown algorithm @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "esp_common_ivlen",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d payload length %zu must be a multiple of ESP_CBC_3DES_BLOCKLEN, SPI 0x%08x",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "esp_cbc_3des_encrypt_data",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "siz <= USHRT_MAX",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "IPv4 ESP input: packet alignment problem (off=%d, pktlen=%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "IPv4 ESP input: invalid protocol type\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "IPv4 ESP input: no key association found for spi %u (0x%08x)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "IPv4 ESP input: non-mature/dying SA found for spi %u (0x%08x)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "IPv4 ESP input: unsupported encryption algorithm for spi %u (0x%08x)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "inproper ivlen in IPv4 ESP input: %s %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "replay packet in IPv4 ESP input: seq(%u) idx(%u) %s %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "auth fail in IPv4 ESP input: %s %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "cc_cmp fail in IPv4 ESP input: %s %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "IPv4 ESP input: packet too short\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "decrypt fail in IPv4 ESP input: %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "esp4 packet decryption ICV failure: %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "bad pad length in IPv4 ESP input: %s %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "IPv4 ESP input: invalid udp encapsulated ESP packet length \n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec tunnel unsupported address family in ESP input\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "IPv4 ESP input: can't pullup UDP header in esp4_input\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "IPv4 ESP input: decrypted packet too short %d < %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "esp4_input_extended",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "siz <= UINT16_MAX",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "esplen + ivlen <= UINT16_MAX",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "esp6_input: mbuf allocation failed\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "IPv6 ESP input: packet alignment problem (off=%d, pktlen=%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "IPv6 ESP input: ESP with IPv6 jumbogram is not supported.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "IPv6 ESP input: invalid protocol type\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "IPv6 ESP input: no key association found for spi %u (0x%08x) seq %u src %s dst %s if %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "IPv6 ESP input: non-mature/dying SA found for spi %u (0x%08x)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "IPv6 ESP input: unsupported encryption algorithm for spi %u (0x%08x)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "improper ivlen in IPv6 ESP input: %s %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "replay packet in IPv6 ESP input: seq(%u) idx(%u) %s %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "IPv6 ESP input: packet too short\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "decrypt fail in IPv6 ESP input: %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "esp6 packet decryption ICV failure: %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "bad pad length in IPv6 ESP input: %s %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "IPv6 ESP input: invalid udp encapsulated ESP packet length\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "esp6_input_extended",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s:%d esp kpipe input, sah is NULL\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s:%d ipsec tunnel mode not supported in kpipe mode, SPI=%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s:%d sadb flag %x not supported in kpipe mode, SPI=%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s:%d esp kpipe input, invalid SA state %u, SPI=%x",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s:%d esp kpipe input, missing replay window, SPI=%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s:%d esp kpipe input, unsupported algorithm(%d) for, SPI=%x",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "esp kpipe input: invalid ivlen(%d) SPI=%x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "auth_size < AH_MAXSUMSIZE",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "e_algo->decrypt_pkt",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s:%d esp kpipe input, jumbogram not supported",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d esp kpipe input, invalid nxt proto %u",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d esp kpipe input, slen too short %u",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d esp kpipe input, no SA found for SPI=%x, packet %s<->%s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d esp kpipe input, replay packet, seq(%u), idx(%u), SPI=%x\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d esp kpipe input, input buffer does not contain auth, SPI=%x\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d esp kpipe input, esp auth data failed, SPI=%x\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d esp kpipe input, auth compare failed, SPI=%x\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d esp kpipe input, input buffer is short(%u), to contain ivlen and esptail SPI=%x\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d esp kpipe input: decryption failed, SPI=%x\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d esp kpipe input: ICV failed, SPI=%x\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d esp kpipe input: update replay failed, SPI=%x\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d esp kpipe input: encrypted payload len %u, is invalid, taillen %zu, SPI=%x\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "esp_kpipe_input",
            "prototype": "",
            "backtrace": [
                "ipsec_netif_sync_rx"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "sav->sah->saidx.mode == IPSEC_MODE_TRANSPORT",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "(sav->flags & (SADB_X_EXT_OLD | SADB_X_EXT_DERIV | SADB_X_EXT_NATT | SADB_X_EXT_NATT_MULTIPLEUSERS | SADB_X_EXT_CYCSEQ | SADB_X_EXT_PMASK)) == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "esp kpipe output, ipversion %u, SPI=%x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s:%d esp kpipe output, slen(%u) <= iphlen(%zu) SPI=%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s:%d esp kpipe output, missing replay window, SPI=%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s:%d esp kpipe output: unsupported algorithm, SPI=%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "invalid ivlen(%d) SPI=%x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "extendsiz <= UINT8_MAX",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "auth size %zu greater than AH_MAXSUMSIZE @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s:%d esp kpipe output: destination buffer too short",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s:%d esp kpipe output: source buffer too short",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s:%d esp kpipe output: ipv4 packet size exceeded, ip payload len %u, SPI=%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s:%d esp kpipe output: ipv6 packet size exceeded, ip payload len %u, SPI=%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s:%d replay counter overflowed, SPI=%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "esp kpipe output: missing algo encrypt pkt @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s:%d esp encrypt failed %d, SPI=%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s:%d esp finalize encrypt failed %d, SPI=%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s:%d esp auth data failed %d, SPI=%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "esp_kpipe_output",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "esp_output: should not reach here @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "invalid ivlen @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "esphlen <= INT32_MAX",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "extendsiz <= INT_MAX",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "(extendsiz - 2) <= UINT8_MAX",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "internal error: no encrypt function @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "assertion failed for AH_MAXSUMSIZE @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "(plen + siz + extendsiz + esphlen) <= UINT16_MAX",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "esp_output: unsupported af %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "esp4_output: internal error: sav->replay is null: %x->%x, SPI=%u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "esp6_output: internal error: sav->replay is null: SPI=%u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "esp_output: unsupported algorithm: SPI=%u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "esp%d_output: md is not in chain\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "esp%d_output: can't alloc mbuf",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "packet encryption failure\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "packet encryption ICV failure\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ESP checksum generation failure\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "can't alloc mbuf in esp%d_output",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "18 {curProtocol: 80, spi: 0x%X, espSeq: %u, PayloadProtocol: 100, localPort: %hu, remotePort: %hu, tcpSeq: %u, tcpAck: %u, tcpLen: %hu, tcpFlags: 0x%02x}",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "esp_output",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "out_ivlen == AES_BLOCKLEN",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s:%d payload length %zu must be multiple of AES_BLOCKLEN, SPI 0x%08x",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "esp_aes_cbc_encrypt_data",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "%s:%d ivlen(%zu) != AES_BLOCKLEN, SPI 0x%08x",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s:%d input data length(%zu) must be a multiple of AES_BLOCKLEN",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "esp_aes_cbc_decrypt_data",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "esp_gcm_ivlen: unknown algorithm @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "esp_gcm_ivlen",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d Context reset failure %d, SPI 0x%08x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s:%d Set IV failure %d, SPI 0x%08x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s:%d IV generation failure %d, SPI 0x%08x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s:%d Set AAD failure %d, SPI 0x%08x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s:%d Packet encryption IV AAD failure %d, SPI 0x%08x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s:%d set aad failure %d, SPI 0x%08x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s:%d encrypt failure %d, SPI 0x%08x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "esp_aes_gcm_encrypt_data",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d iv is NULL @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s:%d set iv failure %d, SPI 0x%08x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s:%d decrypt failure %d, SPI 0x%08x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "esp_aes_gcm_decrypt_data",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d ChaChaPoly is incompatible with SADB_X_EXT_OLD, SPI 0x%08x",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s:%d ChaChaPoly is incompatible with SADB_X_EXT_DERIV, SPI 0x%08x",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s:%d ChaChaPoly unsupported algorithm %d, SPI 0x%08x",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s:%d ChaChaPoly key is missing, SPI 0x%08x",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s:%d ChaChaPoly invalid key length %d bits, SPI 0x%08x",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s:%d ChaChaPoly Mature SPI 0x%08x%s %s dir %u state %u mode %u",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "esp_chachapoly_mature",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d ChaChaPoly Invalid key len %u, SPI 0x%08x",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s:%d ChaChaPoly chacha20poly1305_init failed %d, SPI 0x%08x",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s:%d ChaChaPoly Schedule SPI 0x%08x%s %s dir %u state %u mode %u",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "esp_chachapoly_schedule",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d algo is NULL @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "esp_chachapoly_ivlen",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "esp_chachapoly_ivlen",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d ChaChaPoly chacha20poly1305_finalize failed %d, SPI 0x%08x",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "esp_chachapoly_encrypt_finalize",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d ChaChaPoly Packet too short %d < %zu, SPI 0x%08x",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s:%d ChaChaPoly not enough mbufs %d %d, SPI 0x%08x",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "esp_chachapoly_encrypt",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "input_data_len != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s:%d esp_ccp_ctx is NULL @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "esp_chachapoly_encrypt_data",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d chacha20poly1305_decrypt failed %d, SPI 0x%08x",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "esp_chachapoly_decrypt_data",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "ipsec4_getpolicybysock: NULL pointer was passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ipsec4_getpolicybysock: so->so_pcb == NULL\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "ipsec4_getpolicybysock: unsupported address family @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ipsec4_getpolicybysock: illegal direction. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ipsec4_getpolicybysock: currsp is NULL. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ipsec4_setspidx_inpcb: no sp_in/out found. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ipsec4_getpolicybysock: Illegal policy for non-priviliged defined %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ipsec4_getpolicybysock",
            "prototype": "",
            "backtrace": [
                "ip_output_list"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ipsec4_getpolicybyaddr: NULL pointer was passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "fixed system default policy:%d->%d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ipsec4_getpolicybyaddr",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ipsec4_getpolicybyinterface: NULL pointer was passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ipsec4_getpolicybyinterface",
            "prototype": "",
            "backtrace": [
                "ip_output_list"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "ipsec6_getpolicybysock: NULL pointer was passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ipsec6_getpolicybysock: illegal direction. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ipsec6_getpolicybysock: currsp is NULL. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ipsec6_getpolicybysock: Invalid policy for PCB %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec6_getpolicybysock: Illegal policy for non-priviliged defined %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec6_policybysock: Invalid policy for PCB %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ipsec6_getpolicybysock",
            "prototype": "",
            "backtrace": [
                "ip6_output_list"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ipsec6_getpolicybyaddr: NULL pointer was passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ipsec6_getpolicybyaddr",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ipsec6_getpolicybyinterface: NULL pointer was passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ipsec6_getpolicybyinterface",
            "prototype": "",
            "backtrace": [
                "ip6_output_list"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ipsec_init_policy: NULL pointer was passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ipsec_init_policy: No more memory.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ipsec_init_policy",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ipsec4_delete_pcbpolicy: NULL pointer was passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ipsec4_delete_pcbpolicy",
            "prototype": "",
            "backtrace": [
                "in_pcbdetach"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ipsec6_delete_pcbpolicy: NULL pointer was passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ipsec6_delete_pcbpolicy",
            "prototype": "",
            "backtrace": [
                "in6_pcbdetach"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ipsec_get_reqlevel: NULL pointer is passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ipsec_get_reqlevel: family mismatched. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "fixed system default level ip4_esp_trans_deflev:%d->%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "fixed system default level ip4_esp_net_deflev:%d->%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "fixed system default level ip4_ah_trans_deflev:%d->%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "fixed system default level ip4_ah_net_deflev:%d->%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "fixed system default level ip6_esp_trans_deflev:%d->%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "fixed system default level ip6_esp_net_deflev:%d->%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "fixed system default level ip6_ah_trans_deflev:%d->%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "fixed system default level ip6_ah_net_deflev:%d->%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "key_get_reqlevel: Unknown family. %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ipsec_get_reqlevel: Illegal protocol defined %u\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ipsec_get_reqlevel: Illegal IPsec level %u @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ipsec_get_reqlevel: still got IPCOMP - exiting\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ipsec_get_reqlevel",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ipsec4_in_reject: invalid inpcb/socket @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ipsec4_in_reject",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ipsec6_in_reject: invalid in6p/socket @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ipsec6_in_reject",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ipsec4_hdrsize: why is socket NULL but there is PCB. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ipsec4_hdrsiz",
            "prototype": "",
            "backtrace": [
                "ipsec_hdrsiz_tcp",
                "tcp_output"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ipsec6_hdrsize: why is socket NULL but there is PCB. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ipsec6_hdrsiz",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ipsec4_encapsulate: assumption failed (first mbuf length) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ipsec4_encapsulate",
            "prototype": "",
            "backtrace": [
                "ipsec4_output_internal"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "src=%u.%u.%u.%u",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": " dst=%u.%u.%u.%u",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "ipsec4_logpacketstr",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ipsec_logsastr: family mismatched. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "SA(SPI=%u ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "src=%d.%d.%d.%d dst=%d.%d.%d.%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "ipsec_logsastr",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ipsec4_output: no SA found, but required. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "IPv4 output: can't pullup UDP header\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ipsec4_output",
            "prototype": "",
            "backtrace": [
                "ip_output_list"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "state == NULL in ipsec6_output_trans @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "state->m == NULL in ipsec6_output_trans @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "nexthdrp == NULL in ipsec6_output_trans @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "mprev == NULL in ipsec6_output_trans @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "sp == NULL in ipsec6_output_trans @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "tun == NULL in ipsec6_output_trans @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ipsec6_output_trans: no SA found, but required. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ipsec6_output_trans",
            "prototype": "",
            "backtrace": [
                "ip6_output_list"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "state == NULL in ipsec6_output_tunnel @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "state->m == NULL in ipsec6_output_tunnel @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "sp == NULL in ipsec6_output_tunnel @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ipsec6_output_tunnel: no SA found, but required. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ipsec6_output_tunnel: IPv4 must be outer layer, spi=%u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ipsec6_output_tunnel",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "state == NULL in ipsec6_output @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "state->m == NULL in ipsec6_output @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "nexthdrp == NULL in ipsec6_output @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "mprev == NULL in ipsec6_output @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ipsec6_interface_output",
            "prototype": "",
            "backtrace": [
                "ipsec_output"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ipsec4_splithdr: first mbuf too short, m_len %d, pkt_len %d, m_flag %x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ipsec4_splithdr",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ipsec6_splithdr: first mbuf too short @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ipsec6_splithdr",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ipsec4_get_ulp: too short @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "nxt <= UINT8_MAX",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "ipsec_setspidx",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ipsec6_setspidx_in6pcb: no PCB found. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ipsec6_setspidx_in6pcb: no in6p_sp found. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ipsec6_setspidx_in6pcb: no sp_in/out found. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ipsec6_setspidx_in6pcb",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ipsec4_output_internal",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec46_encapsulate: assumption failed (first mbuf length) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: family mismatched between inner and outer spi=%u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ipsec4_output_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "af6->ip6af_off != ip6af->ip6af_off",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "frag6_input",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pp == NULL || (pp->pr_flags & (PR_INITIALIZED | PR_ATTACHED)) == PR_ATTACHED",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "mld_init",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "icmp6_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nicmp6 is NULL in %s, which isn't good! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "icmp6_input",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ICMP6 checksum error(%d|%x) %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "icmp6_input: unknown type %d(src=%s, dst=%s, ifid=%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "icmp6_input",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "icmp6_reflect",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "sanity fail: off=%x, sizeof(ip6)=%x in %s:%d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "icmp6_reflect: source can't be determined: dst=%s, error=%d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "icmp6_reflect",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "assumption failed in %s:%d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "icmp6_redirect_output",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "icmp6_redirect_output",
            "prototype": "",
            "backtrace": [
                "ip6_forward",
                "ip6_input"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "icmp6_dgram_attach @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "icmp6_dgram_attach",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ni6_input",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ni6_input: ignore node info to a temporary address in %s:%d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ni6_input",
            "prototype": "",
            "backtrace": [
                "icmp6_input"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(src=%s dst=%s tgt=%s)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tsnprintf"
                }
            ],
            "symbol": "icmp6_redirect_diag",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "in6_control",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                },
                {
                    "string": "SIOCPROTODETACH_IN6: %s error=%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "prefix ioctls are now invalidated. please use ifconfig.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "sa6 != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "in6_control",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ifp != NULL && ifra != NULL && iar != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: pltime 0x%x > vltime 0x%x for %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s: valid lifetime is 0 for %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s: prefix length < 128 with explicit dstaddr.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s: dstaddr valid only on p2p and loopback interfaces.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "address %s already exists in automatic form",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "address %s already exists in manual form",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "in6_update_ifa",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "in6_purgeaddr: failed to remove a route to the p2p destination: %s on %s, errno=%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "in6_unlink_ifa: IPv6 address 0x%llx has no prefix\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "in6_purgeaddr",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "in6_are_prefix_equal",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "in6_are_prefix_equal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "in6_prefixlen2mask",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "in6_prefixlen2mask",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: unknown link type (%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "in6_if2idlen",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "in6_if2idlen",
            "prototype": "",
            "backtrace": [
                "in6_pfx_newpersistaddr"
            ]
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "maclen <= sizeof(in6_event_data.ia_mac)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "in6_post_msg",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "in6_eventhdlr_callback",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "p_addr6 != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s Event %s received for %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "in6_eventhdlr_callback",
            "prototype": "",
            "backtrace": [
                "ip6_init",
                "in6_dinit"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "in6_event_enqueue_nwk_wq_entry",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "UNKNOWN_IN6_EVHDLR_CODE",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: eventhandler enqueuing event of type=in6_evhdlr_code event_code=%s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "in6_event_enqueue_nwk_wq_entry",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ifp != NULL && ifra != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: nd6_prelist_add okay, but no prefix.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s: failed to create a temporary address, error=%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "in6ctl_aifaddr",
            "prototype": "",
            "backtrace": [
                "in6_control"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ifp != NULL && ia != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "in6ctl_difaddr",
            "prototype": "",
            "backtrace": [
                "in6_control"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "sin6 != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "in6_to_kamescope",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "%s: in6_setscope failed\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s - %s ifp %s ia6_flags 0x%x ifaupflags 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "in6_ifaupdate_aux",
            "prototype": "",
            "backtrace": [
                "in6_update_ifa"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "in6_ifloop_request: %s operation failed for %s (errno=%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "DELETE",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ip6_sprintf"
                }
            ],
            "symbol": "in6_ifloop_request",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: attempt to remove wrong ia %p from ipv6 hash table @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "in6_iahash_remove",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "in6_iahash_remove",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: attempt to insert wrong ia %p into hash table @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: attempt to double-insert ia %p into hash table @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "in6_ifinit",
            "prototype": "",
            "backtrace": [
                "in6_update_ifa"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "in6_ifaddr_free",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "in6_ifaddr_free",
            "prototype": "",
            "backtrace": [
                "in6_ifaddr_alloc",
                "in6_update_ifa"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "cfg != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "n < SHA1_RESULTLEN",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "in6_cga_start",
            "prototype": "",
            "backtrace": [
                "sysctl_cga_parameters"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "in6 != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "prepare->cga_security_level < 8",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "in6_cga_generate",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "%s: mbuf %p pkt too short (%d) for IPv6 header @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "inet6_cksum",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "inet6_cksum",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: off (%u) >=  buffer_len (%u) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: len == 0 OR len (%u) >=  buffer_len (%u) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: off(%u), len(%u) add overflow @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: off(%u) + len(%u) >=  buffer_len (%u) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "inet6_cksum_buffer",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ENOBUFS in in6_gif_output %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "in6_gif_output",
            "prototype": "",
            "backtrace": [
                "gif_output",
                "gif_clone_create",
                "gif_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "cannot forward from %s to %s nxt %d received on %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "ip6_forward: No IPsec request specified.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "ip6_forward: Invalid policy found. %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "rt == NULL || rt == ip6forward_rt->ro_rt",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "cannot forward src %s, dst %s, nxt %d, rcvif %s, outif %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "ip6_forward",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ip6_forward.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ip6_forward",
            "prototype": "",
            "backtrace": [
                "ip6_input"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: in6_ifattach_prelim returned %d if=%s%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s: proto_unplumb returned %d if=%s%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "in6_domifattach",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ND_IFINFO(ifp)->initialized",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: in6_ifattach_loopback returned %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "in6_ifattach_prelim",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "in6_ifattach_loopback",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ia == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "in6_ifattach: %s is not multicast capable, IPv6 not enabled\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: failed to configure loopback address %s (error=%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "in6_ifattach_prelim",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "in6_ifattach_aliasreq",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "in6_ifattach_aliasreq",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "llcgasr != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "in6_ifattach_llcgareq",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "in6_ifattach_llcgareq",
            "prototype": "",
            "backtrace": [
                "in6ctl_cgastart",
                "in6_control"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ifra != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "in6_ifattach_linklocal",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: failed to configure a link-local address on %s (errno=%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "in6_ifattach_linklocal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "in6_generate_tmp_iid",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: computed SHA256 value is zero.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "in6_generate_tmp_iid",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "in6_event2kev_array[i].in6_event_code == i",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: Unable to find [PF_INET6,IPPROTO_RAW,SOCK_RAW] @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "dp == inet6domain && dp->dom_family == PF_INET6",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "ip6_checkinterface",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "%s: failed to register PF_INET6 protocol: %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ina6ddr_nhash",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "ip6_moptions",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_ext"
                }
            ],
            "symbol": "ip6_init",
            "prototype": "",
            "backtrace": [
                "in6_dinit"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ip6_input",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "!ours || (m->m_pkthdr.pkt_flags & PKTF_PROXY_DST)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "rin6.ro_rt != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "ip6_input",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "sysctl_ip6_checkinterface",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: ip6_checkinterface is now %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "sysctl_ip6_checkinterface",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "0 == packetchain",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: Invalid policy found: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "assumption failed: hdr not split @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ip6obf.route_selected",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "Double free of ip6e_hbh @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Double free of ip6e_dest1 @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Double free of ip6e_rthdr @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Double free of ip6e_dest2 @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ip6_output_list",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "NULL != mptr",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "ip6_do_fragmentation",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "%s: mbuf %p pkt len (%u) < hoff+ip6_hdr (%u+%u)\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: mbuf 0x%llx proto %d IPv6 plen %d (%x) [swapped %d (%x)] doesn't match actual packet length; %d is used instead\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: mbuf %p pkt len (%u) < hoff+ip6_hdr+ext_hdr (%u+%u+%u)\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "in6_finalize_cksum",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "sopt != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "ip6_getpcbopt: unexpected option @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ip6_ctloutput",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: im6o %p negative refcnt @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: im6o %p cannot be freed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "im6o_remref",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "copypktopts: invalid argument\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "copypktopts",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: im6o %p has no debug structure @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "im6o_trace",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "im6o_trace",
            "prototype": "",
            "backtrace": [
                "ip6_allocmoptions"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ip6_setpktopt: impossible case\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "IS_P2ALIGNED(buf, sizeof(u_int32_t))",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "ip6_setpktopt",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "in6_selectsrc_core_ifa",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d Returned with error: %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "in6_selectsrc_core_ifa",
            "prototype": "",
            "backtrace": [
                "ifaddr_findbestforaddr"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "dstsock != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "src_storage != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "in6_selectsrc_core",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "inet_ntop"
                },
                {
                    "string": "IP6S_SRCRULE_1",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s out src %s dst %s ifp %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d NEXT ia %s address on ifp1 %s skipped as it is reserved for CLAT46\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d CLAT46: NEXT ia %s address on ifp1 %s skipped as it is not reserved for CLAT46\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d NEXT ia %s ifp1 %s address is not on outgoing interface \n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d NEXT ia %s ifp1 %s odstzone %d != dstzone %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d NEXT ia %s ifp1 %s osrczone %d != srczone %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d NEXT ia %s ifp1 %s ia6_flags 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d NEXT ia %s ifp1 %s IFA6_IS_DEPRECATED\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d NEXT ia %s ifp1 %s IN6_IFF_OPTIMISTIC\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d BREAK r %s ia %s ifp1 %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d Address list seems to have changed. Restarting source address selection.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d NEXT ia %s ifp1 %s last resort\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d NEXT ia %s ifp1 %s best_scope %d new_scope %d dst_scope %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s out src %s dst %s dst_scope %d best_scope %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "in6_selectsrc_core",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "sifp != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "in6_selectsrc",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "inp->inp_flags2 & INP2_INHASHLIST",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "in6_pcbsetport",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 5,
            "anchors": [
                {
                    "string": "rt == NULL || rt == ro->ro_rt",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "in6_selectif",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "inm->in6m_st[1].iss_rec == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "in6m_clear_recorded",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "im6f_purge",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "im6f_purge",
            "prototype": "",
            "backtrace": [
                "im6o_remref"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "in6m_commit",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "in6m_commit",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "in6m_purge",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "in6m_purge",
            "prototype": "",
            "backtrace": [
                "in6m_remref"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "IN6_IS_ADDR_MULTICAST(mcaddr)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "mcaddr->s6_addr16[1] != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: in6_mc_get() failure\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "ifma->ifma_addr->sa_family == AF_INET6",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "inm->in6m_ifma == ifma",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "in6_are_addr_equal_scoped(&inm->in6m_addr, group, inm->ifscope, ifp->if_index)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "in6_mc_join",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: in6m=%p negative reqcnt @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: Attempt to detach an unattached record in6m=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: in6m %p is already in trash list @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "in6_multi_detach",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: in6m=%p negative refcnt @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "in6m_remref",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: attached in6m=%p is being freed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: ifma not NULL for in6m=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: in6m %p cannot be freed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: non-zero refcount in6m=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: non-zero reqcnt in6m=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "in6m_remref",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: --- begin in6m 0x%llx ---\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "in6m_print",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "mli 0x%llx nsrc %lu sctimer %u scrv %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: --- end in6m 0x%llx ---\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "in6m_print",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "src->sin6_family == AF_INET6",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "gidx != (size_t)-1 && gidx < imo->im6o_num_memberships",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "im6o_match_source",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: Attempt to attach an already attached in6m=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "in6_multi_attach",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "in6m->in6m_reqcnt == 1",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "in6_multi_attach",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: in6m %p has no debug structure @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "in6m_trace",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "in6m_trace",
            "prototype": "",
            "backtrace": [
                "in6_mc_join"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "in6m_get_source",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "in6m_reap",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "in6m_merge",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "im6f_rollback",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "im6f_rollback",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "inm->in6m_ifp == inm->in6m_ifma->ifma_ifp",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "in6_mc_leave",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "%s: ipv6mr_interface = %d, ifp = 0x%llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "imo->im6o_mfilters != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: new join w/o source",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: warning: no ifindex, looking up ifp for group %s.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: ifp = 0x%llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "inm == imo->im6o_membership[idx]",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "ip6_setmoptions",
            "prototype": "",
            "backtrace": [
                "ip6_ctloutput"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "gsin6->sin6_family == AF_INET6",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "in6p_lookup_mcast_ifp",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "im6f_reap",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "im6f_reap",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: visit node 0x%llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "sysctl_ip6_mcast_filters",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: i6mm_maddr not NULL for imm=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "in6_multi_mship_free",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "in6_joingroup",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "!NETNS_TOKEN_VALID( &inp->inp_wildcard_netns_token)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "in6_pcbbind",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "in6p_route_copyout",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "in6p_route_copyout",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "in6p_route_copyin",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "in6p_route_copyin",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "inet6domain == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "in6_dinit",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "rip6_pr_output",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "in6_proto.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "rip6_pr_output",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "sysctl_ip6_forwarding",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%s entry: ip6_forwarding is %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%s return: ip6_forwarding is %d and error is %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "sysctl_ip6_forwarding",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "in6_validate",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "in6_validate",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "in6_rtqdrain",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "in6_rtqdrain",
            "prototype": "",
            "backtrace": [
                "ip6_drain"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "head != (void **)&rt_tables[AF_INET6] || *head == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "in6_inithead",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "in6_rmx.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "in6_rtqkill",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "in6_deleteroute",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "in6_deleteroute",
            "prototype": "",
            "backtrace": [
                "in6_inithead"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mld_domifattach",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: allocated mld_ifinfo for ifp %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mld_domifattach",
            "prototype": "",
            "backtrace": [
                "ifnet_attach"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "!(mli->mli_debug & IFD_ATTACHED)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "mld_domifreattach",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: reattached mld_ifinfo for ifp %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mld_domifreattach",
            "prototype": "",
            "backtrace": [
                "ifnet_attach"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mld_domifdetach",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: mld_ifinfo not found for ifp %p(%s) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "mli_delete",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "mld_domifdetach",
            "prototype": "",
            "backtrace": [
                "ifnet_detach"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: mli=%p negative refcnt @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: attached mli=%p is being freed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: ifp not NULL for mli=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: mli %p cannot be freed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: non-zero refcnt mli=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: freeing mld_ifinfo for ifp %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mli_remref",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "%s: called w/mbuf (0x%llx,%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "mld_input",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: report suppressed for %s on ifp 0x%llx(%s)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: ignore v1 query on ifp %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: process v1 general query on ifp %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: process v1 query %s on ifp %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: ignore v1 report on ifp %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: ignore v1 query dst %s on ifp %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: process v1 report %s on ifp %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mld_input",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mld_set_version",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: cancel v2 timers on ifp 0x%llx(%s)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "mld_v2_cancel_link_timers",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "mld_set_version",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mld_v1_update_group",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ip6_sprintf"
                }
            ],
            "symbol": "mld_v1_update_group",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "%s: schedule response to SG query\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "mld_v2_process_group_query",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "mld_v2_process_group_query",
            "prototype": "",
            "backtrace": [
                "mld_v2_input_query",
                "mld_input"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mld_v1_process_querier_timers",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "mld_v2_dispatch_general_query",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "mli == inm->in6m_mli",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: transition from v%d -> v%d on %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: outbound queue full",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mld_timeout",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "inm->in6m_st[1].iss_asm == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: m_adj(m, -mr)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: m_get*() failed\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mld_v2_enqueue_group_record",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mld_v1_transmit_report",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: v1 outbound queue full\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mld_v1_transmit_report",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "mld_dispatch_queue_locked",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "mld_dispatch_queue_locked",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: warning: ia is NULL\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: mldreclen is %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: ip6_output(0x%llx) = %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mld_dispatch_packet",
            "prototype": "",
            "backtrace": [
                "mld_dispatch_queue_locked"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "mld_flush_relq",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "inm->in6m_in_nrele == true",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: flushing inm %llx on relq ifp %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mld_flush_relq",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "mli->mli_rv > 1",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "IN6_IS_ADDR_MULTICAST(addr)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: nothing to do\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: MLDv2 state reached, not MLDv2 mode\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "inm->in6m_debug & IFD_ATTACHED",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: T1 now MCAST_UNDEFINED for 0x%llx/%s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "mld_change_state",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "!nd6_init_done",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "nd6_init",
            "prototype": "",
            "backtrace": [
                "ip6_init",
                "in6_dinit"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "uninitialized ndopts in nd6_option @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ndopts == NULL in nd6_options @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "uninitialized ndopts in nd6_options @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "duplicated ND6 option found (type=%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "nd6_options: unsupported option %d - option ignored\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "too many loop in nd opt\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "nd6_options",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nd6_drain",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: draining ND6 entries\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "nd6_drain",
            "prototype": "",
            "backtrace": [
                "ip6_drain"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: failed to add route for a neighbor(%s), errno=%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s: failed to lookup %s (if = %s)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "unspec",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "nd6_lookup",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "nd6_free",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "nd6_free",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "nd6_init_done",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: failed to join %s (errno=%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "nd6_rtrequest",
            "prototype": "",
            "backtrace": [
                "in6_update_ifa"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ifp == NULL in nd6_cache_lladdr @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "from == NULL in nd6_cache_lladdr @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "nd6_cache_lladdr",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(newstate) != ND6_LLINFO_STALE && (newstate) != ND6_LLINFO_DELAY && (newstate) != ND6_LLINFO_PROBE",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "nd6_cache_lladdr",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nd6_output: can't allocate llinfo for %s (ln=0x%llx, rt=0x%llx)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "nd6_output_list",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "in6_ifaddr_set_dadprogress",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "in6_ifaddr_set_dadprogress",
            "prototype": "",
            "backtrace": [
                "in6_ifaupdate_aux",
                "in6_update_ifa"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nd6_timeout_run >= 0 && nd6_timeout_run < 2",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "nd6_service",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "drainer",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: ln(%p) rt(%p) rt_ifp == NULL @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: rt_llinfo(%p) is not equal to ln(%p) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: rt(%p) key is NULL ln(%p) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "((short)2) != ND6_LLINFO_STALE && ((short)2) != ND6_LLINFO_DELAY && ((short)2) != ND6_LLINFO_PROBE",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "nd6_service_expired_default_router",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s duplicated (collision count %d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s: %s new (collision count %d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s: in6_pfx_newpersistaddr failed %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "nd6_handle_duplicated_ip6_addr",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s: found %u, aging_lazy %u, aging %u, sticky %u, killed %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s is blocked by %d waiters\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "nd6_timeout",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "regen_tmpaddr: failed to create a new tmp addr,errno=%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "regen_tmpaddr",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nd6_purge_interface_rti_entries",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "nd6_rti_list_wait"
                }
            ],
            "symbol": "nd6_purge_interface_rti_entries",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "rt->rt_llinfo_purge == nd6_llinfo_purge && ln != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "nd6_llinfo_purge",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nd6_llinfo_free",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ln->ln_rt->rt_llinfo == ln",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "nd6_llinfo_free",
            "prototype": "",
            "backtrace": [
                "nd6_rtrequest",
                "in6_update_ifa"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nd6_llinfo_refresh",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "nd6_llinfo_refresh",
            "prototype": "",
            "backtrace": [
                "nd6_rtrequest",
                "in6_update_ifa"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ND6 advertisement",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_bcmp"
                },
                {
                    "string": "ND6 unsolicited announcement",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_bcmp"
                },
                {
                    "string": "nd6_llreach_alloc",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s%s for %s iface=%s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "nd6_llreach_alloc",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "nd6_dad_start: ifa->ifa_ifp == NULL @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "nd6_dad_start",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "optimistic ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ip6_sprintf"
                },
                {
                    "string": "immediately ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ip6_sprintf"
                },
                {
                    "string": "!dp->dad_attached",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "nd6_dad_start: not a tentative or optimistic address %s(%s)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: starting %sDAD %sfor %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "nd6_dad_start",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nd6_need_cache(ifp)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "sdl && (void *)sa != (void *)sdl",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "sin6 && (void *)sa != (void *)sin6",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "sa->sa_len == sizeof *sin6",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "sa->sa_len <= sizeof(*sdl)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "sdla->sdl_alen == ETHER_ADDR_LEN",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "nd6_alt_node_addr_decompose",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "rt->rt_flags & RTF_LLINFO",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "rt->rt_llinfo",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: failed to add/update host route to %s.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s: Successfully added/updated host route to %s [lr=0x%llx]\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "nd6_alt_node_present",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nd6_dad_find",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: a looped back NS message is detected during DAD for if=%s %s. Ignoring.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "nd6_dad_find",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "dp->dad_ifa == ifa",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "nd6_dad_detach",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": ", tx unsolicited NA with O=1",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ip6_sprintf"
                },
                {
                    "string": "%s: DAD structure not found.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s: DAD complete for %s - duplicate found.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s: possible hardware address duplication detected, disabling IPv6 for interface.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s: manual intervention may be required.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "nd6_dad_timer: called with null parameter\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "nd6_dad_timer: DAD structure not found\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "nd6_dad_timer: called with duplicated address %s(%s)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "nd6_dad_timer: not a tentative or optimistic address %s(%s)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: could not run DAD, driver problem?\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: duplicate IPv6 address %s if:%s [timer]\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: a looped back NS message is detected during DAD for %s. Another DAD probe is being sent on interface %s.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: DAD complete for %s - no duplicates found %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: DAD completed while a looped back NS message is detected during DAD for %s om interface %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: NS in/out/loopback=%d/%d/%d, NA in=%d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "nd6_dad_timer",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: dad %p negative refcnt @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: attached dad=%p is being freed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "dad_remref",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ro6 == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "in6_are_addr_equal_scoped(&ip6->ip6_dst, &ro6->ro_dst.sin6_addr, ip6_input_getdstifscope(m), ro6->ro_dst.sin6_scope_id)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "nd6_prproxy_isours",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "rt == NULL && ro6->ro_rt == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "rt != NULL || ro6->ro_rt == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: found incorrect prefix proxy route for dst %s on %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: found prefix proxy route for dst %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: allocated prefix proxy route for dst %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: failed to find forwarding prefix proxy entry for dst %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "nd6_proxy_find_fwdroute",
            "prototype": "",
            "backtrace": [
                "ip6_forward",
                "ip6_input"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "pr_cur != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "!(pr_up->ndpr_stateflags & NDPRF_IFSCOPE)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "nd6_prproxy_prelist_update",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "NUD/AR",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ip6_sprintf"
                },
                {
                    "string": "!RB_EMPTY(&pr->ndpr_prproxy_sols)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "pr->ndpr_prproxy_sols_cnt < max_stgt",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "pr->ndpr_prproxy_sols_cnt != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "!TAILQ_EMPTY(&soltgt->soltgt_q)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "soltgt->soltgt_cnt != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: Forwarding NS (%s) from %s to %s who has %s, originally on %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "nd6_prproxy_ns_input",
            "prototype": "",
            "backtrace": [
                "nd6_ns_input"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "!IN6_IS_ADDR_UNSPECIFIED(&daddr) && fwd_ifp",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "pr == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "!IN6_IS_ADDR_UNSPECIFIED(&daddr)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "soltgt == NULL || TAILQ_EMPTY(&soltgt->soltgt_q)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: Forwarding NA (DAD) from %s to %s tgt is %s, originally on %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Forwarding NA (NUD/AR) from %s to %s (was %s) tgt is %s, originally on %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "nd6_prproxy_na_input",
            "prototype": "",
            "backtrace": [
                "nd6_na_input"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "up->ndprl_up == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "!prproxy || ((pr->ndpr_stateflags & NDPRF_ONLINK) && !(pr->ndpr_stateflags & NDPRF_IFSCOPE))",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "pr_up != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "!prproxy || ((pr_up->ndpr_stateflags & NDPRF_ONLINK) && !(pr_up->ndpr_stateflags & NDPRF_IFSCOPE))",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "nd6_prproxy_prelist_setroute",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "max_stgt != 0 || (pr->ndpr_prproxy_sols_cnt == 0 && RB_EMPTY(&pr->ndpr_prproxy_sols))",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "nd6_prproxy_sols_purge",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "soltgt->soltgt_cnt > 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "TAILQ_EMPTY(&soltgt->soltgt_q)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "nd6_soltgt_free",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "defrouter_delreq",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: removing default router %s, scoped=%d, static=%d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: failed to delete default router %s on %s scoped %d (errno = %d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "defrouter_delreq",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ndi->ndefrouters >= 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: freeing route to %s with gateway %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "defrtrlist_del",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "selected_dr == NULL && installed_dr == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "nd_defrouter_busy",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s:%d: Return early. NULL interface",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d: NULL interface passed. Setting to default interface %s.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d: Return early. Default router select called for loopback.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d: Return early. Default router select called for interface %s in IPV6_ROUTER_MODE_EXCLUSIVE\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d: Return early. Default router is empty.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d: Return early. Interface %s's nd_ifinfo not initialized.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d: Return early. %s does not have any default routers.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Ignoring dummy entry for default router.",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Ignoring router %s that has locally hosted address.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d: Fast forward default router selection as interface %s has learned only one default router and there's nothing else to choose from.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "defrouter_select: more than one default router is installed for interface :%s.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d: Interface %s no longer has any default routers. Abort.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d: Iterate default router list again for interface %s, as the list seems to have changed during release-reaquire of global nd6_mutex lock.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d: Between release and re-acquire of global nd6_mutex lock, the list seems to have changed and it does not have any default routers for interface %s.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d: Found a better router for interface %s. Installing new default route.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d: Need to reinstall default route for interface %s as its scope has changed.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d: No need to change the default route for interface %s.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "defrouter_select",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ndi->nprefixes != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "scoped",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "non-scoped",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "nd6_prelist_add: failed to make the prefix %s/%d on-link %s on %s (errno=%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "nd6_prelist_add",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ndi->nprefixes > 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: unexpected (missing) refcnt ndpr=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "prelist_remove: failed to make %s/%d offlink on %s, errno=%d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: error unscoping %s/%d from %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s/%d unscoped, previously on %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "prelist_remove",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: ndpr %p negative refcnt @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: freeing ndpr %p with outstanding address reference (%d) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ndpr_remref",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nd_prefix_busy",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "pfxlist_onlink_check: failed to make %s/%d offlink, errno=%d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: ifnet_get_address_list_family_internal failed",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "pfxlist_onlink_check",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "prproxy",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "nd6_prefix_offlink: %s/%d on %s scoped=%d is already off-link\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "nd6_prefix_offlink: failed to delete route: %s/%d on %s, scoped %d, (errno = %d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "nd6_prefix_offlink",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "errorp != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: %s is already configured!\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s: invalid prefix length %d for %s, ignored\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: no link-local address (%s)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: no CGA available (%s)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: no CLAT46 available (%s)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: failed to make ifaddr %s on %s (errno=%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "in6_pfx_newpersistaddr",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "newia != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "!(ia0->ia6_flags & IN6_IFF_AUTOCONF)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "in6_tmpifadd: failed to find a unique random IFID\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "in6_tmpifadd: failed to add address.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "in6_tmpifadd: no public address\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "in6_tmpifadd",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nd6_prefix",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_ext"
                },
                {
                    "string": "nd6_defrouter",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_ext"
                }
            ],
            "symbol": "nd6_rtr_init",
            "prototype": "",
            "backtrace": [
                "nd6_init",
                "ip6_init",
                "in6_dinit"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "defrouter_addreq",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: ignoring router %s, scoped=%d, static=%d on advertising interface\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: adding default router %s, scoped=%d, static=%d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: ignoring router %s, rti prefix %s, scoped=%d, static=%d on advertising interface\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Default router %s mapped to ",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: failed to add default router %s on %s scoped %d (errno = %d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "defrouter_addreq",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "defrtrlist_update_common",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ndi->ndefrouters != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: ignoring router addition as we have hit the max limit of %d for max default routers.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: allocating defrouter %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "defrtrlist_update",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: nddr %p has no debug structure @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "nddr_trace",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "nddr_trace",
            "prototype": "",
            "backtrace": [
                "defrtrlist_update"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: attached nddr %p is being freed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: nddr %p cannot be freed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "nddr_free",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: ndpr %p has no debug structure @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ndpr_trace",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ndpr_trace",
            "prototype": "",
            "backtrace": [
                "nd6_prelist_add"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: attached ndpr %p is being freed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: ndpr %p cannot be freed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: ndpr %p route %p not freed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: ndpr %p non-zero solicitors count (%d) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: ndpr %p non-empty solicitors tree @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ndpr_free",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "nd6_prefix_onlink_common",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s/%d on %s scoped=%d is already on-link\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "nd6_prefix_onlink: failed to find any ifaddr to add route for a prefix(%s/%d) on %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "nd6_prefix_onlink: failed to add route for a prefix (%s/%d) on %s, gw=%s, mask=%s, flags=%x, scoped=%d, errno = %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "nd6_prefix_onlink_common",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "new_rti != NULL && dr != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "nd6_rtilist_update",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "nd6_rtilist_update",
            "prototype": "",
            "backtrace": [
                "nd6_ra_input"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nd6_rti_delreq",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "nd6_rti_delreq",
            "prototype": "",
            "backtrace": [
                "nd6_prefix_onlink_common"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nd6_rti_select",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "nd6_rti_select",
            "prototype": "",
            "backtrace": [
                "nd6_prefix_offlink"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: name length err [len=%u]\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s: input buffer size error [len=%zu]\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "net.inet6.send.cga_parameters",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "mac_system_check_info"
                },
                {
                    "string": "%s: mac_system_check_info denied.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s: could not allocate marshaling buffer.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "iov->iov_len < UINT16_MAX",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: marshalled data too large.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s: input too large [octets=%ld].\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s: in6_cga_start error=%d.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "sysctl_cga_parameters",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "bad if_index on interface from route @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "rip6_output",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "rip6_attach @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "rip6_attach",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IN6_IFEXTRA(ifp) != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "scope6_ifattach",
            "prototype": "",
            "backtrace": [
                "in6_ifattach_prelim"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "sa6_recoverscope: assumption failure (non 0 ID): %s%%%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "sa6_recoverscope",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ntohs(in6->s6_addr16[1]) == ifscope",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "in6_verify_ifscope",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "udp6_output: IPV6_V6ONLY option was set for a connected socket\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "in6p->inp_sndinprog_cnt > 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "udp6_output",
            "prototype": "",
            "backtrace": [
                "udp6_send"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "UDP6: M_MCAST is set in a unicast packet.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "udp6_input",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "udp6_abort",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "udp6_usrreq.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "udp6_abort",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s[%d, %s]: defuncting so 0x%llu drop ipv6 multicast memberships",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s[%d, %s]: defuncting so 0x%llu drop ipv4 multicast memberships",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "udp6_defunct",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "salt_tmp != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "ip6_randomid",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "key_allocsp: NULL pointer is passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "key_allocsp: Invalid direction is passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "key_allocsp",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: direction mismatched (TREE=%d SP=%d), anyway continue.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "key_allocsp",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "key_checkrequest: NULL pointer is passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "key_checkrequest: Invalid policy defined. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "key_checkrequest: error %d returned from key_acquire.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "key_checkrequest",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "key_freesp: NULL pointer is passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "key_freesp",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "key_msg2sp: NULL pointer was passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "key_msg2sp: invalid length. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "key_msg2sp: Invalid msg length.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_msg2sp: invalid ipsecrequest.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_msg2sp: invalid ipsecrequest length.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_msg2sp: invalid proto type=%u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_msg2sp: invalid mode=%u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_msg2sp: reqid=%d range violation, updated by kernel.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_msg2sp: invalid level=%u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_msg2sp: invalid request ipsecrequest len invalid for src address.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_msg2sp: invalid request invalid source address length.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_msg2sp: invalid request ipsecrequest len invalid for dst address.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_msg2sp: invalid request invalid dest address length.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_msg2sp: becoming tlen < 0.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_msg2sp: invalid policy type.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "key_msg2sp",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "key_sp2msg: NULL pointer was passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "key_getspreqmsglen returned length %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "key_sp2msg",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "key_spdacquire: NULL pointer is passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "key_spdacquire: called but there is request. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "key_spdacquire: policy mismathed. IPsec is expected. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "key_spdacquire",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "key_delsah: NULL pointer is passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "key_delsah",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "key_delsah",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "key_delsav: NULL pointer is passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "key_delsav",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "key_ismyaddr: NULL pointer is passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "key_ismyaddr",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: total stats for %u calls\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "key_timehandler",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: walked %u SPDs\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: walked %llu SAs: LARVAL SAs %u, MATURE SAs %u, DYING SAs %u, DEAD SAs %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: walked %u SAHs: DEAD SAHs %u, EMPTY SAHs %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: SAH search cost %d iters per call\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "key_spdexpire: NULL pointer is passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "key_expire: NULL pointer is passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "key_expire: Why was SA index in SA NULL. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "key_expire: invalid proto is passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "key_timehandler: spbufcount overflow, ipsec policy count %u.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_timehandler: savbufcount overflow, ipsec sa count %u.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_timehandler: invalid sav->state (queue: %d SA: %d): kill it anyway\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "key_timehandler",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "key_freereg: NULL pointer is passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "key_freereg",
            "prototype": "",
            "backtrace": [
                "key_detach"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "key_parse: NULL pointer is passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "key_parse: invalid message length.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_parse: PF_KEY version %u is mismatched.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_parse: must specify satype when msg type=%u.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_parse: illegal satype=%u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_parse: type %u isn't supported.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "key_parse",
            "prototype": "",
            "backtrace": [
                "key_output"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "key_sa_recordxfer called with sav == NULL @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "key_sa_recordxfer",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "key_sa_chgstate called with sav == NULL @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "key_sa_chgstate",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "key_sa_stir_iv called with sav == NULL @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "key_sa_stir_iv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "sah != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "(sah->flags & SECURITY_ASSOCIATION_CUSTOM_IPSEC) == SECURITY_ASSOCIATION_CUSTOM_IPSEC",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "sa_present == false",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "key_release_custom_ipsec",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "key_do_allocsa_policy",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_do_allocsa_policy: lifetime_current is NULL.\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "key_do_allocsa_policy",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "key_do_get_translated_port: lifetime_current is NULL.\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "key_natt_get_translated_port",
            "prototype": "",
            "backtrace": [
                "esp_output"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "key_newsaidx: NULL pointer is passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "flags == SECURITY_ASSOCIATION_PFKEY || flags == SECURITY_ASSOCIATION_CUSTOM_IPSEC",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "key_newsah",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "key_do_allocsa_policy: invalid proto is passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "key_send_delete",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "key_acquire: NULL pointer is passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "key_acquire: invalid proto is passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "totlen <= UINT16_MAX",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "key_acquire",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "key_getspi: NULL pointer is passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "key_getspi: invalid satype is passed.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_getspi: custom ipsec exists\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_getspi: security association head is dead\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_do_getnewspi: SPI %u exists already.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_do_getnewspi: to allocate spi is failed.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "key_getspi",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "key_newsa: NULL pointer is passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "key_newsa: invalid message is passed.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_newsa: invalid hard lifetime ext len.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "key_newsav",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "key_setsaval: NULL pointer is passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "key_setsaval: invalid message size.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_setsaval: invalid auth key ext len. len = %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_setsaval: invalid key_auth values.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_setsaval: invalid encryption key ext len. len = %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_setsaval: invalid ESP algorithm.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_setsaval: invalid key_enc value.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_setsaval: No more memory.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_setsaval: invalid SA type.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_setsaval: invalid hard lifetime ext len.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_setsaval: invalid hard lifetime value %llu.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_setsaval: invalid soft lifetime ext len.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_setsaval: invalid soft lifetime value %llu.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "key_setsaval",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "key_update: NULL pointer is passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "key_update: invalid satype is passed.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_update: no SA index found.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_update: no such a SA found (spi:%u)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_update: protocol mismatched (DB=%u param=%u)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_update: pid mismatched (DB:%u param:%u)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_update: security association head is dead\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "key_update",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "key_getmsgbuf_x1: NULL pointer is passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "key_getmsgbuf_x1",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "key_add: NULL pointer is passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "key_add: invalid satype is passed.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_add: custom ipsec exists\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_add: SA already exists.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_add: security association head is dead\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "key_add",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "key_delete: NULL pointer is passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "key_delete: invalid satype is passed.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_delete: doing delete all.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_delete: no SA found.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_delete_all: invalid sav->state (queue: %d SA: %d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "key_sockaddrcmp"
                }
            ],
            "symbol": "key_delete",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "key_get: NULL pointer is passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "key_get: invalid satype is passed.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_get: no SA found.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_get: there was invalid proto in SAD.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "key_get",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "key_acquire2: NULL pointer is passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "key_acquire2: must specify sequence number.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_acquire2: invalid satype is passed.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_acquire2: a SA exists already.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_acquire2: error %d returned from key_acquire.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "key_acquire2",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "key_register: NULL pointer is passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "(*ealgo->ivlen)(ealgo, NULL) <= UINT8_MAX",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "key_register: socket exists already.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "key_register",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "key_flush: NULL pointer is passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "key_flush: invalid satype is passed.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_flush: No more memory.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "key_flush",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "key_dump: NULL pointer is passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "key_dump: invalid satype is passed.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_dump: bufcount overflow, ipsec sa count %u.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_dump: No more memory.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_dump: there was invalid proto in SAD.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "key_dump",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "key_promisc: NULL pointer is passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "key_promisc",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "key_spdadd: NULL pointer is passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "key_spdadd: Invalid SP direction.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_spdadd: Invalid policy type.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_spdadd: some policy requests part required.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_spdadd: a SP entry exists already.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_spdadd: invalid lifetime value %llu.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_spdadd: invalid use time value %llu.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "key_spdadd",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "key_getsp: NULL pointer is passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "key_getsp",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "key_spddelete: NULL pointer is passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "key_spddelete: Invalid SP direction.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_spddelete: no SP found.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "key_spddelete",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "key_spdget: NULL pointer is passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "key_spdget: invalid message is passed.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_spdget: no SP found id:%u.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "key_spdget",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "key_spddump: NULL pointer is passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "key_spddump: bufcount overflow, ipsec policy count %u.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_spddump: No more memory.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "key_spddump",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "key_spdflush: NULL pointer is passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "key_spdflush: No more memory.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "key_spdflush",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "key_spddelete2: NULL pointer is passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "key_spddelete2: invalid message is passed.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_spddelete2: no SP found id:%u.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "key_spddelete2",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: NULL pointer is passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: invalid message is passed. missing session-id.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: invalid message is passed. short session-id.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: invalid message is passed. missing stat args.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: invalid message is passed. short stat args.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: No active SAs.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: No more memory.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: No SAs requested.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: invalid message is passed. sa stat extlen shorter than requested stat length.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: Error finding SAs.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: No SAs found.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: No bufs to dump stats.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "key_getsastat",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "key_spdenable: NULL pointer is passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "key_spdenable: invalid message is passed.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_spdenable: no SP found id:%u.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "key_spdenable",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "key_spddisable: NULL pointer is passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "key_spddisable: invalid message is passed.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_spddisable: no SP found id:%u.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "key_spddisable",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "key_migrate: NULL pointer is passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "key_migrate: invalid satype is passed.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_migrate: no mature SAH found.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_migrate: custom ipsec exists\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_migrate: Failed to migrate SA to new SAH.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "key_migrate",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "key_align: NULL pointer is passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "invalid mbuf passed to key_align @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "key_align: duplicate ext_type %u is passed.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_align: invalid ext_type %u is passed.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_align: ext type %u invalid ext length %d offset %d sadb message total len %zu is passed.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "key_align",
            "prototype": "",
            "backtrace": [
                "key_parse",
                "key_output"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "key_output: NULL pointer was passed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "key_output: not M_PKTHDR ?? @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "key_output",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "keydomain == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "key_dinit",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "key_usrreq: key_usrreq results %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "key_attach",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "audit_worker_cv",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "audit_session_init"
                },
                {
                    "string": "audit_drain_cv",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "audit_session_init"
                },
                {
                    "string": "audit_watermark_cv",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "audit_session_init"
                },
                {
                    "string": "audit_fail_cv",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "audit_session_init"
                }
            ],
            "symbol": "audit_init",
            "prototype": "",
            "backtrace": [
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Cannot get audit control port\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "audit_send_trigger",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Cannot get audit control port for analytics \n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "audit_send_analytics",
            "prototype": "",
            "backtrace": [
                "audit"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "domain",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "au_to_arg32"
                },
                {
                    "string": "protocol",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "au_to_arg32"
                },
                {
                    "string": "accounting off",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "au_to_arg32"
                },
                {
                    "string": "setaudit:auid",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "au_to_arg32"
                },
                {
                    "string": "setaudit:port",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "au_to_arg32"
                },
                {
                    "string": "setaudit:machine",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "au_to_arg32"
                },
                {
                    "string": "setaudit:as_success",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "au_to_arg32"
                },
                {
                    "string": "setaudit:as_failure",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "au_to_arg32"
                },
                {
                    "string": "setaudit:asid",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "au_to_arg32"
                },
                {
                    "string": "setaudit_addr:auid",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "au_to_arg32"
                },
                {
                    "string": "setaudit_addr:as_success",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "au_to_arg32"
                },
                {
                    "string": "setaudit_addr:as_failure",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "au_to_arg32"
                },
                {
                    "string": "setaudit_addr:asid",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "au_to_arg32"
                },
                {
                    "string": "setaudit_addr:type",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "au_to_arg32"
                },
                {
                    "string": "setaudit_addr:port",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "au_to_arg32"
                },
                {
                    "string": "operation",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "au_to_arg32"
                },
                {
                    "string": "protection",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "au_to_arg32"
                },
                {
                    "string": "inherit",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "au_to_arg32"
                },
                {
                    "string": "msg ID",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "au_to_arg32"
                },
                {
                    "string": "src dir fd",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "au_to_arg32"
                },
                {
                    "string": "dst dir fd",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "au_to_arg32"
                },
                {
                    "string": "command",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "au_to_arg32"
                },
                {
                    "string": "howto",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "au_to_arg32"
                },
                {
                    "string": "sem ID",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "au_to_arg32"
                },
                {
                    "string": "which",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "au_to_arg32"
                },
                {
                    "string": "value",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "au_to_arg32"
                },
                {
                    "string": "newval",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "au_to_arg32"
                },
                {
                    "string": "new mask",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "au_to_arg32"
                },
                {
                    "string": "prev mask",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "au_to_arg32"
                },
                {
                    "string": "sflags",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "au_to_arg64"
                },
                {
                    "string": "am_success",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "au_to_arg32"
                },
                {
                    "string": "am_failure",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "au_to_arg32"
                },
                {
                    "string": "target port",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "au_to_arg32"
                },
                {
                    "string": "task port",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "au_to_arg32"
                },
                {
                    "string": "kaudit_to_bsm(): BSM conversion requested forunknown mac_audit data type %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "au_to_data"
                },
                {
                    "string": "setkmask:as_success",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "au_to_arg32"
                },
                {
                    "string": "setkmask:as_failure",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "au_to_arg32"
                },
                {
                    "string": "setqctrl:aq_minfree",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "au_to_arg32"
                },
                {
                    "string": "setumask:as_success",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "au_to_arg32"
                },
                {
                    "string": "setumask:as_failure",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "au_to_arg32"
                },
                {
                    "string": "setsmask:as_success",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "au_to_arg32"
                },
                {
                    "string": "setsmask:as_failure",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "au_to_arg32"
                },
                {
                    "string": "setclass:ec_event",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "au_to_arg32"
                },
                {
                    "string": "setclass:ec_class",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "au_to_arg32"
                },
                {
                    "string": "setpmask:as_success",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "au_to_arg32"
                },
                {
                    "string": "setpmask:as_failure",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "au_to_arg32"
                },
                {
                    "string": "setfsize:filesize",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "au_to_arg32"
                },
                {
                    "string": "kau_close: invalid address family @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "audit_bsm.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kaudit_to_bsm",
            "prototype": "",
            "backtrace": [
                "audit_worker"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "min fd",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlen"
                },
                {
                    "string": "close-on-exec flag",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlen"
                },
                {
                    "string": "fd flags",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlen"
                },
                {
                    "string": "offset",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlen"
                }
            ],
            "symbol": "audit_sys_fcntl",
            "prototype": "",
            "backtrace": [
                "kaudit_to_bsm",
                "audit_worker"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "arg: ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcpy"
                }
            ],
            "symbol": "audit_arg_mac_string",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "auditpipe",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "devfs_make_node_clone"
                }
            ],
            "symbol": "audit_pipe_init",
            "prototype": "",
            "backtrace": [
                "audit_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "audit_pipe",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "lck_rw_done"
                }
            ],
            "symbol": "audit_pipe_open",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "&ap->ap_cv",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                }
            ],
            "symbol": "audit_pipe_read",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "auditsessions",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "devfs_make_node_clone"
                }
            ],
            "symbol": "audit_session_init",
            "prototype": "",
            "backtrace": [
                "audit_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "audit_sdev_cv",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "lck_rw_done"
                }
            ],
            "symbol": "audit_sdev_open",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "&asdev->asdev_cv",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                }
            ],
            "symbol": "audit_sdev_read",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.private.audit.user",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "audit_identity_info_destruct"
                }
            ],
            "symbol": "audit",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.private.protected-audit-control",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kalloc_type_impl_internal"
                }
            ],
            "symbol": "auditctl",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "&audit_drain_cv",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                },
                {
                    "string": "audit_rotate_vnode: Couldn't close audit file.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "audit_rotate_vnode",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "audit_worker_init: Couldn't create audit_worker thread @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "audit_worker_init",
            "prototype": "",
            "backtrace": [
                "audit_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "audit_worker_process_record: BSM_FAILURE\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "kaudit_to_bsm returned %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "audit_worker",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "audit_record_write: free space below size of audit queue, failing stop\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Audit store overflow; record queue drained. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Audit log space exhausted and fail-stop set. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "audit_worker: write error %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "audit_worker: write error %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "audit_record_write",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Re-initialisation of pthread kext callbacks. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "pthread_kext_register called without callbacks pointer. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pthread_kext_register",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "workq_mark_exiting called twice @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "workq_mark_exiting",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "Quantum expired for thread that doesn't support cooperative workqueue @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Thread should not have workq bucket of QoS UN @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "workq_kern_quantum_expiry_reevaluate",
            "prototype": "",
            "backtrace": [
                "kevent_ast",
                "ast_taken_user",
                "user_take_ast"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "failed to allocate devpath string! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "bsd_rooted_ramdisk",
            "prototype": "",
            "backtrace": [
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kdebug: PAST EVENT: debugid %#8x: time %lld from CPU %u (barrier at time %lld)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "kdebug: RETRO EVENT: debugid %#8x: time %lld from CPU %u (barrier at time %lld)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "kdebug: invalid kdebug mode %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "kdebug_common.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kernel_debug_read",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "create_buffers_triage shouldn't be called once we have inited the triage system. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "kdebug_triage.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "create_buffers_triage",
            "prototype": "",
            "backtrace": [
                "kdebug_startup",
                "ktrace_startup"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "ktriage_extract: kernel_debug_read failed with %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "KTriage Error: Subsystem code %u is invalid\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "KTriage: Subsystem %d reported %u with argument 0x%lx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "%s(arg = 0x%lx) %s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "ktriage_extract",
            "prototype": "",
            "backtrace": [
                "populate_corpse_crashinfo"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ktriage_register_subsystem_strings: set subsystem %u strings\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "ktriage_register_subsystem_strings",
            "prototype": "",
            "backtrace": [
                "decmpfs_init",
                "vfsinit",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOP-???",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcpy"
                }
            ],
            "symbol": "kernel_debug_register_callback",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kdebug: invalid name for coprocessor: %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "kdebug: invalid name for coprocessor: %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "kdebug: no callback for coprocessor `%s' @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kdebug_register_coproc",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "start_kern_tracing",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__strncpy_chk"
                },
                {
                    "string": "kdebug: allocation failed, kernel tracing not started: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "kernel tracing started with %u events, filter = %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "kdebug: unexpected filter type `%c'\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "kdebug: cannot parse `%s' as integer\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "kdebug: class 0x%lx is invalid\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "kdebug: C 0x%lx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "kdebug: class-subclass 0x%lx is invalid\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "kdebug: S 0x%lx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "kernel_debug_early_end() not call on boot processor @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "early trace done",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__strncpy_chk"
                }
            ],
            "symbol": "kdebug_trace_start",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "kdebug: invalid procfilt flags %x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kernel_debug_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kdbg_wait() called with interrupts disabled @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kdbg_wait",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Accounting resumed\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "Accounting suspended\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "acctwatch",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "aio_close",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                }
            ],
            "symbol": "_aio_close",
            "prototype": "",
            "backtrace": [
                "fp_close_and_unlock"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "aio_exit",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                }
            ],
            "symbol": "_aio_exit",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Negative total AIO count! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "proc %p: p_aio_total_count accounting mismatch @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "aio_proc_remove_done_locked",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "aio_workq_entry %p being freed while still enqueued @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "aio_free_request",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Close and exit flags set at the same time @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "do_aio_cancel_locked",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Trying to remove an entry from a work queue, but it is not on a queue @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "aio_work_thread",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "lio_pending accounting mistake @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "do_aio_completion_and_unlock",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "auth against NULL credential @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kauth_authorize_generic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "KAUTH_PROCESS_CANSIGNAL not implemented @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kauth_authorize_process_callback",
            "prototype": "",
            "backtrace": [
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "tvotohz: negative time difference %ld sec %ld usec\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "tvtohz",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.private.custom-coredump-location",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOTaskGetEntitlement"
                },
                {
                    "string": "%s/%s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "/cores/core.%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "coredump",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kauth external resolver %d failed to de-register.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "kauth_resolver_identity_reset",
            "prototype": "",
            "backtrace": [
                "usrctl",
                "sys_panic_with_data"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.private.identitysvc",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "current_thread_ro"
                },
                {
                    "string": "kauth_resolver: memberd is not setting valid result codes (assuming always successful)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: resolver %d died, waiting for a new one\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: resolver reported transient failure for request %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: resolver returned unexpected status %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "identitysvc",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "external resolver died",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "kauth_resolver_getwork",
            "prototype": "",
            "backtrace": [
                "identitysvc"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: external resolver died\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "int kauth_resolver_getwork_continue(int)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "kauth_resolver_getwork_continue",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "kauth data structure corrupted. kauth identity 0x%p with %u groups, greater than max of %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "can't allocate kauth identity with both uid and gid @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "can't allocate kauth identity with both gid and supplementary groups @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kauth_cred_cache_lookup",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kauth_identity: can't insert record with both UID and GID as key @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "kauth_identity: can't insert record without UID or GID as key @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kauth_identity_register_and_free",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kauth external resolver timed out (%d timeout(s) of %d seconds).\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "kauth_resolver_submit",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: kauth external resolver died while while waiting for work to complete\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "int __KERNEL_IS_WAITING_ON_EXTERNAL_CREDENTIAL_RESOLVER__(struct kauth_resolver_work *)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "__KERNEL_IS_WAITING_ON_EXTERNAL_CREDENTIAL_RESOLVER__",
            "prototype": "",
            "backtrace": [
                "kauth_resolver_submit"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "current_cached_proc_cred(%p) called but current_proc() is %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "current_cached_proc_cred_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kauth_cred_t backref mismatch: cred:%p cred->cr_rw:%p cred_rw:%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kauth_cred_verify_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kauth_cred_ref: cred %p over-retained @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kauth_cred_panic_over_retain",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kauth_cred_unref: cred %p over-released @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kauth_cred_panic_over_released",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Over-release of the kernel credentials @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: freeing credential with active long-term ref @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "kauth_cred_free",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kauth_cred_free",
            "prototype": "",
            "backtrace": [
                "kauth_cred_retire"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ucred_rw backref mismatch: cred_rw:%p cred_rw->crw_cred:%p cred: %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kauth_cred_rw_verify_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "cs_enforcement_disable",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "cs_relax_platform_task_ports",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "cs_library_val_enable",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "cs_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "CODE SIGNING: cs_allow_invalid() not allowed: pid %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "CODE SIGNING: cs_allow_invalid() allowed: pid %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "CODE SIGNING: cs_allow_invalid() not allowed by pmap: pid %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "cs_allow_invalid",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "CODE SIGNING: cs_invalid_page(0x%llx): p=%d[%s]\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "CODE SIGNING: cs_invalid_page(0x%llx): p=%d[%s] final status 0x%x, %s page%s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "denying",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "allowing (remove VALID)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": " sending SIGKILL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "cs_invalid_page",
            "prototype": "",
            "backtrace": [
                "vm_fault_enter_prepare"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "CoreEntitlements: This API is no longer supported\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "csblob_entitlements_dictionary_set",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "/chosen/asmb",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTLookupEntry"
                },
                {
                    "string": "lp-sip0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTGetPropertyInternal"
                },
                {
                    "string": "lp-sip1",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_csr_get_dt_bool"
                },
                {
                    "string": "lp-sip2",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_csr_get_dt_bool"
                },
                {
                    "string": "unexpected size %xu for uint64 property '%s' @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "internal-use-only-unit",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTGetPropertyInternal"
                },
                {
                    "string": "/chosen/manifest-properties",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTLookupEntry"
                },
                {
                    "string": "csr-allow-device-configuration",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTGetPropertyInternal"
                }
            ],
            "symbol": "csr_bootstrap",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vn_open_auth(fmode: %d, cmode: %d) failed with error: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "kern_write_file() failed with error: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "kern_direct_file(%s): vp size %qd, alloc %qd, mp free %qd, keep free %qd\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "kern_direct_file(%s): Not backed by block device.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "max io 0x%qx bytes\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "kern_open_file_for_direct_io",
            "prototype": "",
            "backtrace": [
                "__Z16IOPolledFileOpenPKcjyyPvmPP18IOPolledFileIOVarsPP6OSDataPhPm"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kern_close_file_for_direct_io(%p)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "vnode_close(%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "%s: unlink1(%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "kern_close_file_for_direct_io",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "kern_close_file_for_direct_io",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "_DKIOCCSPINEXTENT(%d) 0x%qx, 0x%qx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "_DKIOCCSUNPINEXTENT(%d) 0x%qx, 0x%qx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "kern_ioctl_file_extents",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "file %d/%p in flux during exec of %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "fdt_exec",
            "prototype": "",
            "backtrace": [
                "exec_mach_imgact",
                "exec_activate_image"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "fdfree: found fp with UF_RESERVED @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "fdt_invalidate",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: pid %d refc: %u != 0 @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "fileproc_free",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "fileproc_free",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "%s: called with fileproc in flux (%d/:%p) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "fp_close_and_unlock",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "bad wait queue for waitq_wakeup64_all %p (%sfp:%p) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "guarded ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "bad select_conflict_queue @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "fpdrain",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "lck_mtx_convert_spin"
                }
            ],
            "symbol": "fp_close_and_unlock",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "CODE SIGNING: Failed to find original file for supplemental signature attachment\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "sys_fcntl_nocancel",
            "prototype": "",
            "backtrace": [
                "sys_fcntl"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "ftbl_waitfd",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                }
            ],
            "symbol": "dup2",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kq(%p) invalid refcount %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kqworkloops_dealloc",
            "prototype": "",
            "backtrace": [
                "fdt_invalidate"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: proc mismatch (kq->kq_p=%p != p=%p) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "knote_fdclose",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "knote_fdclose",
            "prototype": "",
            "backtrace": [
                "fp_close_and_unlock"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: - bad wait_result (%d) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "kqueue_scan",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kqueue_scan",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "unknown kqwl thread qos update operation: %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kqworkloop_update_threads_qos",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Unexpected wait result: %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "filt_wlwait_continue",
            "prototype": "",
            "backtrace": [
                "kevent_register_wait_block",
                "filt_wlpost_register_wait"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "knote lock context not found: %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "knote_lock_slow",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s[%d](%p, %ld) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "filt_bad_event",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "filt_bad_event",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "filt_bad_touch",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "filt_bad_touch",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "filt_bad_process",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "filt_bad_process",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "KNOTE() called concurrently on knote %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "knote_post",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "filter %d cannot change QoS @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "knote_adjust_qos",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: - invalid wait_result (%d) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "kqueue_scan_continue",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kqueue_scan_continue",
            "prototype": "",
            "backtrace": [
                "kqueue_scan"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: so=%p so_pcb=%p lr=%p ref=%d lrh= %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "event_lock",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: so=%p NO PCB usecount=%d lr=%p lrh= %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "so->so_flags & SOF_PCBCLEARING",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "event_unlock",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: so=%p NULL NO so_pcb %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "event_getlock",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pid %d (tid:%llu): copyout of return_to_kernel ast flags failed with ast_addr = %llu\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "kevent_ast",
            "prototype": "",
            "backtrace": [
                "ast_taken_user",
                "user_take_ast"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ctl_enqueuembuf",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "ctl_enqueuembuf",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: %u:%u m_pkthdr.len is 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "ctl_enqueuembuf_list",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: m_allocpacket_internal(%lu) failed\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "ctl_enqueuedata",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ctl_deregister",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "ctl_deregister",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ctl_ctloutput: ctl %s returned len (%lu) > sopt_valsize (%lu)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ctl_ctloutput",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ctl_bind so_pcb null @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ctl_bind kctl null @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ctl_bind",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ctl_setup_kctl so_pcb null @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ctl_setup_kctl",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ctl_connect so_pcb null @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ctl_connect kctl null @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ctl_connect",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kcb->usecount",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                }
            ],
            "symbol": "ctl_disconnect",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s - shrunk to %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "ctl_sbrcv_trim",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "ctl_usr_rcvd",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ctl_lock: so=%p NO PCB! lr=%p lrh= %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ctl_lock: so=%p so_pcb=%p lr=%p ref=%x lrh= %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ctl_lock",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ctl_unlock: so=%p usecount=%x lrh= %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ctl_unlock: so=%p NO PCB usecount=%x lr=%p lrh= %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ctl_unlock",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ctl_getlock: so=%p usecount=%x lrh= %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ctl_getlock: so=%p NULL NO so_pcb %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ctl_getlock",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s - grown to %d error %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "ctl_rcvbspace",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "ctl_rcvbspace",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s no space in table @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s %p for %p\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "kctl_tbl_growing",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                },
                {
                    "string": "%s kctl_tbl_size %lu too big\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "kctl_tbl_grow",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "ctl_register",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kcb_find_socket",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "kcb_find_socket",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "invalid mac policy extension data @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "exec_spawnattr_getmacpolicyinfo",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.private.spawn-subsystem-root",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOTaskHasEntitlement"
                },
                {
                    "string": "com.apple.private.spawn-panic-crash-behavior",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "get_bsdtask_info"
                },
                {
                    "string": "com.apple.private.spawn-driver",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "proc_transend"
                }
            ],
            "symbol": "posix_spawn",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "exe_boothash_salt",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                }
            ],
            "symbol": "exe_boothash_salt_generate",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "load_init_program: attempting to load %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "load_init_program: failed loading %s: errno %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Process 1 exec of %s failed, errno %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "/sbin/launchd",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "load_init_program",
            "prototype": "",
            "backtrace": [
                "bsdinit_task",
                "bsd_ast",
                "ast_taken_user",
                "user_take_ast"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.developer.web-browser-engine.host",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOVnodeHasEntitlement"
                },
                {
                    "string": "com.apple.developer.web-browser-engine.rendering",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOVnodeHasEntitlement"
                },
                {
                    "string": "%s: disallowing arm64e binary with invalid RO range\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: disallowing arm64e binary with invalid dynlinker RO range\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: allowing binary \"%s\" built against preview arm64e ABI\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: (customer builds will need custom boot-args to run this binary!)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: not running binary \"%s\" built against preview arm64e ABI\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: (to allow this, add \"-arm64e_preview_abi\" to boot-args)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: disallowing arm64 platform driverkit binary \"%s\", should be arm64e\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: disallowing emulated x86 driverkit binary \"%s\", should be arm64\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "com.apple.pac.shared_region_id",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOVnodeGetEntitlement"
                },
                {
                    "string": "setting hardened runtime with entitlement mask= 0x%x on task: pid = %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "setting platform binary on task: pid = %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "clearing platform binary on task: pid = %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Disabling some mach hardening on task due to 3P plugins: pid = %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "com.apple.private.enable-coredump-on-panic",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOVnodeGetEntitlement"
                },
                {
                    "string": "%.9s-%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "exec_mach_imgact",
            "prototype": "",
            "backtrace": [
                "exec_activate_image"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "/Library/Apple/usr/libexec/oah/libRosettaRuntime",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "namei"
                }
            ],
            "symbol": "is_rosetta_supported",
            "prototype": "",
            "backtrace": [
                "exec_mach_imgact",
                "exec_activate_image"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "/dev/fd/%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "exec_extract_strings",
            "prototype": "",
            "backtrace": [
                "exec_mach_imgact",
                "exec_activate_image"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "/dev/null",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kalloc_type_impl_internal"
                }
            ],
            "symbol": "exec_handle_sugid",
            "prototype": "",
            "backtrace": [
                "exec_mach_imgact",
                "exec_activate_image"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pfz=0x%llx",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "pfz=0x%x",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "Failed to add the pfz string with error %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "MallocNanoZone=1",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "exec_add_user_string"
                },
                {
                    "string": "stack_guard=",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "exec_add_entropy_key"
                },
                {
                    "string": "malloc_entropy=",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "exec_add_entropy_key"
                },
                {
                    "string": "ptr_munge=",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "exec_add_entropy_key"
                },
                {
                    "string": "main_stack=",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlen"
                },
                {
                    "string": "main_stack=0x%llx,0x%llx,0x%llx,0x%llx",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "executable_file=",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlen"
                },
                {
                    "string": "executable_file=0x%llx,0x%llx",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "dyld_file=",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlen"
                },
                {
                    "string": "dyld_file=0x%llx,0x%llx",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "executable_cdhash=",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlen"
                },
                {
                    "string": "executable_boothash=",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlen"
                },
                {
                    "string": "subsystem_root_path=",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlen"
                },
                {
                    "string": "subsystem_root_path=%s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "ptrauth_disabled=1",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "exec_add_user_string"
                },
                {
                    "string": "arm64e_abi=",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlen"
                },
                {
                    "string": "th_port=",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlen"
                },
                {
                    "string": "th_port=0x%x",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "MallocExperiment=",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlen"
                },
                {
                    "string": "MallocExperiment=0x%llx",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "Failed to add the libmalloc experiment factors string with error %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "dyld_hw_tpro=1",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "exec_add_user_string"
                },
                {
                    "string": "Failed to add dyld hw tpro setting with error %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "dyld_hw_tpro_pagers=1",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "exec_add_user_string"
                },
                {
                    "string": "Failed to add dyld hw tpro pager setting with error %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "HardenedRuntime=0x%x",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "Failed to add hardened runtime flag with error %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "exec_add_apple_strings",
            "prototype": "",
            "backtrace": [
                "exec_mach_imgact",
                "exec_activate_image"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s0x%llx",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "scnprintf"
                },
                {
                    "string": ",0x%llx",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "scnprintf"
                }
            ],
            "symbol": "exec_add_entropy_key",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "com.apple.developer.kernel.extended-virtual-addressing",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "memorystatus_task_has_increased_memory_limit_entitlement"
                },
                {
                    "string": "com.apple.security.cs.jit-write-allowlist",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "get_bsdtask_info"
                },
                {
                    "string": "com.apple.developer.cs.jit-write-allowlist",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "get_bsdtask_info"
                },
                {
                    "string": "com.apple.security.cs.jit-write-allowlist-freeze-late",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "get_bsdtask_info"
                },
                {
                    "string": "com.apple.developer.cs.jit-write-allowlist-freeze-late",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "proc_set_pthread_jit_allowlist"
                }
            ],
            "symbol": "proc_apply_jit_and_vm_policies",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "exec_resettextvp: expected valid vp @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "exec_resettextvp",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "Allowing spawn of iOS binary %s since correct platform was passed in spawn\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "ignoring detached code signature on '%s' with cdhash '%s' because it is invalid, or not a simple adhoc signature.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "CS Platform Exec Logging: Executing platform signed binary '%s' with cdhash %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "process_signature",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "exit_thread failed to exit @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "exit_with_reason",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Process[%d] has no vm space for corpse info.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Process[%d] was destined to be corpse. But corpse is disabled by config.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Process[%d] has been terminated before it could be converted to a corpse.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Process[%d] crashed: %s. Too many corpses being created.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "pid %d exited -- no exit reason available -- (signal %d, exit %d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "pid %d exited -- exit reason namespace %d subcode 0x%llx, description %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "preinit",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strnstr"
                },
                {
                    "string": "LTE preinit process exited",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "sync"
                },
                {
                    "string": "initproc exited",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "sync"
                },
                {
                    "string": "initproc failed to start",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "sync"
                },
                {
                    "string": "%s[%d] exited",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "%s -- no exit reason available -- (signal %d, exit status %d %s)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic_with_options"
                },
                {
                    "string": "%s %s -- exit reason namespace %d subcode 0x%llx description: %.800s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic_with_options"
                },
                {
                    "string": "panic-on-crash disabled via boot-arg\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "proc_memorystatus_remove",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "memorystatus_remove"
                },
                {
                    "string": "Text page corruption detected in dying process %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "memorystatus_remove: Process[%d] tried to exit while being frozen. Blocking exit until freeze completes.",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "memorystatus_remove"
                }
            ],
            "symbol": "proc_prepareexit",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "proc_prepareexit_wait",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                },
                {
                    "string": "proc_sigdrain",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "dtrace_proc_exit"
                },
                {
                    "string": "parent child linkage broken @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "proc_exit",
            "prototype": "",
            "backtrace": [
                "thread_terminate_self"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "waitidcoll",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "mac_proc_check_wait"
                }
            ],
            "symbol": "waitid_nocancel",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "Warning : lost p_ru for %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "reap_child_locked",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "exception type %d without a valid proc @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "[%s%s] sending signal %d to process\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": ": killed",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "[%s: killed] sending signal %d and force exiting process\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "exit_with_mach_exception",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: spurious wakeup, retrying lock\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "lf_setlock",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "lf_advlock",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "cycle in wakelock list @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "lf_clearlock",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "fork1 called with unknown kind %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "fork1",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "Proc_ro_task for newly created proc %p is not NULL @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: task_create_internal failed.  Code: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: thread_create failed. Code: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "fork_create_child",
            "prototype": "",
            "backtrace": [
                "cloneproc"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Unable to allocate a new pid @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "forkproc: persona_proc_inherit failed (persona %d being destroyed?)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "forkproc",
            "prototype": "",
            "backtrace": [
                "cloneproc"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "_MALLOC: kalloc returned NULL (potential leak), size %llu @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "_MALLOC_external",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "OSMalloc_Tagfree():'%s' has bad state 0x%08X @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "OSMalloc_Tagfree_external",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "OSMalloc_Tagrele():'%s' has refcnt 0 @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "OSMalloc_Tagrele",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "[%d] code signing monitor denies JIT mapping\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "mmap",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "** %s: %d[%s] failing madvise(0x%llx,0x%llx,%s)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "MADV_FREE_REUSABLE",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "MADV_FREE",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "madvise",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d '%s': user_addr 0x%llx user_size 0x%llx cryptid 0x%x ignored\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: unable to create decrypter %s, kr=%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: mapping failed with %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "mremap_encrypted",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "persona ref count underflow! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "persona_lookup_and_invalidate",
            "prototype": "",
            "backtrace": [
                "persona"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "persona count underflow! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "persona_put_and_unlock",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "<persona>",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ERROR: PID:%d hit proc rlimit in new persona(%d): %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "persona_proc_adopt",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "chgproccnt: lost user @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "chgproccnt",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "proc_parentdropref  -ve ref @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "proc_parentdropref",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "proc being freed and unexpected refcount %p:%d:0x%x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "proc_checkdeadrefs",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Unknown format character %c in `%s'\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "pid %ld (%s), uid (%u): unexpected end of string after %% token\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlen"
                }
            ],
            "symbol": "proc_core_name",
            "prototype": "",
            "backtrace": [
                "coredump"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: callout =%d for zombie %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "proc_iterate",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "proc_childrenwalk",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "proc_childrenwalk",
            "prototype": "",
            "backtrace": [
                "fixjobc"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "pgrp_iterate",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pgrp_iterate",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "low swap: throttling pid %d (%s)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "low swap: suspending pid %d (%s)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "low swap: killing pid %d (%s)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "proc_dopcontrol",
            "prototype": "",
            "backtrace": [
                "no_paging_space_action"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "low swap: unthrottling pid %d (%s)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "low swap: resuming pid %d (%s)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "low swap: attempt to unkill pid %d (%s) ignored\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "proc_resetpcontrol",
            "prototype": "",
            "backtrace": [
                "process_policy"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "low swap: triggering no paging space action\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "low swap: killing largest compressed process with pid %d (%s) and size %llu MB\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "low swap: unable to find any eligible processes to take action on\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "no_paging_space_action",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: proc_ro already has an owning task @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "proc_ro_ref_task",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "proc_ro_ref_task",
            "prototype": "",
            "backtrace": [
                "task_create_internal"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.system-task-ports.name.safe",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "proc_ident"
                }
            ],
            "symbol": "task_name_for_pid",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.private.debug_port",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "mac_proc_check_get_task"
                }
            ],
            "symbol": "debug_control_port_for_pid",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "CODE SIGNING: marked invalid by pid %d: p=%d[%s] honoring CS_KILL, final status 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "csops_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "proc_ro->proc backref mismatch: p=%p, ro=%p, ro->pr_proc(ro)=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "panic_proc_ro_proc_backref_mismatch",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "proc_limitblock",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                }
            ],
            "symbol": "setrlimit",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.private.vfs.authorized-access",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "proc_set_thread_policy"
                },
                {
                    "string": "com.apple.private.vfs.skip-mtime-updates",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "copyout"
                },
                {
                    "string": "com.apple.private.vfs.allow-low-space-writes",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "copyout"
                }
            ],
            "symbol": "iopolicysys",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "unknown error %#x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "proc_rlimit_control",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "Quick reboot...\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "syncing disks... ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "audit_shutdown",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "halt_log_enter"
                },
                {
                    "string": "/var/log/shutdown/shutdown.trace",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kdbg_dump_trace_to_file"
                },
                {
                    "string": "shutdown.trace",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "halt_log_enter"
                },
                {
                    "string": "system_shutdown cluster_push_err failed with ENOSPC %d times\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "kern_shutdown.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "giving up\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "done\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "bufferclean",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "halt_log_enter"
                },
                {
                    "string": "if_down_all",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "halt_log_enter"
                }
            ],
            "symbol": "reboot_kernel",
            "prototype": "",
            "backtrace": [
                "reboot"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "userspace panic: %s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic_with_options"
                }
            ],
            "symbol": "panic_kernel",
            "prototype": "",
            "backtrace": [
                "reboot_kernel",
                "reboot"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Killing all processes ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "continuing\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "proc_shutdown",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "/var/log/kernel-shutdown.log",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "vnode_open"
                },
                {
                    "string": "Failed to open %s: error %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Process shutdown log.  Current time is %lu (in seconds).\n\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "sd_log"
                }
            ],
            "symbol": "sd_log",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s[%d] had to be forced closed with exit1().\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "sd_log"
                }
            ],
            "symbol": "sd_callback3",
            "prototype": "",
            "backtrace": [
                "proc_shutdown"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "sigwait with no signal wakeup @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__sigwait_nocancel",
            "prototype": "",
            "backtrace": [
                "__sigwait"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "exc handler",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "build_signal_reason"
                }
            ],
            "symbol": "threadsignal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "build_signal_reason: unable to allocate signal reason structure.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "build_signal_reason: unable to allocate signal reason buffer.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "build_signal_reason: exceeded space in signal reason buf, unable to log PID\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "build_signal_reason: exceeded space in signal reason buf, unable to log procname\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "build_signal_reason",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "psignal: bad signal number %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "unexpected SIGKILL of %s %s (no reason provided)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "unexpected SIGKILL of %s %s with reason -- namespace %d code 0x%llx description %.800s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "psignal_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "filt_signal: detected NOTE_EXIT event @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "filt_signal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ureadc: non-positive resid @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ureadc",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: bad uio_max_iovs @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "uio_free",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "uio_free",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Sched info changed?! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "kern_sysctl.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "sysctl_sched_stats",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.private.read-environment-variables",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlen"
                }
            ],
            "symbol": "sysctl_procargsx",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.private.roots-installed-read-write",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "com.apple.private.roots-installed-read-only",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "sysctl_roots_installed",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "Error: Invalid value passed to darkwake sysctl. Acceptable: 0 or 1.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "sysctl_toggle_darkwake_mode",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "trying to register a node %p with an invalid oid_number: %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Use sysctl_register_oid_early to register permanent nodes @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "sysctl_register_oid",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Trying to unregister permanent sysctl %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "sysctl_unregister_oid",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "attempting to register a sysctl at previously registered slot : %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "sysctl_register_oid_locked",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "NodeExt",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Int    ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "String ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Quad   ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Opaque ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%*s%-3d[%c%c%c%c%c] %s %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "sysctl_sysctl_debug_dump_node",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.private.write-kr-experiment-factors",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "lck_rw_done"
                }
            ],
            "symbol": "sysctl_root",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "memorystatus",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "os_log_create"
                },
                {
                    "string": "Could not allocate memorystatus_jetsam_snapshot @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "fast_jetsam_enabled",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "max_jetsam_threads",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "Could not create memorystatus_thread %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "memorystatus_init",
            "prototype": "",
            "backtrace": [
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Active",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Inactive",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "fatal",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "non-fatal",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "EXC_RESOURCE -> %s[%d] exceeded mem limit: %s%s %d MB (%s)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "memorystatus_log_exception",
            "prototype": "",
            "backtrace": [
                "task_footprint_exceeded",
                "init_task_ledgers",
                "coalitions_init",
                "kernel_bootstrap",
                "machine_startup",
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.private.memorystatus",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "mac_proc_check_memorystatus_control"
                }
            ],
            "symbol": "memorystatus_control",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "healthy",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "unhealthy",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "memorystatus: System is %s. memorystatus_available_pages: %llu compressor_size:%u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "memorystatus: zone_map_is_exhausted=%d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "memorystatus_log_system_health",
            "prototype": "",
            "backtrace": [
                "memorystatus_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "_memstat_schedule_idle_demotion_locked",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: scheduling demotion to idle band for pid %d (dirty:0x%x).\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "_memstat_schedule_idle_demotion_locked",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "VM_memorystatus_%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "killing_idle_process_aggressive",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "killing_top_process_aggressive",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "memorystatus_sort_by_largest_coalition_locked",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "memorystatus: c_segment_count=%u major compaction occurred %u seconds ago\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "memorystatus_do_action: Waking up swap thread. memorystatus_available_pages: %llu\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "memorystatus_do_action: Processing swapin queue of length: %u memorystatus_available_pages: %llu\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "memorystatus_kill_hiwat_proc: failed to allocate exit reason\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "memorystatus_kill_processes_aggressive: failed to allocate exit reason\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "memorystatus: aggressively killing up to %d processes below band %d.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "memorystatus: aggressive%d: rewinding band %d, %s(%d) moved or exiting.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "memorystatus: aggressive%d: skipping %d [%s] (exiting?)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "memorystatus: killing %s [%d] in band %d with high relaunch probability\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "memorystatus: %s%d pid %d [%s] (%s %d) - memorystatus_available_pages: %llu\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "memorystatus: giving up aggressive kill after killing %d processes below band %d.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: WARNING: more than %d leaders in priority band [%d]\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "memorystatus_thread",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "killing_highwater_process",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcpy"
                },
                {
                    "string": "killing_idle_process",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcpy"
                },
                {
                    "string": "killing_top_process",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcpy"
                },
                {
                    "string": "memorystatus: reclaimed %llu pages (%llu purged, %llu unsecluded) from pid %d [%s] and avoided %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%lu.%03d memorystatus: %s pid %d [%s] (%s %d) %lluKB - memorystatus_available_pages: %llu compressor_size:%u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "memorystatus_kill_proc",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "FOREGROUND",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "AUDIO_AND_ACCESSORY",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "CONDUCTOR",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "DRIVER_APPLE",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "EXECUTIVE",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "IMPORTANT",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "CRITICAL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "memorystatus: killing process %d [%s] in high band %s (%d) - memorystatus_available_pages: %llu\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "memorystatus_do_kill",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Caught sending pid %d a critical warning for a fatal limit. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "memorystatus_warn_process",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Unexpected non-jetsam pressure level %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "memorystatus: issuing %s jetsam pressure notification to %d waiters",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "memorystatus_broadcast_jetsam_pressure",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ephemeral-storage",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTGetPropertyInternal"
                },
                {
                    "string": "use-recovery-securityd",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTGetPropertyInternal"
                }
            ],
            "symbol": "sysctl_load_devicetree_entries",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "iPad8,6",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcpy"
                }
            ],
            "symbol": "sysctl_hw_generic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kernelmanagerd",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                }
            ],
            "symbol": "sysctl_use_kernelmanagerd",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: invalid size (%ld) for cluster %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: freeing jumbo cluster to an empty pool @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "mbuf_freecluster",
            "prototype": "",
            "backtrace": [
                "mbuf_ring_cluster_alloc",
                "nx_netif_compat_ring_alloc"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "tag->m_tag_len >= sizeof(*p)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "p->da_length > 0 && p->da_length <= MBUF_DRVAUX_MAXLEN",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "mbuf_find_drvaux",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(*flagsp & (MBUF_PKTAUXF_INET_RESOLVE_RTR | MBUF_PKTAUXF_INET6_RESOLVE_RTR)) != (MBUF_PKTAUXF_INET_RESOLVE_RTR | MBUF_PKTAUXF_INET6_RESOLVE_RTR)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "mbuf_pkthdr_aux_flags",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "WARNING: preposterous time in Real Time Clock",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": " -- CHECK AND RESET THE DATE!\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "inittodr",
            "prototype": "",
            "backtrace": [
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "image4 interface not available @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "amfi interface not available @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "amfi interface is stale: %u @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "trust_cache_runtime_init",
            "prototype": "",
            "backtrace": [
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "unable to load trust cache (type: %u): no img4_object provided\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "overflow on the img4 object: %p | %lu @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "unable to load trust cache (type: %u): img4_ext_manifest expected\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "overflow on the ext manifest: %p | %lu @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "unable to load trust cache (type: %u): img4_aux_manifest expected\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "unable to extract payload and manifest from object\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "unable to find payload within img4 object\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "unable to find manifest within img4 object\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "unable to load trust cache: invalid type: %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "unable to load trust cache: unknown type: %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "unable to load trust cache (type: %u): unsatisfied entitlement\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "disallowed to load multiple kTCTypeCryptex1BootOS trust caches\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "disallowed to load multiple kTCTypeCryptex1BootApp trust caches\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "unable to load trust cache (type: %u): %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "successfully loaded trust cache of type: %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "load_trust_cache_with_type",
            "prototype": "",
            "backtrace": [
                "load_trust_cache"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "unable to load legacy trust cache: no module provided\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "overflow on the module: %p | %lu @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "legacy trust caches are not supported on this platform @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "load_legacy_trust_cache",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "unable to query trust caches: no cdhash provided\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "query_trust_cache",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "unable to load static trust cache: interface not supported\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "unable to find chosen/memory-map in the device tree: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "unexpected size for TrustCache property: %u != %zu @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "trust cache segment is zero length but trust caches are available: %u @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "no external trust caches found (segment length is zero)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "trust cache segment isn't zero but no trust caches available: %lu @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "trust cache segment length smaller than required: %lu | %lu @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "attempting to load %u external trust cache modules\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "trust cache module start overflows: %u | %lu | %u @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "trust cache module begins after segment ends: %u | %lx | %lx @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "skipping engineering trust cache module: %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "failed to load static trust cache module: %u @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "completed loading external trust cache modules\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "load_static_trust_cache",
            "prototype": "",
            "backtrace": [
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "attempted to query static trust cache capabilities without init @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "unable to get static trust cache capabilities: interface not supported\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "static_trust_cache_capabilities",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "overflow on pmap img4 payload: %lu @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "unable to allocate memory for pmap image4 payload: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "unable to allocate memory for auxiliary image4 manifest: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "ppl_load_trust_cache",
            "prototype": "",
            "backtrace": [
                "load_trust_cache_with_type",
                "load_trust_cache"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: unable to allocate %lu bytes\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: invalid allocation\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "code_signing_allocate",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: invalid pointer provided @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: address provided: %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "code_signing_deallocate",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "attempted to disable a code signing feature invalidly: %u @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "disable_code_signing_feature",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "coretrust interface not available @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "initialized XNU provisioning profile data\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "csm_initialize_provisioning_profiles",
            "prototype": "",
            "backtrace": [
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "unable to register profile with monitor: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "csm_register_provisioning_profile",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "unable to associate profile: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "csm_associate_provisioning_profile",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: provided a NULL process\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "address_space_debugged",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "address_space_debugged",
            "prototype": "",
            "backtrace": [
                "exit_with_mach_exception"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "[%s] code-signing-violation at %p\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "csm_code_signing_violation",
            "prototype": "",
            "backtrace": [
                "handle_user_abort",
                "sleh_synchronous",
                "_fleh_synchronous"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "image4 dispatch: no input data: %llu\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "image4_ dispatch: overflow on input: %p | %lu @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "image4 dispatch: invalid input: %llu | %lu\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "image4 dispatch: pin root not supported on this platform\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "image4 dispatch: evaluate trust not supported on this platform\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "kernel_image4_monitor_trap",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "unable to unregister profile from monitor: %d | %p\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "csm_free_provisioning_profiles",
            "prototype": "",
            "backtrace": [
                "garbage_collect_provisioning_profiles"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "entered lockdown mode policy for the PPL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "csm_check_lockdown_mode",
            "prototype": "",
            "backtrace": [
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "attempted to load a too-large profile: %lu bytes @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ppl.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "unable to allocate memory for pmap profile payload: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "ppl_register_provisioning_profile",
            "prototype": "",
            "backtrace": [
                "csm_register_provisioning_profile"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "invalid object execution request: no payload\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "unable to allocate memory for image4 payload: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "unable to execute image4 object: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "ppl_image4_execute_object",
            "prototype": "",
            "backtrace": [
                "kernel_image4_execute_object"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "invalid object copy request: no object input buffer\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "invalid object copy request: no object input length\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "unable to allocate memory for image4 object: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "unable to copy image4 object: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "ppl_image4_copy_object",
            "prototype": "",
            "backtrace": [
                "kernel_image4_copy_object"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "explicit monitor-exports-get not required for the PPL\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "kernel_image4_get_monitor_exports",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "explicit release-type-set set not required for the PPL\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "kernel_image4_set_release_type",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "explicit BNCH-shadow-set not required for the PPL\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "kernel_image4_set_bnch_shadow",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "user space RB_PANIC message copyin failed",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__strncpy_chk"
                }
            ],
            "symbol": "reboot",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "user space panic_with_data message copyin failed",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcpy"
                },
                {
                    "string": "Panic called from Process: %s Message: %s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic_with_data"
                }
            ],
            "symbol": "sys_panic_with_data",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "lockdown_mode: error getting state from nvram\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "lockdown_mode: lockdown mode in nvram is %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "lockdown_mode_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "get_lockdown_mode_state",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                }
            ],
            "symbol": "get_lockdown_mode_state",
            "prototype": "",
            "backtrace": [
                "csm_check_lockdown_mode",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "sshot-entitlement-report",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "sshot-entitlement-refuse",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                }
            ],
            "symbol": "atboot_stackshot_entitlement",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.private.stackshot",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "copyin"
                }
            ],
            "symbol": "stack_snapshot_with_config",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.private.stackshot.stats",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "stackshot_get_timing"
                }
            ],
            "symbol": "sysctl_stackshot_stats",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Firehose disabled: Logging disabled by ATM\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "firehose_chunk_count",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "firehose_io_pages",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "illegal firehose configuration %u/%u, using defaults\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Firehose configured: %u chunks, %u io pages\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "oslog_init_firehose",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "log_dmesg: unable to allocate memory\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "log_dmesg",
            "prototype": "",
            "backtrace": [
                "proc_kernmsgbuf",
                "proc_info_internal"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Cannot resize system message buffer: Not enough memory\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "System message buffer configured: %lu bytes\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "sysctl_kern_msgbuf",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "OSLog stream disabled: Logging disabled by ATM\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "OSLog stream configured: stream: %lu bytes, cache: %lu bytes\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "oslog_stream_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Time 0x%lx Message ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "PMRD: PowerChangeDone: %s->%s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "use _calendarWakeAlarmUTC\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "accelerate _aotWakeTime for exit\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "accelerate _aotWakeTime for assertion\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "aotSleep at %04d/%02d/%d %02d:%02d:%02d sched: %04d/%02d/%d %02d:%02d:%02d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: Updated sleepDelaysReport %lu %lu\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: System %sSleep\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "gIOLastWakeAbsTime: %lld\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "aotWake at %04d/%02d/%d %02d:%02d:%02d sched: %04d/%02d/%d %02d:%02d:%02d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: System %sWake\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "SafeSleep ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "RTC debug alarm",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN14IOPMrootDomain17requestUserActiveEP9IOServicePKc"
                },
                {
                    "string": "hibernate user wake",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN14IOPMrootDomain17requestUserActiveEP9IOServicePKc"
                },
                {
                    "string": "PMRD: Force re-evaluating aggressiveness\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: PowerChangeDone: %s->%s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: Updated sleepDelaysReport %lu %lu\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: Force re-evaluating aggressiveness\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain15powerChangeDoneEm",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.private.getprivatesysid",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "copyin"
                }
            ],
            "symbol": "gethostuuid",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ledger syscall logic error -- command type %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ledger",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "fp_iocount overdecrement! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "seldrop_locked",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.private.coredump-encryption-key",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "Failed to handle the new encryption key. Error 0x%x",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "sysctl_coredump_encryption_key_update",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "size greater than LONG_MAX @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Expected pipe buffer wraparound disappeared @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Expected wraparound bad @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Pipe buffer overflow @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "pipewr",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                }
            ],
            "symbol": "pipe_write",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "pipecl",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "thread_wakeup_prim"
                },
                {
                    "string": "double free of pipe %p in pair %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pipeclose",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.private.record_system_event",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "copyinstr"
                }
            ],
            "symbol": "sys_record_system_event",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "systemdomain == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "systemdomain_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "unknown coalition policy suppress value %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "sys_coalition.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "sys_coalition_policy_get",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: Invalid ulock opcode %d addr %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "kdp_ulock_find_owner",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "sys_ulock.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kdp_ulock_find_owner",
            "prototype": "",
            "backtrace": [
                "stackshot_thread_wait_owner_info",
                "kdp_stackshot_record_task"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s>thread_max=%d, ull_hash_buckets=%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "ulock_initialize",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "ulock_initialize",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ttywai",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                }
            ],
            "symbol": "ttywait",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ttyin",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "msleep0"
                },
                {
                    "string": "ttyhup",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "msleep0"
                },
                {
                    "string": "ttybg3",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "msleep0"
                }
            ],
            "symbol": "ttread",
            "prototype": "",
            "backtrace": [
                "ttread"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ttydcd",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                },
                {
                    "string": "ttywri",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "msleep0"
                }
            ],
            "symbol": "ttwrite",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "load: %d.%02d ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ttyprintf"
                },
                {
                    "string": "not a controlling terminal\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ttyprintf"
                },
                {
                    "string": "no foreground process group\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ttyprintf"
                },
                {
                    "string": "foreground process without thread\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ttyprintf"
                },
                {
                    "string": " cmd: %s %d %s %ld.%02du %ld.%02ds\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "ttyprintf"
                }
            ],
            "symbol": "ttyinfo_locked",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "        ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "b_to_q"
                }
            ],
            "symbol": "ttyoutput",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "ttyrub: would panic c = %d, val = %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "ttyrub",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "tty kevent: unexpected filter: %d, kn = %p, tty = %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "filt_tty_common",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ptsopen",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                }
            ],
            "symbol": "ptsopen",
            "prototype": "",
            "backtrace": [
                "ptsd_kqfilter",
                "spec_kqfilter",
                "vn_kqfilter"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ptcread",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                }
            ],
            "symbol": "ptcread",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ptcwrite",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                }
            ],
            "symbol": "ptcwrite",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "/dev/%s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "_devfs_setattr",
            "prototype": "",
            "backtrace": [
                "ptyioctl"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ptmx_init: failed to obtain /dev/ptmx major number\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Failed to set flags on ptmx cdevsw entry. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ptmx_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ttys%03d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "devfs_make_node"
                },
                {
                    "string": "devfs_make_node() call failed for ptmx_get_ioctl()!!!!\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "ptmx_get_ioctl",
            "prototype": "",
            "backtrace": [
                "ptmx_init"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "/dev/ttys%03d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "ptmx_get_name",
            "prototype": "",
            "backtrace": [
                "ptmx_init"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "tty%c%x",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "devfs_make_node"
                },
                {
                    "string": "pty%c%x",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "devfs_make_node"
                },
                {
                    "string": "Can't mark ptc as kqueue ok @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Can't mark pts as kqueue ok @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pty_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "/dev/tty%c%x",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "pty_get_name_0",
            "prototype": "",
            "backtrace": [
                "pty_init"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "CODE SIGNING: CS Blob length overflow for addr: %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "CODE SIGNING: CS Blob length overflow for blob at: %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "CODE SIGNING: CS Blob length overflow for code directory blob at: %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "csblob_find_blob_bytes",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ubc_setsize: ubc_create_upl (error = %d) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ubc_setsize: invalidate failed (error = %d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "ubc_setsize_ex",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s : VNODE_REF_FORCE failed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ubc_map",
            "prototype": "",
            "backtrace": [
                "vnode_pager_map"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ubc_unmap",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                }
            ],
            "symbol": "ubc_unmap",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "unable to create a validated cs_blob object: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "validation of code signature failed through MACF policy: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "dyld simulator runtime is not apple signed: proc: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "CODE SIGNING: proc %d(%s) loaded %s signatures for file (%s) range 0x%llx:0x%llx flags 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "detached",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "embedded",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "check_signature[pid: %d]: error = %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "reconstitution required when code signing monitor is enabled\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "unable to register code signature with monitor: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "unable to verify code signature with monitor: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "unable to disassociate profile from code signature: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "unable to associate OSEntitlements with monitor: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "ubc_cs_blob_add",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "malformed code signature supplement blob: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "CODE SIGNING: proc %d(%s) supplemental signature for file (%s) is not a supplemental.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "CODE SIGNING: proc %d(%s) supplemental signature for file (%s) does not match any attached cdhash (error: %d).\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "check_supplemental_signature[pid: %d], error = %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "csb_next does not match expected NULL value @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "CODE SIGNING: proc %d(%s) loaded supplemental signature for file (%s) range 0x%llx:0x%llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "ubc_cs_blob_add_supplement[pid: %d]: error = %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "ubc_cs_blob_add_supplement",
            "prototype": "",
            "backtrace": [
                "sys_fcntl_nocancel",
                "sys_fcntl"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "csvnode: name: %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "csvnode: range: %lu -> %lu flags: 0x%08x platform: %s path: %s team: %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "<NO-TEAM>",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "csvnode_print_debug",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "CODESIGNING: can not re-validate a previously invalidated blob, reboot or create a new file.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "CODESIGNING: revalidate: not inline revalidating reconstituted signature.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "revalidate: check_signature[pid: %d], error = %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "ubc_cs_blob_revalidate",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Reseting cs_blob cache from all vnodes. \n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "cs_blob_reset_cache",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ubc_info_init: memory_object_create_named returned %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ubc_info_init_internal",
            "prototype": "",
            "backtrace": [
                "vnode_create_internal"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "validated CodeDirectory but unsupported type @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "cs_blob_init_validated",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "cs_blob vnode backref mismatch: blob=%p, vp=%p, blob->csb_vnode=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "panic_cs_blob_backref_mismatch",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "unable to reconstitute code signature through monitor: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "validated cs_blob has no code directory @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "unable to allocate memory for 2nd stage reconstitution: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "unable to validate code signature after 2nd stage reconstitution: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "reconstitute_code_signature_2nd_stage",
            "prototype": "",
            "backtrace": [
                "ubc_cs_blob_add"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "unable to validate security-critical blob: %d [%u|%u]\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "validate_auxiliary_signed_blobs",
            "prototype": "",
            "backtrace": [
                "ubc_cs_blob_add"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "unable to accelerate entitlements through the monitor: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "unable to adjust OSEntitlements context with monitor: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "unable to adjust OSEntitlements context without monitor: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "accelerate_entitlement_queries",
            "prototype": "",
            "backtrace": [
                "ubc_cs_blob_add"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "found team-id %s in cdblob\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "csblob_parse_teamid",
            "prototype": "",
            "backtrace": [
                "ubc_cs_blob_add"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "CodeDirectory type %d rank %d at slot 0x%x index %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "using CodeDirectory type %d (rank %d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "multiple hash=%d CodeDirectories in signature; rejecting\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "multiple entitlements blobs\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "multiple der entitlements blobs\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "multiple self constraint blobs\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "multiple parent constraint blobs\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "multiple responsible process constraint blobs\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "multiple library constraint blobs\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "cs_validate_csblob",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "disallowing unsupported code signature page shift: %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "cs_validate_codedirectory",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "unknown hash type ? @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "hash size too large @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "offset not aligned to cshash boundary @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "CODE SIGNING: cs_validate_page: mobj %p off 0x%llx: no hash to validate !?\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "CODE SIGNING: cs_validate_page: mobj %p off 0x%llx size 0x%lx: actual [0x%x 0x%x 0x%x 0x%x 0x%x] != expected [0x%x 0x%x 0x%x 0x%x 0x%x]\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "CODE SIGNING: cs_validate_page: mobj %p off 0x%llx size 0x%lx: SHA1 OK\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "CODE SIGNING: Scatter extends past Code Directory\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "CODE SIGNING: unordered Scatter, prev base %d, cur base %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "cs_validate_hash",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: domain (%d,%s) already exists for %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: domain %p (%d,%s) is already associated with %p (%d,%s)\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: domain (%d,%s) protocols need to added via net_add_proto\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "net_add_domain_old",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "dp1->dom_old != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "net_del_domain_old",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "%s: domain (%d,%s), proto %d has non-NULL pr_domain! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "_net_add_proto$XNU_INTERNAL",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: domain (%d,%s), proto %d: pr_fasttimo is deprecated and won't be called\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: domain (%d,%s), proto %d: pr_slowtimo is deprecated and won't be called\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: domain (%d,%s), proto %d: failed to attach, error %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "net_add_proto_old",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "protoctl_event_enqueue_nwk_wq_entry",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "p_laddr->sa_len <= sizeof(p_protoctl_ev->protoctl_ev_arg.laddr)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "p_raddr->sa_len <= sizeof(p_protoctl_ev->protoctl_ev_arg.raddr)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: eventhandler enqueuing event of type=protoctl_event event_code=%d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "protoctl_event_enqueue_nwk_wq_entry",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "dp->dom_flags & DOM_OLD",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "dp->dom_old != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "dom_init_old",
            "prototype": "",
            "backtrace": [
                "net_add_domain_old"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "!(dp->dom_flags & DOM_ATTACHED)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "domaininit",
            "prototype": "",
            "backtrace": [
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pp->pr_domain == dp",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "pp->pr_protosw == pp",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "detach_proto",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pp->pr_domain == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "pp->pr_protosw == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "attach_proto",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pp->pr_flags & PR_OLD",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "pp->pr_old != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "pr_init_old",
            "prototype": "",
            "backtrace": [
                "net_add_proto_old"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mbuf_class_under_pressure",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s memory-pressure on mbuf due to class %u, total %llu free %llu max %u",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mbuf_class_under_pressure",
            "prototype": "",
            "backtrace": [
                "tcp_reass",
                "tcp_input",
                "tcp6_input"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nmbclusters != 0 && !(nmbclusters & 0x1)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "m_minlimit(m_class(m)) == 0 || m_total(m_class(m)) >= m_minlimit(m_class(m))",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: done [%d MB total pool size, (%d/%d) split]\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "mbinit",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "bigcl",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "mbuf_cl",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "mbuf_bigcl",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "16kcl",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "mbuf_16kcl",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "mbinit",
            "prototype": "",
            "backtrace": [
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "!(MEXT_FLAGS(m) & EXTF_PAIRED) && MEXT_PMBUF(m) == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "m->m_type != MT_FREE",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "m_clattach",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "MBUF_IS_COMPOSITE(m) && m_get_ext_free(m) == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "m_getcl",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "to->m_flags & M_PKTHDR",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "m_copy_classifier",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "bufsize != m_maxsize(MC_16KCL) || njcl > 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: File a radar related to <rdar://10146739>. \t\t\tneeded = %u, pnum = %u, num_needed = %u \n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "m_getpackets_internal",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "m_getpackets_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "njcl > 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "m_free_func == NULL || m_free_func == m_bigfree || m_free_func == m_16kfree",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "m_allocpacket_internal *numlist is 0",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "m_allocpacket_internal wantsize unsupported",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "m_allocpacket_internal nsegs > *maxsegments",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "m_allocpacket_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "len <= MHLEN",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "len <= MLEN",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "m_prepend",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "m_copym: invalid offset %d or len %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "(mode != M_COPYM_MUST_COPY_HDR && mode != M_COPYM_MUST_MOVE_HDR) || (m->m_flags & M_PKTHDR)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "m_copym: len != M_COPYALL @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "m_copym_mode",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "m_copym_mode",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "m_copym_with_hdrs",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "m_copym_with_hdrs",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: n == NULL @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: failed negative len %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: failed len %d too big",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: m_data out of bounds",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "m_pullup",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "len >= 0 && dstoff >= 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "m_copyup",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "(copyhdr == 1 && m->m_len <= MHLEN) || (copyhdr == 0 && m->m_len <= MLEN)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "m_dup",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "!(m->m_flags & M_PKTHDR)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: cannot set M_PKTHDR on altered mbuf %llx, m_data %llx (expected %llx), m_len %d (expected 0)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "m_reinit",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "(m->m_flags & M_EXT) || m->m_data == (uintptr_t)m->m_dat",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "m_reinit",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "MEXT_REF(m) == MEXT_MINREF(m)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "MEXT_PREF(m) == MEXT_MINREF(m)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "extbuf != NULL && rfa != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "m_ext_paired_activate",
            "prototype": "",
            "backtrace": [
                "mbuf_ring_cluster_activate",
                "nx_netif_compat_na_txsync",
                "nx_netif_compat_attach",
                "nx_netif_ctl_attach",
                "nx_netif_ctl"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Invalid attempt to modify guarded module-private area: mbuf %p, pkt_flags 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "m_scratch_init",
            "prototype": "",
            "backtrace": [
                "m_copym_with_hdrs"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Invalid attempt to access guarded module-private area: mbuf %p, pkt_flags 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "mbuf_get_driver_scratch",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "m_get_rfa(m) != NULL && MBUF_IS_COMPOSITE(m)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "mz_composite_build",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(m->m_flags & M_EXT) && (MEXT_FLAGS(m) & EXTF_PAIRED)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "m_free_func != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "m_free_paired",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "remain <= MLEN",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "m_split0",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "mp0 != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "*mp0 != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "(flags & M_COPYBACK0_PRESERVE) == 0 || cp == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "tspace > 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "off == 0 || eatlen >= mlen",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "len >= mlen",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "flags & M_COPYBACK0_EXTEND",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "m_copyback0",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "len > 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "m_normalize",
            "prototype": "",
            "backtrace": [
                "dlil_output"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mbuf_watchdog_defunct",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: defuncting all sockets from %s.%d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mbuf_watchdog_defunct",
            "prototype": "",
            "backtrace": [
                "mbinit",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "len >= 0 && off >= 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "m == NULL in m_pulldown() @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "m_pulldown",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "t != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "m_tag_delete",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "(to->m_flags & M_PKTHDR) && (from->m_flags & M_PKTHDR)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "m_tag_copy_chain",
            "prototype": "",
            "backtrace": [
                "m_dup_pkthdr"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: invalid mbuf chain %p [off %u, len %u] @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "m_adj_sum16",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "m_adj_sum16",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IS_P2ALIGNED(tag, sizeof(uint64_t))",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "len == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "len != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "IS_P2ALIGNED(tag->m_tag_data, sizeof(uint64_t))",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "m_tag_alloc",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "localdomain == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "pre_unp_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "socketinit: already called...\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "socache zone",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_ext"
                }
            ],
            "symbol": "socketinit",
            "prototype": "",
            "backtrace": [
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "aso != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "so_pcb not NULL after pru_attach error %d for dom %d, proto %d, type %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "socreate_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "sobindlock",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "sobindlock",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "solisten",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "solisten",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "sofree: not queued\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "sofreelastref",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "soclose: so=%p refcount=0 @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s sp %p in so_incomp but !SS_INCOMP @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s sp %p in so_comp but !SS_COMP @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "soclose",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "msleep"
                },
                {
                    "string": "soclose: usecount is zero so=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "soclose: NOFDREF @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "soclose_locked",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "soclose: retaincnt non null and so=%p usecount=%d\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "soclose",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "soaccept: !NOFDREF @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "soacceptlock",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "soconnectlock",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "soconnectlock",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "soconnectxlocked",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "soconnectxlocked",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d so %llx ignore SS_CANTSENDMORE\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "sosendcheck",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "sosend so %p resid %lld > orig_resid %lld proc %s:%d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "sosend: so_gencnt %llu resid %lld > orig_resid %lld proc %s:%d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "sosend",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "top != NULL && (control == NULL || top->m_flags & M_PKTHDR)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "sosend_reinject",
            "prototype": "",
            "backtrace": [
                "cfil_service_inject_queue"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d so %llx ignore SS_CANTRCVMORE\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: after 2nd sblock so=%p ref=%d on socket @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: post-control !sync so=%p m=%p nextrecord=%p\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "soreceive",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "sooptcopyin_bindtodevice",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: sopt_valsize %lu > maxlen %lu",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "sooptcopyin_bindtodevice",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "%s[%d, %s]: so 0x%llu [%s %s:%d -> %s:%d] is now marked as %seligible for defunct\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s[%d, %s]: so 0x%llu [%d,%d] is now marked as %seligible for defunct\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "setsockopt: SO_APPLICATION_ID - wrong uid",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "setsockopt: SO_APPLICATION_ID - failed to set e_uuid",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "sosetoptlock",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "soopt_mcopyin @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "soopt_mcopyin",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: SB_DROP not set @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s[%d, %s]: (target pid %d name %s level %d) so 0x%llu [%d,%d] is not eligible for defunct (%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s[%d, %s]: (target pid %d name %s level %d) so 0x%llu [%d,%d] defunct by force (%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s[%d, %s]: (target pid %d name %s level %d) so 0x%llu [%d,%d] extend bk idle (%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s[%d, %s]: (target pid %d name %s level %d) so 0x%llu [%d,%d] %s defunct%s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "is already",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "marked as",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": " extbkidle",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "sosetdefunct",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s improperly called @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s[%d, %s]: (target pid %d name %s level %d) so 0x%llu [%s %s:%d -> %s:%d] is now defunct [rcv_si 0x%x, snd_si 0x%x, rcv_fl 0x%x,  snd_fl 0x%x]\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s[%d, %s]: (target pid %d name %s level %d) so 0x%llu [%d,%d] is now defunct [rcv_si 0x%x, snd_si 0x%x, rcv_fl 0x%x, snd_fl 0x%x]\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "sodefunct",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s[%d, %s]: (target pid %d name %s) so 0x%llu [%d,%d] resumed from bk idle\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "soresume",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "soresume",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s[%d, %s]: so 0x%llu [%d,%d] %s marked for extended bk idle\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "so_set_extended_bk_idle",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "so_set_extended_bk_idle",
            "prototype": "",
            "backtrace": [
                "sosetoptlock"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s[%d, %s]: so 0x%llu [%d,%d]\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "so_check_extended_bk_idle_time",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "so_check_extended_bk_idle_time",
            "prototype": "",
            "backtrace": [
                "tcp_itimer",
                "tcp_init",
                "in_dinit"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "%s[%s,%d]: so 0x%llx [%d,%d] epid %d (%s) euuid %s%s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s[%s,%d]: so 0x%llx [%d,%d] epid %d (%s) ERROR (%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "PROC_NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "so_set_effective_pid",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s[%s,%d]: so 0x%llx [%d,%d] epid %d euuid %s%s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s[%s,%d]: so 0x%llx [%d,%d] euuid %s ERROR (%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                }
            ],
            "symbol": "so_set_effective_uuid",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "assertion failed: %s, file: %s, line: %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "assfail",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: about to create invalid socketbuf @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "soreceive_addr",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "soreceive_addr",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "cm->cmsg_len <= rights->m_len",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "soreceive_ctl",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "sbwait_nointr",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "msleep"
                },
                {
                    "string": "%s: 2 sb=%p sb_flags=0x%x sb_so=%p usecount=%d lr=%p lrh= %s\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "sbwait",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s[%d, %s]: defunct so 0x%llu [%d,%d] si 0x%x, fl 0x%x [%s]\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "sowakeup",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "sowakeup",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "sbappendstream: nexpkt %p || mb %p != lastrecord %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "sbappendstream",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "sblastmbufchk"
                },
                {
                    "string": "sbappendstream 1",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "sblastrecordchk"
                },
                {
                    "string": "sbappendstream 2",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "sblastrecordchk"
                }
            ],
            "symbol": "sbappendstream",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "sblastrecordchk: mb 0x%llx lastrecord 0x%llx last 0x%llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "packet chain:\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "\t0x%llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "sblastrecordchk from %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "sblastrecordchk",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "sblastmbufchk: mb 0x%llx mbtail 0x%llx last 0x%llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "packet tree:\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "0x%llx ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "sblastmbufchk from %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "sblastmbufchk",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "sbconcat_mbufs @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "sbconcat_mbufs",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "sbappendchain",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "sblastmbufchk"
                },
                {
                    "string": "sbappendadddr 2",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "sblastrecordchk"
                }
            ],
            "symbol": "sbappendchain",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 4,
            "anchors": [
                {
                    "string": "sbappendaddrorfree @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "sbappendaddr",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "sblastrecordchk"
                },
                {
                    "string": "sbappendadddr 1",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "sblastrecordchk"
                }
            ],
            "symbol": "sbappendaddr",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "sbappendcontrol",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "sblastrecordchk"
                },
                {
                    "string": "sbappendcontrol @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "sbappendcontrol 1",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "sblastrecordchk"
                },
                {
                    "string": "sbappendcontrol_internal",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "sblastmbufchk"
                },
                {
                    "string": "sbappendcontrol 2",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "sblastrecordchk"
                }
            ],
            "symbol": "sbappendcontrol",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "m == NULL || (m->m_flags & M_PKTHDR)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "(sb->sb_flags & (SB_RECV | SB_NOCOMPRESS)) == (SB_RECV | SB_NOCOMPRESS)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: nexpkt %p || mb %p != lastrecord %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "sbappendmptcpstream_rcv",
            "prototype": "",
            "backtrace": [
                "sbappendstream_rcvdemux"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "sbdrop - count not zero\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "sbdrop",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(flags & SBL_VALID) == flags",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "sb_lock_nointr",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                },
                {
                    "string": "sb_lock",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                }
            ],
            "symbol": "sblock",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(sb->sb_flags & SB_LOCK) || (so->so_state & SS_DEFUNCT) || (so->so_flags1 & SOF1_DEFUNCTINPROG)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "sbunlock",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "soevent",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s[%d]: so %llu [%d,%d] epid %llu euuid %s%s has %d redundant events supressed\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s[%d]: so %llu [%d,%d] epid %llu euuid %s%s event posted\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "log"
                },
                {
                    "string": "%s: SO_FILT_HINT_WAKE_PKT so %p",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "soevent",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "sbappend 1",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "sblastrecordchk"
                },
                {
                    "string": "sbappend 2",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "sblastrecordchk"
                },
                {
                    "string": "sbappend 3",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "sblastrecordchk"
                }
            ],
            "symbol": "sbappend_common",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "sbappendrecord 1",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "sblastrecordchk"
                },
                {
                    "string": "sbappendrecord 2",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "sblastrecordchk"
                },
                {
                    "string": "sbappendrecord 3",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "sblastrecordchk"
                }
            ],
            "symbol": "sbappendrecord_common",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "semi-panic: sbcompress\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "sbcompress",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "accept: head=%p refcount=%d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "accept: 2 head=%p refcount=%d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "accept_nocancel",
            "prototype": "",
            "backtrace": [
                "accept"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "buflen <= SOCK_MAXADDRLEN",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "sockargs",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "connectitx",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                }
            ],
            "symbol": "connectx",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "connectit",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                }
            ],
            "symbol": "connect_nocancel",
            "prototype": "",
            "backtrace": [
                "connect"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "cp_size > buflen, something wrong with alignment! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "copyout_control",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "alloc_sendpkt",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: blocking allocation returned NULL @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "alloc_sendpkt",
            "prototype": "",
            "backtrace": [
                "sendfile"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "peer is connected but has no socket? @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "uipc_ctloutput",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "unknown socket type %d in unp_connect2 @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "unp_connect2",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "unp_lock: so=%p NO PCB! lr=%p ref=0x%x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "unp_lock: so=%p so_pcb=%p lr=%p ref=0x%x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "unp_lock",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "unp_unlock: so=%p usecount=%x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "unp_unlock: so=%p NO PCB usecount=%x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "unp_unlock",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "unp_getlock: so=%p usecount=%x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "unp_getlock: so=%p NULL so_pcb @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "unp_getlock",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "unp_conn became NULL after sleep @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "unknown socket type %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "unp_disconnect",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "uipc_accept",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: peer disconnected unp_gencnt %llu",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "uipc_accept",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "unp_attach @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "uipc_attach",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "uipc_rcvd unknown socktype @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "uipc_rcvd",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 4,
            "anchors": [
                {
                    "string": "uipc_send connected but no connection? socket state: %x socket flags: %x socket flags1: %x. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "uipc_send",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "uipc_send unknown socktype @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "rp[i]->fg_lflags & FG_INSMSGQ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "fg_insertuipc",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "fp_get_noref_locked"
                },
                {
                    "string": "%s[mDNSResponder] pid=%d (%s): op=0x%x",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "uipc_send",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "so->so_rcv.sb_flags & SB_LOCK",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "unp_gc",
            "prototype": "",
            "backtrace": [
                "unp_gc_setup"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "fg->fg_lflags & FG_RMMSGQ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "unp_discard",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vsock_domain == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "vsock_dinit",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vsock_connect",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "msleep"
                }
            ],
            "symbol": "vsock_connect",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "vsock_unlock",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vsock_domain.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "vsock_unlock",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "shmseg free count inconsistent @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "sysv_shm.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "shmget",
            "prototype": "",
            "backtrace": [
                "shmsys"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "semop - can't undo undos @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "semsys",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "semexit - semid not allocated @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "semexit - semnum out of range @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "semexit",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "semu_alloc - second attempt failed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "semundo_adjust",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "msg_cbytes is messed up @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "msg_qnum is messed up @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "msgsys",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "msg_perm.mode & MSG_LOCKED @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "segs_needed > nfree_msgmaps @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "msgsz + msg_cbytes > msg_qbytes @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "no more msghdrs @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "not enough msgmaps @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "nil free_msgmaps @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "next too low #1 @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "next out of range #1 @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "next too low #2 @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "next out of range #2 @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "didn't use all the msg segments @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "msgsnd_nocancel",
            "prototype": "",
            "backtrace": [
                "msgsys"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "msg_first/last messed up #1 @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "msg_first/last messed up #2 @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "msg_first/last messed up #3 @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "next too low #3 @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "next out of range #3 @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "msgrcv_nocancel",
            "prototype": "",
            "backtrace": [
                "msgsys"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "msginfo.msgssz=%d (0x%x) not a small power of 2; resetting to %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "msginfo.msgseg=%d (> 32767); resetting to %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "msginit: can't allocate msgpool",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "msginit: can't allocate msgmaps",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "msginit: can't allocate msghdrs",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "msginit: can't allocate msqids",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "msginit",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "msghdr->msg_spot out of range @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "msghdr->msg_spot != -1 @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "msg_freehdr",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.private.security.override-plugin-host-detection",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOVnodeHasEntitlement"
                },
                {
                    "string": "com.apple.security.cs.disable-library-validation",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOVnodeHasEntitlement"
                },
                {
                    "string": "com.apple.private.cs.automator-plugins",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOVnodeHasEntitlement"
                },
                {
                    "string": "com.apple.perl5",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlen"
                },
                {
                    "string": "com.apple.perl",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlen"
                },
                {
                    "string": "org.python.python",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlen"
                },
                {
                    "string": "com.apple.expect",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlen"
                },
                {
                    "string": "com.tcltk.wish",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlen"
                },
                {
                    "string": "com.tcltk.tclsh",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlen"
                },
                {
                    "string": "com.apple.ruby",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlen"
                },
                {
                    "string": "com.apple.bash",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlen"
                },
                {
                    "string": "com.apple.zsh",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlen"
                },
                {
                    "string": "com.apple.ksh",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlen"
                },
                {
                    "string": "%s: running binary \"%s\" in keys-off mode due to posix_spawnattr_disable_ptr_auth_a_keys_np",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: running binary \"%s\" in keys-off mode due to entitlement: %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: running binary \"%s\" in keys-off mode due to identity: %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "load_machfile",
            "prototype": "",
            "backtrace": [
                "exec_mach_imgact",
                "exec_activate_image"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pagezero boundary at 0x%llx; adjust slide from 0x%llx to 0x%llx%s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "page-unaligned X-W boundary at 0x%llx; adjust slide from 0x%llx to 0x%llx%s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "PAGEZERO",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strncmp"
                },
                {
                    "string": "proc %d: load code signature error %d for file \"%s\"\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "validating initial pages of %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "CODE SIGNING: %s[%d]: invalid initial page at offset %lld validated:%d tainted:%d csflags:0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "proc %d: set_code_unprotect() error %d for file \"%s\"\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "parse_machfile",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "+++ load_segment %s vm[0x%llx:0x%llx] file[0x%llx:0x%llx] prot %d/%d flags 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "section outside code signature\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "vmaddr too large\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "++++++ load_segment: page_zero up to 0x%llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "++++++ load_segment: mapping at vm [0x%llx:0x%llx] of file [0x%llx:0x%llx]\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "++++++ load_segment: delta mapping vm [0x%llx:0x%llx]\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "load_segment",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "__DATA_DIRTY",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strncmp"
                },
                {
                    "string": "__all_image_info",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strncmp"
                }
            ],
            "symbol": "note_all_image_info_section",
            "prototype": "",
            "backtrace": [
                "load_segment"
            ]
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "load_code_signature: %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "load_code_signature: revalidation failed: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "success, but no blob! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "mach_loader.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "load_code_signature: %s: failure to allocate exit reason for validation failure: %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "load_code_signature: %s: failed to copy reason string (kcdata_memcpy error: %d, length: %ld)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "load_code_signature: %s: failed to allocate space for reason string (os_reason_alloc_buffer error: %d, kcdata error: %d, length: %ld)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "load_code_signature",
            "prototype": "",
            "backtrace": [
                "parse_machfile"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d '%s': cryptoff 0x%llx cryptsize 0x%llx cryptid 0x%x ignored\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "set_code_unprotect",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "set_code_unprotect: unable to create decrypter %s, kr=%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "+++ set_code_unprotect: vm[0x%llx:0x%llx]\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "set_code_unprotect(): mapping failed with %x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "set_code_unprotect",
            "prototype": "",
            "backtrace": [
                "parse_machfile"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "/usr/lib/dyld",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strcmp"
                }
            ],
            "symbol": "load_dylinker",
            "prototype": "",
            "backtrace": [
                "parse_machfile"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "/usr/libexec/rosetta/runtime",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "get_macho_vnode"
                }
            ],
            "symbol": "load_rosetta",
            "prototype": "",
            "backtrace": [
                "parse_machfile"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: Error %d removing all semaphores: %ld remain!\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "psem_cache_purge_all",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "psem_cache_purge_all",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pshm_cache_add() found %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pshm_cache_add",
            "prototype": "",
            "backtrace": [
                "shm_open"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "negative usecount in pshm_close @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "pshm_deref",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "sock_connect",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                }
            ],
            "symbol": "sock_connect",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "sock_connectwait",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "msleep"
                }
            ],
            "symbol": "sock_connectwait",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: sosetopt SO_TRAFFIC_CLASS failed %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "sock_settclassopt",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "sock_settclassopt",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: negative retain count (%d) for sock=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "sock_release",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "kpi_socket.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "sock->so_usecount > 1",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "sock_release",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "sock_accept",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                }
            ],
            "symbol": "sock_accept_common",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "OSDecrementAtomic64(&net_api_stats.nas_sfltr_register_os_count) > 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "OSDecrementAtomic64(&net_api_stats.nas_sfltr_register_count) > 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "sflt_unregister",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "sflt_cleanup",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                }
            ],
            "symbol": "sflt_cleanup_thread",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s : EACCES returned by vnode_lookup for uid %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "proc_pidpathinfo_internal",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s : EACCES returned by vnode_lookup for uid 0\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s : vnode_lookup returned error %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "proc_pidpathinfo_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kern.msgbuf",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "mac_system_check_info"
                }
            ],
            "symbol": "proc_kernmsgbuf",
            "prototype": "",
            "backtrace": [
                "proc_info_internal"
            ]
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "com.apple.private.cryptexd-rsr-write",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "sysctl_proc_rsr_in_progress",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "shouldn't be applying exception notification to process! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "process_policy.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "proc_apply_resource_actions",
            "prototype": "",
            "backtrace": [
                "task_action_cpuusage",
                "proc_set_task_ruse_cpu"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "evthdlr_lists_ctxt != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "eventhandler_lists_ctxt_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "eventhandler_init",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: init",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "eventhandler_init",
            "prototype": "",
            "backtrace": [
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "evhrm",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                },
                {
                    "string": "%s: removing item %p from \"%s\"",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: marking item %p from \"%s\" as dead",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: removing all items from \"%s\"",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: marking all items from \"%s\" as dead",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "eventhandler_deregister",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "eventhandler_prune_list",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: pruning list \"%s\"",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "eventhandler_prune_list",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "TAILQ_EMPTY(&list->el_entries)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "eventhandler_lists_ctxt_destroy",
            "prototype": "",
            "backtrace": [
                "rtfree_common"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "strlen(name) <= (sizeof(new_list->el_name) - 1)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "evthdlr_lists_ctxt->eventhandler_lists_initted",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: registering event_type=%s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: creating list \"%s\"",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: adding item %p (function %p to \"%s\"",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "eventhandler_register",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "os_reason failed to allocate @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "os_reason failed to get data address @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "os_reason failed to copy description data @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "os_reason_set_description_data",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "recount: unexpected thread_selfcounts kind: %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "sys_recount.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "thread_selfcounts",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "com.apple.private.ip-domain-table",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "proc_pid"
                },
                {
                    "string": "TRACKER - %s:%d Process (%d) does not hold the necessary entitlement\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "TRACKER - %s:%d Failed to copy parameters\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "TRACKER - %s:%d Could not retrieve address family TLV from parameters\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "TRACKER - %s:%d Could not retrieve address TLV from parameters\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "TRACKER - %s:%d Address family parameter and address parameter family mismatch <%d != %d>\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "TRACKER - %s:%d Could not retrieve flags TLV from parameters\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "TRACKER - %s:%d Could not retrieve APP UUID TLV from parameters\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "TRACKER - %s:%d Could not retrieve domain TLV from parameters\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "TRACKER - %s:%d Could not retrieve domain owner TLV from parameters\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "tracker_action",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "tracker_lookup",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "is not",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_memcmp"
                },
                {
                    "string": "Lookup entry",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tracker_entry_log"
                },
                {
                    "string": "Failed to copy metadata",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tracker_entry_log"
                },
                {
                    "string": "TRACKER - %s:%d Failed lookup - remote %s null, app_uuid %s null\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "tracker_lookup",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.xnu.kern.tracker_db",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "os_log_create"
                },
                {
                    "string": "tracker_db",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "os_log_create"
                },
                {
                    "string": "%s: Can't create Tracker GC thread",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "g_tracker_gc_thread != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "TRACKER - %s:%d Failed to initialize\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "TRACKER - %s:%d Initialized: hashsize %d hashmask %lX\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "tracker_db_init",
            "prototype": "",
            "backtrace": [
                "tracker_action"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "TRACKER_GC",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "bsd_setthreadname"
                }
            ],
            "symbol": "tracker_gc_thread_func",
            "prototype": "",
            "backtrace": [
                "tracker_db_init",
                "tracker_action"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Deleting entry - IDLE TO",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tracker_entry_log"
                },
                {
                    "string": "tracker_entry_expire",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "TRACKER - %s:%d Garbage Collection done...(deleted %d - total count %d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "tracker_entry_expire",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Dumped entry",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tracker_entry_log"
                },
                {
                    "string": "tracker_entry_dump_size",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "TRACKER - %s:%d Could not dump entries, null output buffer\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "TRACKER - %s:%d Could not dump entries, failed to calculate total size needed\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "TRACKER - %s:%d Could not dump entries, failed to calculate total size needed for memory used)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "TRACKER - %s:%d Could not dump entries, failed to add 4-bytes size to start of buffer\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "TRACKER - %s:%d Could not dump entries, output buffer too small %lu (needed %lu)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "TRACKER - %s:%d Could not dump entries, failed to allocate buffer\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "TRACKER - %s:%d Could not dump entry, exceeded entry tlv buffer size\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "TRACKER - %s:%d Could not dump entries, failed to calculate total memory used\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "TRACKER - %s:%d Total memory size %zu\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "TRACKER - %s:%d Failed to copy out dump buffer (%lu bytes)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "TRACKER - %s:%d Could not calculate entry dump size - invalid addr family %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "TRACKER - %s:%d Could not dump entry - invalid addr family %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "TRACKER - %s:%d Dumping domain <%s> len <%zu>\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "TRACKER - %s:%d Dumping domain owner <%s> len <%zu>\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "tracker_dump",
            "prototype": "",
            "backtrace": [
                "tracker_action"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "Matched entry",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tracker_entry_log"
                },
                {
                    "string": "Updated entry",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tracker_entry_log"
                },
                {
                    "string": "Failed to Update entry, deleting found entry",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tracker_entry_log"
                },
                {
                    "string": "TRACKER - %s:%d Total entries %d (hashmask 0x%lX)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "tracker_search_and_insert",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "copy_metadata",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "TRACKER - %s:%d Failed to copy metadata, dst buffer size too small\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "copy_metadata",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "MATCHED only entry for featureID",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "soflow_entry_log"
                },
                {
                    "string": "Looking at entry",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "soflow_entry_log"
                },
                {
                    "string": "Found entry by feature context id",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "soflow_entry_log"
                },
                {
                    "string": "soflow_db_lookup_by_feature_context_id",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "SOFLOW - %s:%d <pid %d so %llx> No entry found for featureID %llu <count %d hash %X %X>\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "soflow_db_get_feature_context",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "soflow_db_free",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Remove entry",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "soflow_entry_log"
                },
                {
                    "string": "db->soflow_db_count == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "SOFLOW - %s:%d <pid %d so %llx> <db %p> freeing db (count == %d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "soflow_db_free",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "soflow_db_remove_entry",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "SOFLOW - %s:%d <pid %d so %llx> <Close nstat> - context %lX\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "soflow_db_remove_entry",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "soflow_entry_log",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "SOFLOW - %s:%d <pid %d so %llx> <%s>: %s <%s(%d) entry %p, featureID %llu> outifp %d lport %d fport %d laddr %s faddr %s hash %X <rx p %llu b %llu, tx p %llu b %llu>\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "soflow_entry_log",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Looking for entry",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "soflow_entry_log"
                },
                {
                    "string": "Found entry v6",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "soflow_entry_log"
                },
                {
                    "string": "Found entry v4",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "soflow_entry_log"
                },
                {
                    "string": "Entry not found",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "soflow_entry_log"
                }
            ],
            "symbol": "soflow_db_lookup_entry_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "Updated outifp",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "soflow_entry_log"
                },
                {
                    "string": "Updated address",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "soflow_entry_log"
                },
                {
                    "string": "Updated port",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "soflow_entry_log"
                },
                {
                    "string": "soflow_udp_get_address_from_control",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "SOFLOW - %s:%d <pid %d so %llx> Check control type %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "soflow_entry_update_local",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "soflow_db_add_entry",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "SOFLOW - %s:%d <pid %d so %llx> Failed to add entry\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "SOFLOW - %s:%d <pid %d so %llx> <Open nstat> - context %lX\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "SOFLOW - %s:%d <pid %d so %llx> total count %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "soflow_get_flow",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "soflow_nstat_provider_request_extensions",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "SOFLOW - %s:%d <pid %d so %llx> Collected NSTAT domain_info:pid %d domain <%s> owner <%s> ctxt <%s> bundle id <%s> is_tracker %d is_non_app_initiated %d is_silent %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "soflow_nstat_provider_request_extensions",
            "prototype": "",
            "backtrace": [
                "soflow_get_flow"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.xnu.net.soflow",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "os_log_create"
                },
                {
                    "string": "%s: Can't create SOFLOW GC thread",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "soflow_init",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "soflow_gc_thread != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "soflow_init",
            "prototype": "",
            "backtrace": [
                "soflow_get_flow"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "SOFLOW_GC",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "bsd_setthreadname"
                }
            ],
            "symbol": "soflow_gc_thread_func",
            "prototype": "",
            "backtrace": [
                "soflow_init",
                "soflow_get_flow"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "soflow_gc_expire",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "GC Idle Timeout detected",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "soflow_entry_log"
                },
                {
                    "string": "GC cleanup entry",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "soflow_entry_log"
                },
                {
                    "string": "SOFLOW - %s:%d <pid %d so %llx> <GC cleaned %d flows>\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "soflow_gc_expire",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vmm-present",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IODTGetDefault"
                }
            ],
            "symbol": "sysctl_vmm_present",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Data/Stack execution not permitted: %s[pid %d] at virtual address 0x%qx, protections were %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "vm_map_lookup_and_lock_object",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s[%d] triggered unnest of range 0x%qx->0x%qx of DYLD shared region in VM map %p. While not abnormal for debuggers, this increases system memory footprint until the target exits.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "log_unnest_badness",
            "prototype": "",
            "backtrace": [
                "vm_map_clip_unnest"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "shared_region: %p [%d(%s)] -> check_np(0x%llx)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: %p [%d(%s)] check_np(0x%llx) vm_shared_region_start_address() failed\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: %p [%d(%s)] check_np(0x%llx) vm_shared_region_auth_remap() failed\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: %p [%d(%s)] check_np(0x%llx) copyout(0x%llx) error %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: %p [%d(%s)] check_np(0x%llx) <- 0x%llx %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "shared_region_check_np",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "shared_region: %p [%d(%s)] map(): no files\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: %p [%d(%s)] map(): too many files (%d) max %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: %p [%d(%s)] map(): no mappings\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: %p [%d(%s)] map(): too many mappings (%d) max %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: %p [%d(%s)] map(): mapping count argument was too small\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "shared_region_map_and_slide_2_np",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: [%d(%s)]: map__with_linking() was disabled\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: [%d(%s)]: region_count == 0\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: [%d(%s)]: region_count too big %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: [%d(%s)]: link_info_size too small\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: [%d(%s)]: link_info_size too big %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: [%d(%s)]: failed to allocate regions\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: [%d(%s)]: failed to copyin regions kr=%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: [%d(%s)]: failed to allocate link_info\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: [%d(%s)]: failed to copyin link_info kr=%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: [%d(%s)]: unrecognized mwli_version=%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: [%d(%s)]: mwli_binds_offset too large %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: [%d(%s)]: mwli_binds_count too large %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: [%d(%s)]: mwli_chains_offset too large %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: [%d(%s)]: mwli_chains_size too small %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: [%d(%s)]: mwli_chains_size too large %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: [%d(%s)]: mwlr_fd mismatch %d and %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: [%d(%s)]: mwlr_protections EXECUTE not allowed\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: [%d(%s)]: region %d, found VM_PROT_ZF not allowed\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: [%d(%s)]: region %d, found VM_PROT_TPRO without VM_PROT_WRITE\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: [%d(%s)]: fp_get_ftype() failed, error %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: [%d(%s)]: not readable\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: [%d(%s)]: failed to get vnode, error %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: [%d(%s)]: vnode not VREG\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: [%d(%s)]: no memory object\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: [%d(%s)]: mac_file_check_mmap() failed, region %d, error %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: [%d(%s)]: region %d, not code signed\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "map_with_linking_np",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Failed attempt to set vm.enforce_shared_cache_dir sysctl\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "sysctl_scdir_enforce",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "shared_region: %p [%d(%s)] map(): copyin(0x%llx, %ld) failed (error=%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "shared_region_copyin",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "shared_region: %p [%d(%s)] map(): vm_shared_region_map_file() failed kr=0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: %p [%d(%s)] <- map\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "_shared_region_map_and_slide",
            "prototype": "",
            "backtrace": [
                "shared_region_map_and_slide_2_np"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "shared_region: %p [%d(%s)] -> map\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: %p [%d(%s)] map(): no shared region\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: map(%p) root_dir mismatch\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: %p [%d(%s)] map data >1 mapping\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: %p [%d(%s)] map data destination 0x%llx not aligned\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: %p [%d(%s)] map data size 0x%llx not aligned\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: %p [%d(%s)] map: fd=%d lookup failed (error=%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: %p [%d(%s)] map: fd=%d not readable\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: %p [%d(%s)] map: fd=%d getwithref failed (error=%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: %p [%d(%s)] map(%p:'%s'): not a file (type=%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: %p [%d(%s)] map(%p:'%s'): missing CS blob\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: %p [%d(%s)] map(%p:'%s'): not in trust cache\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: %p [%d(%s)] map(%p:'%s'): vnode_getattr(%p) failed (error=%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: %p [%d(%s)] map(%p:'%s'): owned by uid=%d instead of 0\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: %p [%d(%s)] map(%p:'%s'), vnode is not SIP-protected. \n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: %p [%d(%s)]: vnode_lookup(%s) failed (error=%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: %p [%d(%s)] map(%p:'%s'): shared cache file not in expected directory\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: %p [%d(%s)] map(%p:'%s'): vnode_size(%p) failed (error=%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: %p [%d(%s)] map(%p:'%s'): no memory object\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "shared_region: %p [%d(%s)] map(%p:'%s'): mapping #%d/%d [0x%llx:0x%llx:0x%llx:0x%x:0x%x] is not code-signed\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "shared_region_map_and_slide_setup",
            "prototype": "",
            "backtrace": [
                "_shared_region_map_and_slide",
                "shared_region_map_and_slide_2_np"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "compressor_store_stop_compaction = FALSE\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "macx_triggers",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "Failed to open swap file %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "vm_swapfile_open",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vnode_setsize for swap files failed: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "vnode_size (new file) for swap file failed: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "pin for swap files failed: %d,  file_size = %lld\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "vm_swapfile_preallocate",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "vm_map_create_upl failed with %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vm_compressor_backing_file.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "vm_swapfile_io: vnode_pagein failed with %d.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "vm_swapfile_io: vnode_pageout failed with %d.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "vm_swapfile_io",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: Invalid URL scheme for %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "imageboot_needed",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "imageboot_needed",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "not supported @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: image file not found or couldn't be read: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: attached disk image %s as %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "/dev/",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcpy"
                },
                {
                    "string": "%s: attempting to mount as hfs...\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "mount failed: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: attempting to mount as apfs...\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: failed to mount pivot image(%d)! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: failed to lookup pivot root (%d) ! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "BS-DMG failed to authenticate intra-FS \n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: could not authenticate the pivot image: %d. giving up. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: vfs_switch_root failed: %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "imageboot_pivot_image",
            "prototype": "",
            "backtrace": [
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: root device 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "vfs_mountroot() failed. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "invalid imageboot type: %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "imageboot_mount_image",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "imageboot_setup: rootvnode is NULL. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: no valid path to image. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: second level root image url is %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "-rootdmg-ramdisk",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "%s: container image url is %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "imageboot_setup_new",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s specified without %s or %s? @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: root image URL is '%s'\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Failed to mount root image (err=%d, auth=%d, ramdisk=%d) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "imageboot path allocation failed - cannot allocate %d bytes @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Bogus imageboot path URL - missing path @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: failed: imageboot_read_file_pageable() = %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: failed: di_root_ramfile_buf() = %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: failed: vfs_mountroot() = %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "imageboot_setup",
            "prototype": "",
            "backtrace": [
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: namei failed (%s) - %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: failed to get vnode size of %s - %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "negative file size @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: negative file offset\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: failed to open %s - %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "rootdmg-maxsize",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "%s: file is too large (%lld > %lld)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: file is too large for non-pageable (%lld)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: Found resource fork for %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: Cannot read %lld bytes at offset %lld from %s - %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "imageboot_read_file_internal",
            "prototype": "",
            "backtrace": [
                "imageboot_setup",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "kpc_init not called @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "kern_kpc.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kpc_sysctl",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kern.profiling_data",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "mac_system_check_info"
                }
            ],
            "symbol": "grab_pgo_data",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nullfs_pagein: ubc_upl_map() failed with (%d) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "nullfs_pagein: ubc_upl_unmap() failed with (%d) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "nullfs_pagein",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "__netns_inited == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "netns.ns_reservation",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "skmem_cache_create"
                },
                {
                    "string": "netns_init",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "netns.ns_token",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "skmem_cache_create"
                },
                {
                    "string": "netns.ns_flow_info",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "skmem_cache_create"
                }
            ],
            "symbol": "netns_init",
            "prototype": "",
            "backtrace": [
                "skywalk_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(nt->nt_flags & NETNS_OWNER_MASK) <= NETNS_OWNER_MAX",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "netns_release",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "(nt->nt_flags & NETNS_OWNER_MASK) == NETNS_BSD",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "old_namespace != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "netns_change_addr",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "!((set_flags | clear_flags) & NETNS_RESERVATION_FLAGS)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "netns_change_flags",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "netns_get_local_ports",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "netns_get_local_ports",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "RB_EMPTY(&namespace->ns_reservations)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "netns_ns_free",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 5,
            "anchors": [
                {
                    "string": "(flags & NETNS_OWNER_MASK) <= NETNS_OWNER_MAX",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "proto == IPPROTO_TCP || proto == IPPROTO_UDP",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "hport != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "nt->nt_addr_len == addr_len",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "memcmp(nt->nt_addr, addr, addr_len) == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "nt->nt_proto == proto",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "nt->nt_port == hport",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "(nt->nt_flags & NETNS_RESERVATION_FLAGS | NETNS_PRERESERVED) == (flags & NETNS_RESERVATION_FLAGS)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "Request to overwrite valid netns token @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "nt->nt_flow_info != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "_netns_reserve_kpi_common",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "res != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "NETNS_REF_COUNT(res, flags) > 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "_netns_release_common",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "port != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "_netns_reserve_common: invalid owner 0x%x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "NETNS_REF_COUNT(res, flags) != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "_netns_reserve_common",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "token->nt_addr_len == sizeof(struct in_addr) || token->nt_addr_len == sizeof(struct in6_addr)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "__netns_get_if_local_ports_block_invoke",
            "prototype": "",
            "backtrace": [
                "netns_get_if_local_ports"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "__protons_inited == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "protons_init",
            "prototype": "",
            "backtrace": [
                "skywalk_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pflowid != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "pflow_key != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "domain >= FLOWIDNS_DOMAIN_MIN && domain <= FLOWIDNS_DOMAIN_MAX",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "failed to allocate flowid node\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "retry_cnt <= FLOWIDNS_MAX_FLOWID_GEN_RETRY",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "flowidns_domain_array[domain].fd_nallocs != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "flowidns_allocate_flowid",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "flowid != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "flowid 0x%x not found in domain %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "flowidns_domain_array[domain].fd_nreleases != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "flowidns_release_flowid",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "__flowidns_inited == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "flowidns_init",
            "prototype": "",
            "backtrace": [
                "skywalk_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "n_records <= UINT32_MAX",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "n_records > 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "n_records == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "flowidns_stats_sysctl",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "!__sk_inited",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "skywalk_init",
            "prototype": "",
            "backtrace": [
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "__u._u64 != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "sk_gen_guard_id",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "p != kernproc",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "skywalk_kill_process",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "leaked skoid sub-node detected %p %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "skywalk_sysctl.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "skoid_destroy",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "csi->csi_flags & CSI_DESTROYED",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "tcall != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "csi_destroy",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "port != NEXUS_PORT_ANY",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "ch_open",
            "prototype": "",
            "backtrace": [
                "__channel_open"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(ch->ch_flags & CHANF_EVENT_RING) != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "filt_che_event",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(ch->ch_last[NR_EV] - ch->ch_first[NR_EV]) == 1",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "ch_event",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ch->ch_flags & CHANF_KERNEL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "ch_close_common",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "hw_kring != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "kern_channel_tx_refill_common",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "err == 0 && ph_cnt == (uint32_t)ph_needed",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "kr_txfinalize",
            "prototype": "",
            "backtrace": [
                "na_rings_mem_setup"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "!sk_is_sync_protected()",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "__channel_sync",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "h %zu add_called %zu tmp_h %zu @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "cuckoo_hashtable.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "__resize_begin",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                }
            ],
            "symbol": "cuckoo_resize",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "net_filter_event_callback",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "net_filter_event: new state (0x%x) %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: eventhandler saw event type=net_filter_event_state event_code=%s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "net_filter_event_callback",
            "prototype": "",
            "backtrace": [
                "net_filter_event_init"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "socket ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "sbuf_cat"
                },
                {
                    "string": "interface ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "sbuf_cat"
                },
                {
                    "string": "application-firewall ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "sbuf_cat"
                },
                {
                    "string": "parental-controls ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "sbuf_cat"
                }
            ],
            "symbol": "net_filter_event_description",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "net_filter_event_enqueue",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: eventhandler enqueuing event of type=net_filter_event_state event_code=%s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "net_filter_event_mark",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "skmem_dump_buf != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "Region %p\n  | Mode         : 0x%b\n  | Memory       : [%llu in use [%llu wired]] / [%llu total]\n  | Transactions : [%llu segment allocs, %llu frees]\n\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "Cache %p\n  | Mode         : 0x%b\n  | Memory       : [%llu in use] / [%llu total]\n  | Transactions : [%llu alloc failures]\n  |                [%llu slab creates, %llu destroys]\n  |                [%llu slab allocs,  %llu frees]\n\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "VM Pages\n  | Free         : %u [%u speculative]\n  | Active       : %u\n  | Inactive     : %u\n  | Wired        : %u [%u throttled, %u lopage_free]\n  | Purgeable    : %u [%u purged]\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "skmem_dump",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "sk_sys_region == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "failed to allocate global sysctls region @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "failed to allocate global sysctls object (%u bytes) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "skmem_init",
            "prototype": "",
            "backtrace": [
                "skywalk_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nexus",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "nxv->flowswitch_nxv_adv->nxadv_ver == NX_FLOWSWITCH_ADVISORY_CURRENT_VERSION",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "nxv->netif_nxv_adv->nna_version == NX_NETIF_ADVISORY_CURRENT_VERSION",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: invalid advisory type %d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "skmem_arena_create_for_nexus",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "schema.%.*s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tsnprintf"
                },
                {
                    "string": "ring.%.*s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tsnprintf"
                }
            ],
            "symbol": "skmem_arena_create_for_nexus",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kstats.%s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tsnprintf"
                }
            ],
            "symbol": "skmem_arena_create_for_necp",
            "prototype": "",
            "backtrace": [
                "necp_arena_initialize"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s_ksd.%.*s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tsnprintf"
                }
            ],
            "symbol": "skmem_arena_sd_setup",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ar->ar_refcnt > 1",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "ar->ar_maprdrcnt != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "skmem_arena_munmap_common",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "skywalk.skm",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_ext"
                }
            ],
            "symbol": "skmem_cache_pre_init",
            "prototype": "",
            "backtrace": [
                "skmem_init",
                "skywalk_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "skmem_debug",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "bufctl.audit",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "skmem_cache_create"
                },
                {
                    "string": "bufctl",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "skmem_cache_create"
                },
                {
                    "string": "%s: bad alignment %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "mg.%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "skmem_cache_magsize_last->mt_minbuf == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "skmem_cache_magsize_last->mt_maxbuf == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s: thread_call_allocate failed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "skmem_cache_init",
            "prototype": "",
            "backtrace": [
                "skmem_init",
                "skywalk_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "powerof2(bufalign)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "!(cflags & SKMEM_CR_BATCH)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "region->skr_c_obj_size >= P2ROUNDUP(bufsize, bufalign)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "objalign == region->skr_align",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "IS_P2ALIGNED(skm, CHANNEL_CACHE_ALIGN_MAX)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "!(region->skr_mode & SKR_MODE_MMAPOK)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "!(region->skr_mode & SKR_MODE_PSEUDO)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "region->skr_c_obj_size >= sizeof(struct skmem_obj)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "%s.%s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "%s: (bufsize %lu, chunksize %lu) > objsize %lu @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "skmem_cache_create",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "skmem_cache_create",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: '%s' (%p) not empty (%llu unfreed) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "skmem_cache_destroy",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "skmem_cache_destroy",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: %s failed to get object info for %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "skmem_cache_get_obj_info",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "skmem_cache_get_obj_info",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ncpu != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "chunksize > 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "mtp <= skmem_cache_magsize_last",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "skmem_cache_magazine_max",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: %s failed to get bufctl for %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "skmem_audit_buf",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "skmem_audit_buf",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "skmem_seg_size",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "skmem_seg_size != 0 && (skmem_seg_size % SKMEM_PAGE_SIZE) == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "skmem_md_seg_size",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "skmem_drv_buf_seg_size",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "(skmem_drv_buf_seg_eff_size % SKMEM_MIN_SEG_SIZE) == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "skmem_drv_buf_seg_eff_size >= skmem_drv_buf_seg_size",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "skmem_usr_buf_seg_size",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                }
            ],
            "symbol": "skmem_region_init",
            "prototype": "",
            "backtrace": [
                "skmem_init",
                "skywalk_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "align != 0 && (align % SKMEM_CACHE_ALIGN) == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "powerof2(align)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "seglim != 0 && (seglim % SKMEM_PAGE_SIZE) == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "skmem_region_params_config",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s.reg.%s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "skmem_region_create",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "(skmflag & (SKMEM_NOSLEEP | SKMEM_FAILOK)) != (SKMEM_NOSLEEP | SKMEM_FAILOK)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "\"%s\": failed to allocate segment (sleeping mode) after %u retries\n\n%s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "skmflag & (SKMEM_NOSLEEP | SKMEM_FAILOK)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "(skmflag & (SKMEM_NOSLEEP | SKMEM_FAILOK)) == SKMEM_NOSLEEP",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "\"%s\": skr 0x%p unable to satisfy mandatory allocation\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "sg != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "sg->sg_index == sg0->sg_index",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "skmem_region_alloc",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: '%s' (%p) not empty (%u unfreed) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "skmem_region_destroy",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "skmem_region_destroy",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: '%s' (%p) idx %u (out of %u) is already allocated @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "sksegment_alloc_with_idx",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "!bit_test(skr->skr_seg_bmap[idx / BMAPSZ], idx % BMAPSZ)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "sksegment_alloc_with_idx",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "sg->sg_md == md",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "Fail to unwire md %p, err %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Fail to discard md %p, err %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "skmem_region_free",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "\"%s\": skr 0x%p sg 0x%p (idx %u) unable to satisfy mandatory allocation\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Fail to reclaim md %p, err %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Fail to wire md %p, err %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Fail to set md %p, err %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "sksegment_freelist_remove",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "\"%s\": boff_total counter overflows\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "\"%s\": failed to allocate slab (sleeping mode) after %llu msec, %u retries\n\n%s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "boff > 0 && ((uint32_t)boff <= (SKMEM_SLAB_BACKOFF_THRES * 2))",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "skmem_slab_alloc_locked",
            "prototype": "",
            "backtrace": [
                "skmem_cache_create"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IS_P2ALIGNED(buf, skm->skm_bufalign)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "skmem_slab_alloc_pseudo_locked",
            "prototype": "",
            "backtrace": [
                "skmem_cache_create"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "%s: attempt to free invalid or already-freed obj %p on skm %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "skmem_slab_free_locked",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "skmem_slab.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "SKMEM_SLAB_MEMBER(sl, buf)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "skmem_slab_free_locked",
            "prototype": "",
            "backtrace": [
                "skmem_cache_create"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "IS_P2ALIGNED(obj, skm->skm_bufalign)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "skmem_slab_free_pseudo_locked",
            "prototype": "",
            "backtrace": [
                "skmem_cache_create"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nx_port_info_size(npi->npi_info, &sz) == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "nx_port_unbind",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nx_port_info_size(info, &sz) == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "__nx_port_free_all_block_invoke",
            "prototype": "",
            "backtrace": [
                "nx_port_free_all"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "struct nx_port_info",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kfree_ext"
                }
            ],
            "symbol": "nx_port_free_all",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "fae->fae_flowid == flowid",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "na_flowadv_entry_free",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ALLOC",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "LARGE ALLOC",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "na_rings_mem_setup",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "sd_idle || defunct",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "internalized packet 0x%llx in htbl @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "nexus_adapter.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "na_kr_teardown_common",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.private.skywalk.traffic_rule.write",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "get_threadtask"
                },
                {
                    "string": "com.apple.private.skywalk.traffic_rule.read",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "get_threadtask"
                }
            ],
            "symbol": "nxioctl",
            "prototype": "",
            "backtrace": [
                "nxop_ioctl"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nxdom_attach_all",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "nxdom_attach_all",
            "prototype": "",
            "backtrace": [
                "nexus_init",
                "skywalk_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "!(nxdom_prov->nxdom_prov_flags & NXDOMPROVF_ATTACHED)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "!(nxdom_prov->nxdom_prov_flags & NXDOMPROVF_INITIALIZED)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "builtin && nxdom_prov_default[type] == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "nxdom_prov_add",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nxdom_prov_default[type] == nxdom_prov",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "!nxdom_prov_release_locked(nxdom_prov)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "nxdom_prov_del",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "(tmp4xpipes == 0) || (rx_rings == tx_rings)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "CHANNEL_SCHEMA_SIZE(tmpsumrings) <= UINT32_MAX",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "nxprov_params_adjust",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nxprov_detacher",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "msleep0"
                }
            ],
            "symbol": "nxprov_detacher",
            "prototype": "",
            "backtrace": [
                "nxdom_attach_all",
                "nexus_init",
                "skywalk_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nxprov_detacher_cont",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kfree_type_impl_internal"
                }
            ],
            "symbol": "nxprov_detacher_cont",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nx_pktq_empty(q)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "nx_netif_filter_fini",
            "prototype": "",
            "backtrace": [
                "nx_netif_clean"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.skywalk.nexus.traffic_rule",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kern_allocation_name_allocate"
                }
            ],
            "symbol": "nexus_init",
            "prototype": "",
            "backtrace": [
                "skywalk_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "strlcmp(ntr->ntr_ifname, ifname, sizeof(ntr->ntr_ifname)) == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "inet_traffic_rule_match",
            "prototype": "",
            "backtrace": [
                "inet_traffic_rule_find",
                "add_traffic_rule",
                "add_traffic_rule_generic",
                "nxioctl_add_traffic_rule_inet",
                "nxioctl",
                "nxop_ioctl"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s_%llu:%u",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "nx_fsw_dom_connect",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "__nx_fsw_ifnet_eventhandler_tag != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "__nx_fsw_protoctl_eventhandler_tag != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "fsw_use_dual_sized_pool",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                }
            ],
            "symbol": "fsw_init",
            "prototype": "",
            "backtrace": [
                "nx_fsw_dom_init"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "if_input_netem_%s@fsw",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tsnprintf"
                }
            ],
            "symbol": "fsw_ctl",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "fsw_ifnet_event_callback",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: eventhandler saw event type=intf_event event_code=%s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "fsw_ifnet_event_callback",
            "prototype": "",
            "backtrace": [
                "fsw_init",
                "nx_fsw_dom_init"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "fsw_protoctl_event_callback",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: eventhandler saw event type=protoctl_event event_code=%d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "fsw_protoctl_event_callback",
            "prototype": "",
            "backtrace": [
                "fsw_init",
                "nx_fsw_dom_init"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "fsw_detach",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                },
                {
                    "string": "fsw->fsw_detach_flags != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "fsw->fsw_detach_flags == FSW_DETACHF_DETACHED",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "_detached",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tsnprintf"
                }
            ],
            "symbol": "fsw_detach",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "fsw_%s[%u]_%s.%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "fsw_vp_na_create",
            "prototype": "",
            "backtrace": [
                "fsw_attach_vp",
                "nx_fsw_na_find",
                "na_find"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "fsw_ring_enqueue_tail_drop",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "droptap_input_packet"
                }
            ],
            "symbol": "fsw_ring_enqueue_tail_drop",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s_%llu",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tsnprintf"
                },
                {
                    "string": "fsw_dp_ctor",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "fsw->fsw_reap_thread != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "fsw_dp_ctor",
            "prototype": "",
            "backtrace": [
                "nx_fsw_prov_nx_ctor"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "_fsw_receive_locked",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "droptap_input_packet"
                }
            ],
            "symbol": "fsw_receive",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "dp_flow_tx_route_process",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "droptap_output_packet"
                }
            ],
            "symbol": "dp_flow_tx_process",
            "prototype": "",
            "backtrace": [
                "flow_entry_alloc",
                "flow_mgr_flow_add",
                "fsw_flow_add"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "invalid tso flags: 0x%x\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "fsw_dp.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "_pkt_copypkt_sum(sph, soff, dph, doff, len, partial, do_csum)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "fsw_ring_flush",
            "prototype": "",
            "backtrace": [
                "fsw_vp_na_txsync",
                "fsw_vp_na_create",
                "fsw_attach_vp",
                "nx_fsw_na_find",
                "na_find"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "!(fsw->fsw_reap_flags & FSW_REAPF_RUNNING)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "fsw_reap_thread_func",
            "prototype": "",
            "backtrace": [
                "fsw_dp_ctor",
                "nx_fsw_prov_nx_ctor"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "fe->fe_flags & FLOWENTF_ABORTED",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "i == cnt && cnt >= freed",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "fsw_reap_thread_cont",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "frag_limit",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "skoid_add_uint"
                },
                {
                    "string": "frag_count",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "skoid_add_uint"
                },
                {
                    "string": "queue_limit",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "skoid_add_uint"
                },
                {
                    "string": "queue_count",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "skoid_add_uint"
                },
                {
                    "string": "drain",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "skoid_add_handler"
                }
            ],
            "symbol": "fsw_ip_frag_mgr_create",
            "prototype": "",
            "backtrace": [
                "fsw_host_setup",
                "fsw_ctl_attach",
                "fsw_ctl"
            ]
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "ln->ln_state > ND6_LLINFO_INCOMPLETE",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "fsw_ethernet_resolve",
            "prototype": "",
            "backtrace": [
                "fsw_host_setup",
                "fsw_ctl_attach",
                "fsw_ctl"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "fsw_flow_add",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                }
            ],
            "symbol": "fsw_flow_add",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "fsw_flow_del",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                }
            ],
            "symbol": "fsw_flow_del",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: QoS Marking mode invalid! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "fsw_qos.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "fsw_qos_mark",
            "prototype": "",
            "backtrace": [
                "dp_flow_tx_process",
                "flow_entry_alloc",
                "flow_mgr_flow_add",
                "fsw_flow_add"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "flow.owner",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "skmem_cache_create"
                },
                {
                    "string": "flow_init",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "flow.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "flow.entry",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "skmem_cache_create"
                },
                {
                    "string": "sk_fadv_nchunks != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "flow.adv.bmap",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "skmem_cache_create"
                }
            ],
            "symbol": "flow_init",
            "prototype": "",
            "backtrace": [
                "nx_fsw_dom_init"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pkt_len >= cls_len",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "af != AF_UNSPEC",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "flow_pkt_classify",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "RB_EMPTY(&flow_mgr_head)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "nx_fsw_dom_terminate",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "NETNS_TOKEN_VALID(&fe->fe_port_reservation) || !(fe->fe_key.fk_mask & FKMASK_SPORT) || req->nfr_flags & NXFLOWREQF_ASIS || (fe->fe_flags & FLOWENTF_CHILD)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "(req->nfr_flags & NXFLOWREQF_FLOWADV) ^ (req->nfr_flowadv_idx == FLOWADV_IDX_NONE)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "err != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "saddr->sa.sa_family == AF_INET || saddr->sa.sa_family == AF_INET6",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "flow_mgr_flow_add",
            "prototype": "",
            "backtrace": [
                "fsw_flow_add"
            ]
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "nx_port != NEXUS_PORT_ANY",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "nx_port_na != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "fo_cnt <= 1",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "flow_owner_activate_nexus_port",
            "prototype": "",
            "backtrace": [
                "fsw_port_na_activate",
                "fsw_vp_na_activate",
                "fsw_vp_na_create",
                "fsw_attach_vp",
                "nx_fsw_na_find",
                "na_find"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "fo->fo_num_flowadv == fo->fo_flowadv_max",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "flow_owner_flowadv_index_alloc",
            "prototype": "",
            "backtrace": [
                "flow_entry_alloc",
                "flow_mgr_flow_add",
                "fsw_flow_add"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "fe->fe_nx_port == fo->fo_nx_port",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "flow_owner_bucket_activate_nx_port_common",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "flow.route",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "skmem_cache_create"
                }
            ],
            "symbol": "flow_route_init",
            "prototype": "",
            "backtrace": [
                "flow_init",
                "nx_fsw_dom_init"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "fr->fr_usecnt > 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "flow_route_release",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "src_ifp != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "flow_route_select_laddr",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "!(fr->fr_flags & FLOWRTF_ATTACHED)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "fr->fr_usecnt == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "fr->fr_rt_dst == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "fr->fr_rt_evhdlr_tag == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "fr_free",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "!uuid_is_null(ee_arg.ee_fm_uuid)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "!uuid_is_null(ee_arg.ee_fr_uuid)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "flow_route_ev_callback",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: eventhandler saw event type=route_event event_code=%s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "flow_route_ev_callback",
            "prototype": "",
            "backtrace": [
                "flow_route_configure"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "gencnt != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "ip_v == IPVERSION || ip_v == IPV6_VERSION",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "_flow_route_laddr_validate",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "flow.stats",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "skmem_cache_create"
                },
                {
                    "string": "flow_stats_init",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "flow_stats.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "flow_stats_init",
            "prototype": "",
            "backtrace": [
                "flow_init",
                "nx_fsw_dom_init"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "os_ref_get_count(&fs->fs_refcnt) == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "flow_stats_free",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "m != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "flow_track_abort_quic",
            "prototype": "",
            "backtrace": [
                "flow_entry_destroy"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "flow_rx_agg_tcp",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "pp_drop_pktq"
                }
            ],
            "symbol": "flow_rx_agg_tcp",
            "prototype": "",
            "backtrace": [
                "flow_entry_alloc",
                "flow_mgr_flow_add",
                "fsw_flow_add"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kern_buflet_set_data_length(dbuf->dba_buflet[i], tmplen + buf_off) == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "_copy_data_sum_dbuf",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "stcp->th_off << 2 == pkt->pkt_flow_tcp_hlen",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "flow_agg_merge_hdr",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "kern_buflet_set_data_length(dbuf->dba_buflet[0], kern_buflet_get_data_length(dbuf->dba_buflet[0]) + copied_len) == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "copy_pkt_csum",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "flow_rx_agg_channel",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "pp_drop_pktq"
                },
                {
                    "string": "spkt->pkt_headroom == 0 && spkt->pkt_l2_len == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "flow_rx_agg_channel",
            "prototype": "",
            "backtrace": [
                "flow_rx_agg_tcp",
                "flow_entry_alloc",
                "flow_mgr_flow_add",
                "fsw_flow_add"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s%s/%s%s%s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "nx_monitor_na_find",
            "prototype": "",
            "backtrace": [
                "na_find"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "na_arena->arn_rx_pp->pp_md_type == NEXUS_META_TYPE_PACKET",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "nx_mon_na_activate_common",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "IS_P2ALIGNED(len, 64)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "IS_P2ALIGNED(dbuf, sizeof(uint64_t))",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "len <= UINT16_MAX",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "nx_mon_quantum_copy_64x",
            "prototype": "",
            "backtrace": [
                "nx_mon_na_activate_common"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "netif_%llu",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tsnprintf"
                }
            ],
            "symbol": "nx_netif_prov_nx_ctor",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "qset_ext->qe_prov_ctx != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "qset_ext->qe_notify_steering_info != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "nx_netif_notify_steering_info",
            "prototype": "",
            "backtrace": [
                "inet_traffic_rule_notify"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "if_ns->ifn_rx_mit_cfg_idx < mit->mit_cfg_idx_max",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "nx_netif_copy_stats",
            "prototype": "",
            "backtrace": [
                "if_copy_netif_stats",
                "make_ifmibdata"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "ring != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "netif_ring_tx_refill",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "llink_init != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "kern_nexus_netif_llink_add",
            "prototype": "",
            "backtrace": [
                "feth_clone_create"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "netif:%llu:%.*s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "nx_netif_dom_connect",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "drop_lim != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "nx_netif_attach",
            "prototype": "",
            "backtrace": [
                "nx_netif_ctl_attach",
                "nx_netif_ctl"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "capab.kncia_config != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "capab.kncia_provider_context != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "capab.cqe_notify_steering_info != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "capab.cqe_prov_ctx != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "PP_BUF_SIZE_DEF(nif->nif_nx->nx_tx_pp) >= max(tso_v4_mtu, tso_v6_mtu)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "na_netif_finalize",
            "prototype": "",
            "backtrace": [
                "na_netif_compat_finalize"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: ifp=%p couldn't get a poll  thread; err=%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "nx_netif_compat_na_activate",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ifp->if_poll_thread != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "netif_poll_thread_exit",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                }
            ],
            "symbol": "nx_netif_compat_na_activate",
            "prototype": "",
            "backtrace": [
                "nx_netif_compat_attach",
                "nx_netif_ctl_attach",
                "nx_netif_ctl"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "Failed to activate mbuf ring cluster 0x%llx (%d) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "nx_netif_compat.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "nx_netif_compat_na_txsync",
            "prototype": "",
            "backtrace": [
                "nx_netif_compat_attach",
                "nx_netif_ctl_attach",
                "nx_netif_ctl"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "(poff + len) <= (PP_BUF_SIZE_DEF(pp) * pp->pp_max_frags)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "nx_netif_host_output",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "skywalk_%s_tx_%u",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "skywalk_mit_%s_tx_%u",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "tx_%u",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "skywalk_%s_rx_%u",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "skywalk_mit_%s_rx_%u",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "rx_%u",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "mit->mit_cfg != NULL && mit->mit_cfg_idx < mit->mit_cfg_idx_max",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "mit->mit_thread != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "nx_netif_mit_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "!(mit->mit_flags & (NETIF_MITF_READY | NETIF_MITF_RUNNING))",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "nx_netif_mit_thread_func",
            "prototype": "",
            "backtrace": [
                "nx_netif_mit_init"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "NetIf",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "nx_netif_agent_init",
            "prototype": "",
            "backtrace": [
                "na_netif_finalize",
                "na_netif_compat_finalize"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "nx_netif_filter_remove",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                }
            ],
            "symbol": "nx_netif_filter_remove",
            "prototype": "",
            "backtrace": [
                "netif_filter_na_activate",
                "netif_filter_na_create",
                "nx_netif_na_find",
                "na_find"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "com.apple.private.skywalk.default-drop",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "nx_netif_default_drop_sysctl",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "tc < MBUF_TC_MAX",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "nx_netif_filter_tx_processed_mbuf_enqueue",
            "prototype": "",
            "backtrace": [
                "nx_netif_filter_tx_cb",
                "nx_netif_default_cb",
                "nx_netif_filter_inject"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "i >= 0 && i < MBUF_TC_MAX",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "nx_netif_tx_processed_mbuf_get_len",
            "prototype": "",
            "backtrace": [
                "nx_netif_compat_tx_get_len"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "i >= 0 && i < KPKT_TC_MAX",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "nx_netif_tx_processed_pkt_get_len",
            "prototype": "",
            "backtrace": [
                "nx_netif_native_tx_get_len"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s_filter:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "%s_netif_filter_pp",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tsnprintf"
                }
            ],
            "symbol": "netif_filter_na_create",
            "prototype": "",
            "backtrace": [
                "nx_netif_na_find",
                "na_find"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(ft = nif->nif_flow_table) != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "nx_netif_flow_match",
            "prototype": "",
            "backtrace": [
                "validate_packet",
                "netif_vp_na_txsync",
                "netif_vp_na_create",
                "nx_netif_na_find",
                "na_find"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nx_netif_flow_remove",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_sleep"
                }
            ],
            "symbol": "nx_netif_flow_remove",
            "prototype": "",
            "backtrace": [
                "netif_vp_na_activate",
                "netif_vp_na_create",
                "nx_netif_na_find",
                "na_find"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "netif_vp:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "netif_vp_na_create",
            "prototype": "",
            "backtrace": [
                "nx_netif_na_find",
                "na_find"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(fpkt->pkt_pflags & PKT_F_TRUNCATED) != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "(fpkt->pkt_pflags & PKT_F_TRUNCATED) == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "nx_netif_mbuf_to_filter_pkt_chain",
            "prototype": "",
            "backtrace": [
                "nx_netif_filter_tx_mbuf_enqueue",
                "nx_netif_compat_tx_dequeue"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(fpkt->pkt_pflags & PKT_F_MBUF_DATA) != 0 || (fpkt->pkt_pflags & PKT_F_PKT_DATA) != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "pkt != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "filter packet has no mbuf or packet attached: pkt_pflags 0x%llx\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "nx_netif_util.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "fill_vlan_info",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "skywalk_netif_poller_%s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tsnprintf"
                },
                {
                    "string": "!(ifp->if_poll_flags & (IF_POLLF_READY | IF_POLLF_RUNNING))",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "netif_rxpoll_compat_thread_func",
            "prototype": "",
            "backtrace": [
                "nx_netif_compat_na_activate",
                "nx_netif_compat_attach",
                "nx_netif_ctl_attach",
                "nx_netif_ctl"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "(m_cnt > 0) || ((m_head == NULL) && (m_tail == NULL))",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "netif_rxpoll_compat_thread_cont",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "gso_flags < GSO_END_OF_TYPE",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "netif_gso_dispatch",
            "prototype": "",
            "backtrace": [
                "nx_netif_host_na_activate"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "((uintptr_t)state->hdr.ip6 & (uintptr_t)0x1) == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "((uintptr_t)state->hdr.ip & (uintptr_t)0x1) == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "m->m_pkthdr.tso_segsz != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "netif_gso_ip_tcp_init_state",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "total_len > state->hlen",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "((tx_headroom + state->mac_hlen) & 0x1) == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "(tx_headroom + state->hlen + mss) <= PP_BUF_SIZE_DEF(pp)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "__packet_finalize(SK_PKT2PH(pkt)) == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "netif_gso_tcp_segment_mbuf",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "lasthdr_off <= UINT8_MAX",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "netif_gso_ipv6_tcp",
            "prototype": "",
            "backtrace": [
                "nx_netif_dom_init"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "c == cnt",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "b == bytes",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "netif_qset_enqueue",
            "prototype": "",
            "backtrace": [
                "dp_flow_tx_process",
                "flow_entry_alloc",
                "flow_mgr_flow_add",
                "fsw_flow_add"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "llink->nll_state == NETIF_LLINK_STATE_DESTROYED",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "nx_netif_llink_free",
            "prototype": "",
            "backtrace": [
                "nx_netif_llink_release"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "drvq->nq_qset->nqs_llink->nll_state == NETIF_LLINK_STATE_DESTROYED",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "KPKTQ_EMPTY(&drvq->nq_pktq)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "nx_netif_qset_free",
            "prototype": "",
            "backtrace": [
                "nx_netif_qset_destroy",
                "nx_netif_llink_free",
                "nx_netif_llink_release"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "llink->nll_default_qset == NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "llink->nll_default_qset != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "nx_netif_llink_create_locked",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "qset->nqs_num_tx_queues == _NETIF_QSET_MAX_TXQS",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "nx_netif_qset_init",
            "prototype": "",
            "backtrace": [
                "nx_netif_qset_create",
                "nx_netif_llink_create_locked"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "SKYWALK_NATIVE(ifp)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "nif->nif_default_llink_params != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "nx_netif_llink_init",
            "prototype": "",
            "backtrace": [
                "na_netif_finalize",
                "na_netif_compat_finalize"
            ]
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "%s}%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "nx_upipe_na_find",
            "prototype": "",
            "backtrace": [
                "na_find"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "upipe:%llu:%.*s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "nx_upipe_dom_connect",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "kpipe:%llu:%.*s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "nx_kpipe_dom_connect",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "(doff + len) <= PP_BUF_SIZE_DEF(dpkt->pkt_qum.qum_pp)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "pkt_copy_from_pkt",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 6,
            "anchors": [
                {
                    "string": "(doff + len) <= (PP_BUF_SIZE_DEF(dpkt->pkt_qum.qum_pp) * __packet_get_buflet_count(dph))",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "pkt_copy_multi_buflet_from_pkt",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "__buflet_set_data_offset(dbuf, doff) == 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "_pkt_copypkt_sum",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: mbuf too large %p [off %d, len %d] @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "m_copypkt_sum",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: bad packet, 0x%llx [off %d, len %d] @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "_pkt_copyaddr_sum",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "_pkt_copyaddr_sum",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "SK_PTR_TYPE(ph1) == NEXUS_META_TYPE_PACKET",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "p1->pkt_bufs_cnt == 1",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "kern_packet_clone_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PKT_ADDR(ph) && bnew && (bnew != bprev)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "PP_HAS_BUFFER_ON_DEMAND(PKT_ADDR(ph)->pkt_qum.qum_pp)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "(bprev != NULL || bcnt == 0) && (bcnt < PKT_ADDR(ph)->pkt_bufs_max)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "kern_packet_add_buflet",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "pkt.opt",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "skmem_cache_create"
                },
                {
                    "string": "pkt.flow",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "skmem_cache_create"
                },
                {
                    "string": "pkt.compl",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "skmem_cache_create"
                }
            ],
            "symbol": "pp_init",
            "prototype": "",
            "backtrace": [
                "skmem_init",
                "skywalk_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "srp_array[SKMEM_REGION_TXKMD].srp_c_obj_cnt != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "kmd_srp->srp_c_obj_size != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "buf_srp->srp_c_obj_cnt != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "buf_srp->srp_c_obj_size != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "kbft_srp->srp_c_obj_cnt != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "kbft_srp->srp_c_obj_size != 0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "skywalk.pp.%s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "(kbft_srp != NULL) && (kbft_srp->srp_c_obj_cnt > 0)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "(ubft_srp != NULL) && (ubft_srp->srp_c_obj_cnt > 0)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "kmd.%s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tsnprintf"
                },
                {
                    "string": "kbft_def.%s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tsnprintf"
                },
                {
                    "string": "kbft_large.%s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tsnprintf"
                },
                {
                    "string": "buf_def.%s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tsnprintf"
                },
                {
                    "string": "buf_large.%s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "tsnprintf"
                }
            ],
            "symbol": "pp_create",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pp != NULL && baddr != NULL",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                },
                {
                    "string": "(seg != NULL) == (idx != NULL)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "pp_alloc_buffer",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "bufcnt == 1",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "pp_metadata_construct",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(init->kbi_max_frags != 0) && (init->kbi_max_frags <= UINT16_MAX)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "assfail"
                }
            ],
            "symbol": "kern_pbufpool_create",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "-enable_uexc",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                }
            ],
            "symbol": "register_uexc_handler",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "unix_syscall: unknown return type @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "arm_prepare_syscall_return",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "product-soc-name",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTGetPropertyInternal"
                }
            ],
            "symbol": "sysctl_load_brand_string",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "size mismatch @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "sysctl.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "arm_host_info",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ARM architecture",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "%s processor",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "Apple",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "make_brand_string",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "FPU VME DE PSE TSC MSR PAE MCE CX8 APIC SEP MTRR PGE MCA CMOV PAT PSE36 CLFSH DS ACPI MMX FXSR SSE SSE2 SS HTT TM PBE SSE3 PCLMULQDQ DTSE64 MON DSCPL VMX EST TM2 SSSE3 CX16 TPR PDCM SSE4.1 SSE4.2 AES SEGLIM64",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlen"
                }
            ],
            "symbol": "cpu_features",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "dtrace_user_probe() should be calling aston()\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "dtrace_user_probe",
            "prototype": "",
            "backtrace": [
                "handle_uncategorized",
                "sleh_synchronous",
                "_fleh_synchronous"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "Detected attempt to place DTrace probe on exclusive memory instruction (pc = 0x%llx); refusing to trace (or exclusive operation could never succeed).\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "dtrace: fasttrap init64: Unrecognized instruction: %08x at %08llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "fasttrap_tracepoint_init",
            "prototype": "",
            "backtrace": [
                "fasttrap_pid_enable"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Should never get here! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "An instruction DTrace doesn't expect: %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "fasttrap_pid_probe",
            "prototype": "",
            "backtrace": [
                "fasttrap_pid_enable"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "current thread doesn't own the lock (%p) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "bsd_stubs.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "devsw_unlock",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s\nBacktrace 0x%lx 0x%lx 0x%lx 0x%lx 0x%lx 0x%lx 0x%lx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "OSReportWithBacktrace",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "OSMetaClass: preModLoad() wasn't called for class %s (runtime internal error).",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN11OSMetaClassC2EPKcPKS_j",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "OSMetaClass: Can't record classes for kext %s - kext not found.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "OSMetaClass: Kext %s class %s is a duplicate;kext %s already has a class by that name.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN11OSMetaClass11postModLoadEPv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "OSMetaClass: Class %s - bad retain (%d)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZNK11OSMetaClass18instanceDestructedEv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": ">maxDepth @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN11OSMetaClass16applyToInstancesEP12OSOrderedSetPFbPK8OSObjectPvES5_",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s::_RESERVED%s%d called. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZNK11OSMetaClass14reservedCalledEi",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%24s count: %03d x 0x%03x = 0x%06x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "__ZN11OSMetaClass19printInstanceCountsEv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "OSMetaClass::getClassDictionary() is obsoleted. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN11OSMetaClass18getClassDictionaryEv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "OSMetaClass::serialize(): Obsoleted @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZNK11OSMetaClass9serializeEP11OSSerialize",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Classes",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "lck_mtx_lock_slow"
                }
            ],
            "symbol": "__ZN11OSMetaClass24serializeClassDictionaryEP12OSDictionary",
            "prototype": "",
            "backtrace": [
                "__ZNK16IOKitDiagnostics9serializeEP11OSSerialize"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Unexpected cast fail: from %p to %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZL21panic_crash_fail_castPK15OSMetaClassBasePK11OSMetaClass",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "OSMetaClass: Failed to record class in kext.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "OSMetaClass: Duplicate class encountered.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "OSMetaClass: Kext not found for metaclass.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN11OSMetaClass8logErrorEi",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "A kext releasing a(n) %s has corrupted the registry. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZNK8OSObject13taggedReleaseEPKvi",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s is not serializable",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "__ZNK8OSObject9serializeEP11OSSerialize",
            "prototype": "",
            "backtrace": [
                "__ZNK11IOCatalogue9serializeEP11OSSerialize"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "<true/>",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "<false/>",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "__ZNK9OSBoolean9serializeEP11OSSerialize",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Trying to change a collection in the registry @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "OSCollection.cpp",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Trying to change a collection in the registry",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSReportWithBacktrace"
                }
            ],
            "symbol": "__ZN12OSCollection11haveUpdatedEv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "__ZNK6OSData9serializeEP11OSSerialize",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "<key>",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZNK15OSMetaClassBase8metaCastEPKc"
                }
            ],
            "symbol": "__ZNK12OSDictionary9serializeEP11OSSerialize",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "OSValueObject<void*>",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                }
            ],
            "symbol": "__cxx_global_var_init.786",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "OSValueObject<OSKextRequestResourceCallback>",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                }
            ],
            "symbol": "__cxx_global_var_init.785",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "OSKext",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                },
                {
                    "string": "OSKextSavedMutableSegment",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                },
                {
                    "string": "OSDextStatistics",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                },
                {
                    "string": "OSDextCrash",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                }
            ],
            "symbol": "_GLOBAL__sub_I_OSKext.cpp",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: Unsupported kmod_info->id (%d) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "allocAndInitFakeKext",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "CFBundleName",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN6OSKext20allocAndInitFakeKextEP9kmod_info",
            "prototype": "",
            "backtrace": [
                "__ZN6OSKext10initializeEv",
                "iokit_post_constructor_init",
                "last_kernel_constructor"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Kernel kext log filter 0x%x per kextlog boot arg.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "-nokcmismatchpanic",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "OSKernelCPUType",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "getsectbynamefromheader"
                },
                {
                    "string": "OSKernelCPUSubtype",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "getsectbynamefromheader"
                },
                {
                    "string": "__kmod_info",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "getsectbynamefromheader"
                },
                {
                    "string": "com.apple.iokit.IOSurface",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "Kext system initialized.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext10initializeEv",
            "prototype": "",
            "backtrace": [
                "iokit_post_constructor_init",
                "last_kernel_constructor"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Jettisoning kext bootstrap segments.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "__PRELINK",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "getsectbynamefromheader"
                },
                {
                    "string": "__symtab",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "getsectbynamefromheader"
                },
                {
                    "string": "keepsyms boot arg specified; keeping linkedit segment for symbols.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext19removeKextBootstrapEv",
            "prototype": "",
            "backtrace": [
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Flushing dependency info for non-loaded kexts.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Checking for unused kexts to autounload.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Request Stale",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "__Z22_OSKextConsiderUnloadsPvS_",
            "prototype": "",
            "backtrace": [
                "__ZN6OSKext15considerUnloadsEb"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Can't get kernelmanagerd port.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "kernelmanagerd ping failed (0x%x).",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext15pingIOKitDaemonEv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "System shutdown; requesting immediate kernelmanagerd exit.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext12willShutdownEv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Autounloading for kext %s now %sabled.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext20setAutounloadEnabledEb",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Dext %s DextUniqueIdentifier too long.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Dext %s does not have a DextUniqueIdentifier",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext17parseDextUniqueIDEP12OSDictionaryPKc",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Kext %s can't find prelinked kext executable size.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Failed to allocate space for prelinked kext %s.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s failed to create executable wrapper.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s can't find prelinked kext kmod_info address.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "ModuleIndex",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "OSMutableSegmentCopy",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Saving kext %s mutable segment %.*s %llx->%llx.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s failed to save mutable segment %llx->%llx.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext25initWithPrelinkedInfoDictEP12OSDictionaryb7kc_kind",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Requested codeless kext dictionary does not contain the '%s' key",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Refusing to register codeless kext that declares an executable/kernel component: %s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext20initWithCodelessInfoEP12OSDictionary",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "No booter-provided data for kext device tree entry %s.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "No kext info dictionary for booter device tree entry %s.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Can't translate physical address 0x%x of kext info dictionary for device tree entry %s.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Error unserializing info dictionary for device tree entry %s: %s.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Can't translate physical address 0x%x of kext bundle path for device tree entry %s.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Failed to create wrapper for device tree entry %s kext path %s.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Can't translate physical address 0x%x of kext executable for device tree entry %s.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Failed to create executable wrapper for device tree entry %s.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Failed to set kext executable for device tree entry %s.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext18initWithBooterDataEP8OSStringP6OSData",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "New dext %s, v%s requested does not have a unique dext identifier\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Found a dext %s, v%s: with no unique dext identifier\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Refusing new dext %s, v%s:a dext v %s with the same unique dext identifier (%s) already exists\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Dext %s, v%s , unique dext identifier %s Upgraded to v%s, unique dext identifier %s \n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Upgrade delayed for %s v%s, unique dext identifier %s with v%s, unique dext identifier %s.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Notice - new kext %s, v%s matches a %s dextwith the same bundle ID, v%s.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Notice - new kext %s, v%s matches %s kext but can't determine if executables are the same (no UUIDs).",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Refusing new kext %s, v%s: a %s copy is already present (same version and executable).",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Refusing new kext %s, v%s: already have %s v%s.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Refusing new kext %s, v%s: a %s copy with a different executable UUID is already present.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Refusing new kext %s, v%s: a codeless copy is already %s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Dropping old copy of kext %s (v%s) for newly-added (v%s).",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Dropping lower version (v%s) of registered kext %s for higher (v%s).",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s is already registered with a higher/same version (v%s); dropping newly-added (v%s).",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s, v%s registered and available for loading.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext18registerIdentifierEv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Attempt to set info dictionary on a kext that already has one (%s). @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "OSBundleEnableKextLogging",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "CFBundleIdentifier missing/invalid type in kext %s.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Can't copy bundle identifier as symbol for kext %s.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s error - CFBundleIdentifier over max length %d.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s error - CFBundleVersion missing/invalid type.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s error - CFBundleVersion bad value '%s'.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s error - OSBundleCompatibleVersion bad value '%s'.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s error - %s %s > %s %s (must be <=).",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext24setInfoDictionaryAndPathEP12OSDictionaryP8OSString",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Attempt to set an executable on a kext that already has one (%s). @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN6OSKext13setExecutableEP6OSDataS1_b",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "HIDDefaultBehavior",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZL25uniqueStringPlistPropertyP12OSDictionaryPKc"
                },
                {
                    "string": "HIDPointerAccelerationType",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZL25uniqueStringPlistPropertyP12OSDictionaryPKc"
                },
                {
                    "string": "HIDRemoteControlType",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZL25uniqueStringPlistPropertyP12OSDictionaryPKc"
                },
                {
                    "string": "HIDScrollAccelerationType",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZL25uniqueStringPlistPropertyP12OSDictionaryPKc"
                },
                {
                    "string": "Physical Interconnect Location",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZL25uniqueStringPlistPropertyP12OSDictionaryPKc"
                },
                {
                    "string": "Vendor",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZL25uniqueStringPlistPropertyP12OSDictionaryPKc"
                },
                {
                    "string": "Vendor Identification",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZL25uniqueStringPlistPropertyP12OSDictionaryPKc"
                },
                {
                    "string": "Vendor Name",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZL25uniqueStringPlistPropertyP12OSDictionaryPKc"
                },
                {
                    "string": "bConfigurationValue",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZL25uniqueStringPlistPropertyP12OSDictionaryPKc"
                },
                {
                    "string": "bInterfaceNumber",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZL25uniqueStringPlistPropertyP12OSDictionaryPKc"
                },
                {
                    "string": "idProduct",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "__ZN6OSKext27uniquePersonalityPropertiesEP12OSDictionaryb",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Attempt to free loaded kext %s. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Freeing dext %s but dextLaunchedCount is %d\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN6OSKext4freeEv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Internal error; invalid arguments to OSKext::serializeLogInfo().",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Failed to create serializer on log info for request from user space.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Failed to serialize log info for request from user space.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Failed to copy log info for request from user space.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext16serializeLogInfoEP7OSArrayPPcPj",
            "prototype": "",
            "backtrace": [
                "__ZN6OSKext13handleRequestEP4hostjPcjPS2_PjS3_S4_",
                "kext_request",
                "_Xkext_request"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Failed to query kext UUID (MAC policy error 0x%x).",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext22copyKextUUIDForAddressEP8OSNumber",
            "prototype": "",
            "backtrace": [
                "__ZN6OSKext13handleRequestEP4hostjPcjPS2_PjS3_S4_",
                "kext_request",
                "_Xkext_request"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Failed to remove kext %s (MAC policy error 0x%x).",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Can't remove kext %s; unsupported by cache.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Can't remove kext %s; services failed to terminate - 0x%x.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Can't remove kext %s; kext failed to unload - 0x%x.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Fileset kext %s unloaded.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Removing kext %s.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext10removeKextEPS_b",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Can't remove kext %s - not found.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext24removeKextWithIdentifierEPKcb",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Can't remove kext with load tag %d - not found.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext21removeKextWithLoadTagEjb",
            "prototype": "",
            "backtrace": [
                "OSKextUnloadKextWithLoadTag"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Driver-",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "\"%s\" not a kext",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "__ZN6OSKext31createExcludeListFromBooterDataEP12OSDictionaryP20OSCollectionIterator",
            "prototype": "",
            "backtrace": [
                "__ZN12KLDBootstrap20readBooterExtensionsEv",
                "__ZN12KLDBootstrap21readStartupExtensionsEv",
                "__ZL32bootstrapRecordStartupExtensionsv",
                "_GLOBAL__sub_I_bootstrap.cpp"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "OSKextExcludeList",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "lck_mtx_unlock_slow"
                }
            ],
            "symbol": "__ZN6OSKext17updateExcludeListEP12OSDictionary",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "OSBundleRequired",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "Local-Root",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "Network-Root",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "Safe Boot",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "Console",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "__ZN6OSKext20isLoadableInSafeBootEv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Cannot unload dext for upgrade %s: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Cannot send upgrade notification for %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext19replaceDextInternalEPS_S0_",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Pending upgrade found for %s but dextLaunchedCount is 0!\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext11upgradeDextEPS_S0_",
            "prototype": "",
            "backtrace": [
                "__ZN6OSKext18registerIdentifierEv"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s services failed to terminate - 0x%x.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext10removeDextEPS_",
            "prototype": "",
            "backtrace": [
                "__ZN6OSKext13handleRequestEP4hostjPcjPS2_PjS3_S4_",
                "kext_request",
                "_Xkext_request"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Cannot find dext UniqueID for %s, cannot increment dext launches\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Too many dexts launched for %s UniqueID %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "New dext launched for  %s UniqueID %s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Dext %s UniqueID %s requires update, cannot launch a new dext\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Dext %s: UniqueID %s does not match UniqueID looked for %s, cannot launch a new dext\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext24incrementDextLaunchCountEPS_P6OSData",
            "prototype": "",
            "backtrace": [
                "__ZN24IOUserServerCheckInToken4initEPK8OSSymbolP8OSNumberP6OSKextP6OSData",
                "__ZN12IOUserServer16launchUserServerEP8OSStringPK8OSSymbolP8OSNumberbPP24IOUserServerCheckInTokenP6OSData",
                "__ZN9IOService14startCandidateEPS_",
                "__ZN9IOService15probeCandidatesEP12OSOrderedSet",
                "__ZN9IOService14doServiceMatchEj"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Cannot find dext for %s, cannot decrement dext launches\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Cannot find dext UniqueID for %s, cannot decrement dext launches\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Over decrementing dext launch for %s UniqueID %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Dext terminated for %s UniqueID %s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Dext upgrade for %s UniqueID %s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Dext unload for %s UniqueID %s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext24decrementDextLaunchCountEP8OSString",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Allocation failure.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext22getPropertyForHostArchEPKc",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Can't load kext %s - not found.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Can't load kext %s - requests to user space are disabled.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext Load Request",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZL20_OSKextCreateRequestPKcR11OSSharedPtrI12OSDictionaryE"
                },
                {
                    "string": "Kext %s not found; queued load request to user space.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s might not load - kernelmanagerd is currently unavailable.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext22loadKextWithIdentifierEP8OSStringPP8OSObjectbbhhP7OSArray",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Received kext KC load request from user space.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Switching to late startup (user-space) kext loading policy.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Start Exclude Level",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Start Matching Exclude Level",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Personality Names",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Received request from user space to load KC kext %s.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s Loaded successfully from %s KC",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext14loadKextFromKCEPS_P12OSDictionary",
            "prototype": "",
            "backtrace": [
                "__ZN6OSKext13handleRequestEP4hostjPcjPS2_PjS3_S4_",
                "kext_request",
                "_Xkext_request"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Codeless Kext Info",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Missing 'Codeless Kext Info' dictionary in codeless kext load request of %s.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Received request from user space to load codeless kext %s.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Could not instantiate codeless kext.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Codeless kext identifiers don't match '%s' != '%s'",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext16loadCodelessKextEP8OSStringP12OSDictionary",
            "prototype": "",
            "backtrace": [
                "__ZN6OSKext13handleRequestEP4hostjPcjPS2_PjS3_S4_",
                "kext_request",
                "_Xkext_request"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Recorded kext %s as a candidate for inclusion in prelinked kernel.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Failed to record kext %s as a candidate for inclusion in prelinked kernel.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext23recordIdentifierRequestEP8OSString",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Kext %s is not loadable",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s is already loaded.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Failed to load kext %s (MAC policy error 0x%x).",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext loading is disabled (attempt to load kext %s).",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Can't load kext %s - no more load tags to assign.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Loading kext %s.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Can't load kext %s - not in a kext collection.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Can't load kext %s - failed to resolve library dependencies.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Internal error loading kext %s; dependency disappeared.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Dependency %s of kext %s failed to load.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s start failed (result 0x%x).",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s failed to load (0x%x).",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s loaded.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext Load Notification",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN6OSKext21queueKextNotificationEPKcP8OSStringP6OSData"
                }
            ],
            "symbol": "__ZN6OSKext4loadEhhP7OSArray",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Sliding kext %s: External relocations found.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Sliding kext %s: No linkedit segment.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Sliding kext %s: No segments.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Sliding kext %s: Unexpected relocation found.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s: new kext size is too large.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext24slidePrelinkedExecutableEb",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "7.9.9",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlen"
                },
                {
                    "string": "Kernel component %s has incorrect version %s; expected %s.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Not entitled to link kext '%s'",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Can't load kext %s - executable is missing.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Refusing to link non-prelinked kext: %s (no kxld support)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s header size is too large (%lu > UINT32_MAX).",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s size is too large (%lu > UINT32_MAX).",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s executable loaded; %u pages at 0x%lx (load tag %u).",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "__asan_globals",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN6OSKext13lookupSectionEPKcS1_"
                },
                {
                    "string": "KASAN: cannot load KASAN-ified kext %s on a non-KASAN kernel\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Failed to load executable for kext %s.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext14loadExecutableEv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "FileSet booted with no Linkedit segment @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Jettisoning fileset Linkedit segments from vmaddr %llx with size %llu",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "_ZN6OSKext30jettisonFileSetLinkeditSegmentEP14mach_header_64",
            "prototype": "",
            "backtrace": [
                "__ZN6OSKext19removeKextBootstrapEv",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Attempt to set linked executable on kext that already has one (%s).\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN6OSKext19setLinkedExecutableEP6OSData",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "OSBundleForceDTraceInit",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Ignoring OSBundleForceDTraceInit for Boot KC Kext %s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext18registerWithDTraceEv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Kext %s failed to set initial VM protections for segment %s - 0x%x.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext15setVMAttributesEbb",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Kext %s - NULL kmod_info pointer.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s - NULL module %s pointer.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s module %s pointer is outside of kext range (%s %p - kext starts at %p).",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s module %s pointer is outside of kext range (%s %p - kext at %p-%p).",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s - bad %s pointer %p.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext19validateKextMappingEb",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Kext %s - page %p is not backed by physical memory.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "_ZN6OSKext20verifySegmentMappingEP18segment_command_64",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Attempt to start nonloaded kext %s.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext loading is disabled (attempt to start kext %s).",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s start - internal error, dependency disappeared.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s start - dependency %s failed to start (error 0x%x).",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Not starting %s - dependency %s not started yet.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s calling module start function.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s is now started.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s did not start (return code 0x%x).",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext5startEb",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Attempt to stop nonloaded kext %s.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s - C++ instances; can't stop.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s - has references (linkage or tracking object); can't stop.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s calling module stop function.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s is now stopped and ready to unload.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s did not stop (return code 0x%x).",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext4stopEv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Kext unloading is disabled (%s).",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Can't unload kext %s; outstanding references %d (linkage or tracking object).",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Can't unload kext %s; classes have instances:",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s can't unload - module stop returned 0x%x.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s unloading.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Failed to reset kext %s.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s unloaded.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext6unloadEv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Kext %s has delayed autounload set; skipping and clearing flag.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext14autounloadKextEPS_",
            "prototype": "",
            "backtrace": [
                "__Z22_OSKextConsiderUnloadsPvS_",
                "__ZN6OSKext15considerUnloadsEb"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%scheduling %sscan for unused kexts in %lu seconds.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "initial ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext15considerUnloadsEb",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Kext %s has a dependency loop; can't resolve dependencies.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s resolving dependencies.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s can't create bookkeeping stack to resolve dependencies.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s - can't resolve dependencies; %s missing/invalid type.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s - can't allocate dependencies array.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s - can't allocate dependencies iterator.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s - illegal type in OSBundleLibraries.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s - invalid library version %s.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s - library kext %s not found.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s - library kext %s not compatible with requested version %s.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s (prelinked) - library kext %s (v%s) not prelinked.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s added dependency %s.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s pulling %d dependencies from codeless library %s.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s added dependency %s from codeless library %s.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Error - kext %s declares a dependency on %s, which is not permitted.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Error - kext %s declares %s dependencies. Only %s* dependencies are supported for 64-bit kexts.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Warning - kext %s declares no %s* dependencies. If it uses any KPIs, the link may fail with undefined symbols.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s successfully resolved dependencies.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext19resolveDependenciesEP7OSArray",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Kext %s - internal error propagating compatibility dependencies.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext27addBleedthroughDependenciesEP7OSArray",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Kext %s flushing dependencies.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext17flushDependenciesEb",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Notice - kext %s has already registered class %s.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s registered class %s.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s has IOService subclass %s; enabling autounload.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s failed to register class %s.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext8addClassEP11OSMetaClassj",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Notice - kext %s asked to unregister unknown class %s.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s unregistering class %s.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Failed to unregister kext %s class %s.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext11removeClassEP11OSMetaClass",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "    Kext %s class %s has %d instance%s.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext26reportOSMetaClassInstancesEj",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Invalid request from user space (not nul-terminated).",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Error unserializing request from user space: %s.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Recieved kext request from user space with no predicate.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Received '%s' request from user space.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Access Failure - must be root user.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "com.apple.private.security.only-bootkc-management",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Access Failure - client not entitled to manage file sets.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Access Failure - client not entitled to manage non-primary KCs",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Access Failure - client not entitled to manage kext in non-primary KC",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Invalid arguments to kext start request.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s not found for start request.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Invalid arguments to kext stop request.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s not found for stop request.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Invalid arguments to AuxKC Bundle Available request.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Invalid arguments to kext load from KC request.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s not found for load from KC request.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s does not exist in a KC: refusing to load.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Invalid arguments to codeless kext load interface (missing identifier).",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Invalid arguments to kext unload request.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s not found for unload request.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Terminate IOServices",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZL25_OSKextGetRequestArgumentP12OSDictionaryPKc"
                },
                {
                    "string": "Get Kext UUID by Address",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZL25_OSKextGetRequestArgumentP12OSDictionaryPKc"
                },
                {
                    "string": "Kext Request Lookup Address",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZL25_OSKextGetRequestArgumentP12OSDictionaryPKc"
                },
                {
                    "string": "Kext Request Info Keys",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZL25_OSKextGetRequestArgumentP12OSDictionaryPKc"
                },
                {
                    "string": "Invalid arguments to kext info request.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Returning loaded kext info.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Returning kernel requests.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Get All Load Requests",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Returning load requests.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "KextLog: Loading FileSet KC(s)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "KextLog: kernelmanagerd is %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "active",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "not active",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "KextLog: was reset after userspace reboot\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Received '%s' invalid request from user space.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Request from user space still retained by a kext; probable memory leak.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "responseObject should be an OSArray if predicate is Get Kernel Requests",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Failed to patch dext launch requests.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Failed to serialize response to request from user space.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext13handleRequestEP4hostjPcjPS2_PjS3_S4_",
            "prototype": "",
            "backtrace": [
                "kext_request",
                "_Xkext_request"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kcUUID length is %d, expected %lu @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "_PrelinkInfoDictionary",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "The given KC has no kext info dictionaries",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "_PrelinkLinkKASLROffsets",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN6OSKext32createExcludeListFromPrelinkInfoEP7OSArray"
                },
                {
                    "string": "Kext info dictionary for kext #%d isn't a dictionary?",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Can't find a TEXT segment named '%s' in macho header",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "%u prelinked kexts",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext26addKextsFromKextCollectionEP14mach_header_64P12OSDictionaryPKcPP6OSData7kc_kind",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "An Aux KC has already been registered for deferred processing.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "The Aux KC has info dictionary",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "The Aux KC has no UUID in %s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext30registerDeferredKextCollectionEP14mach_header_64R11OSSharedPtrI8OSObjectE7kc_kind",
            "prototype": "",
            "backtrace": [
                "__ZN12KLDBootstrap23readPrelinkedExtensionsEP14mach_header_647kc_kind"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Invalid '%s' argument value '%s' to kext collection info request.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Loaded State",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Loaded",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IORecursiveLockLock"
                },
                {
                    "string": "Unloaded",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IORecursiveLockLock"
                },
                {
                    "string": "Invalid '%s' argument value '%s' for '%s' collection info",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext22copyKextCollectionInfoEP12OSDictionaryP7OSArray",
            "prototype": "",
            "backtrace": [
                "__ZN6OSKext13handleRequestEP4hostjPcjPS2_PjS3_S4_",
                "kext_request",
                "_Xkext_request"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "OSBundleDextStateActive",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                }
            ],
            "symbol": "__ZN6OSKext13copyDextsInfoEP7OSArrayS1_",
            "prototype": "",
            "backtrace": [
                "__ZN6OSKext13handleRequestEP4hostjPcjPS2_PjS3_S4_",
                "kext_request",
                "_Xkext_request"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "OSBundleAllPrelinked",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                }
            ],
            "symbol": "__ZN6OSKext18copyLoadedKextInfoEP7OSArrayS1_",
            "prototype": "",
            "backtrace": [
                "__ZN6OSKext13handleRequestEP4hostjPcjPS2_PjS3_S4_",
                "kext_request",
                "_Xkext_request"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "__os_log",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "getsectbynamefromheader"
                },
                {
                    "string": "__cstring",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "getsectbynamefromheader"
                },
                {
                    "string": "__asan_cstring",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "getsectbynamefromheader"
                },
                {
                    "string": "OSMetaClassName",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kfree_ext"
                },
                {
                    "string": "OSMetaClassSuperclassName",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kfree_ext"
                },
                {
                    "string": "OSMetaClassTrackingCount",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kfree_ext"
                }
            ],
            "symbol": "__ZN6OSKext8copyInfoEP7OSArray",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s/Contents/MacOS/%s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "__ZN6OSKext22copyUserExecutablePathEPK8OSSymbolPcm",
            "prototype": "",
            "backtrace": [
                "__ZN12IOUserServer13serviceAttachEP9IOServiceS1_"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Can't request resource %s for %s - requests to user space are disabled.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Resource request has bad callback address.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Resource request callback is in a kext that is not started.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "No more request tags available; restart required.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext15requestResourceEPKcS1_PFvjiPKvjPvES4_Pj",
            "prototype": "",
            "backtrace": [
                "OSKextRequestResource"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Requesting daemon launch for %s %s with serverName %s and tag %llu%s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": " with reslid shared cache",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Driver Extension Server Name",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZL25_OSKextSetRequestArgumentP12OSDictionaryPKcP15OSMetaClassBase"
                },
                {
                    "string": "Driver Extension Server Tag",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZL25_OSKextSetRequestArgumentP12OSDictionaryPKcP15OSMetaClassBase"
                },
                {
                    "string": "DriverKit Reslide Shared Cache",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZL25_OSKextSetRequestArgumentP12OSDictionaryPKcP15OSMetaClassBase"
                }
            ],
            "symbol": "__ZN6OSKext19requestDaemonLaunchEP8OSStringS1_P8OSNumberP9OSBooleanP24IOUserServerCheckInTokenP6OSData",
            "prototype": "",
            "backtrace": [
                "__ZN12IOUserServer16launchUserServerEP8OSStringPK8OSSymbolP8OSNumberbPP24IOUserServerCheckInTokenP6OSData",
                "__ZN9IOService14startCandidateEPS_",
                "__ZN9IOService15probeCandidatesEP12OSOrderedSet",
                "__ZN9IOService14doServiceMatchEj"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Notifying of dext upgrade for %s with UniqueID %s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Dext Daemon Upgrade",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZL20_OSKextCreateRequestPKcR11OSSharedPtrI12OSDictionaryE"
                }
            ],
            "symbol": "__ZN6OSKext17notifyDextUpgradeEP8OSStringP6OSData",
            "prototype": "",
            "backtrace": [
                "__ZN6OSKext19replaceDextInternalEPS_S0_"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "KextLog: No arguments in plist for loading fileset kext\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "KextLog: Kext loading is disabled (attempt to load KCs).",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "PageableKCName",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "KextLog: ignoring Pageable KC load from %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "KextLog: Adding kexts from in-memory AuxKC\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "KextLog: WARNING: did not find UUID in deferred Aux KC!",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "KextLog: can't re-parse deferred AuxKC personalities on IOKit daemon restart",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "KextLog: ERROR loading deferred AuxKC: PRELINK_INFO wasn't an OSDictionary",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "KextLog: ERROR loading deferred AuxKC: PRELINK_INFO wasn't an OSDictionary\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "AuxKCName",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "lck_mtx_unlock_slow"
                },
                {
                    "string": "KextLog: Ignoring AuxKC load from %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Codeless Personalities",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "lck_mtx_unlock_slow"
                },
                {
                    "string": "KextLog: loading %d codeless kexts/dexts",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext16loadFileSetKextsEP12OSDictionary",
            "prototype": "",
            "backtrace": [
                "__ZN6OSKext13handleRequestEP4hostjPcjPS2_PjS3_S4_",
                "kext_request",
                "_Xkext_request"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Kext %s cannot be reset, mutable segments were not saved.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Resetting kext %s, mutable segment %.*s %llx->%llx.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s cannot be reset, mutable segment %llx->%llx could not be restored. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Kext %s cannot be reset, could not find saved mutable segment for %llx->%llx. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN6OSKext20resetMutableSegmentsEv",
            "prototype": "",
            "backtrace": [
                "__ZN6OSKext6unloadEv"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "validateKCFileSetUUID Boot KC UUID was not set at boot.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "_BootKCID",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN6OSKext29validateKCUUIDfromPrelinkInfoEPA16_h7kc_kindP12OSDictionaryPKc"
                },
                {
                    "string": "KextLog: Collection UUID matches with loaded KCs.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "__ZN6OSKext21validateKCFileSetUUIDEP12OSDictionary7kc_kind",
            "prototype": "",
            "backtrace": [
                "__ZN12KLDBootstrap23readPrelinkedExtensionsEP14mach_header_647kc_kind"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "validateKCUUID Info plist does not contain %s KC UUID key.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "validateKCUUID %s KC UUID has wrong length: %d.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "KextLog: ERROR: UUID from key:%s %s != expected %s (KC UUID: %s)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "System KC UUID %s linked against %s, but %s is loaded @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN6OSKext29validateKCUUIDfromPrelinkInfoEPA16_h7kc_kindP12OSDictionaryPKc",
            "prototype": "",
            "backtrace": [
                "__ZN6OSKext21validateKCFileSetUUIDEP12OSDictionary7kc_kind",
                "__ZN12KLDBootstrap23readPrelinkedExtensionsEP14mach_header_647kc_kind"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Can't invoke callback for resource request; ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Can't invoke kext resource callback; ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext16dispatchResourceEP12OSDictionary",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Missing Bundle IDs",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "__ZN6OSKext22setMissingAuxKCBundlesEP12OSDictionary",
            "prototype": "",
            "backtrace": [
                "__ZN6OSKext13handleRequestEP4hostjPcjPS2_PjS3_S4_",
                "kext_request",
                "_Xkext_request"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Bundle Availability",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "KextLog: AuxKC bundle %s marked as %s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "loadable",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "NOT loadable",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext23setAuxKCBundleAvailableEP8OSStringP12OSDictionary",
            "prototype": "",
            "backtrace": [
                "__ZN6OSKext13handleRequestEP4hostjPcjPS2_PjS3_S4_",
                "kext_request",
                "_Xkext_request"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Kext %s requires an explicit kextload; omitting its personalities.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "lck_mtx_unlock_slow"
                }
            ],
            "symbol": "__ZN6OSKext24copyAllKextPersonalitiesEb",
            "prototype": "",
            "backtrace": [
                "__ZN6OSKext33sendAllKextPersonalitiesToCatalogEb"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Sending all eligible registered kexts' personalities to the IOCatalogue %s.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "and starting matching",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "but not starting matching",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext33sendAllKextPersonalitiesToCatalogEb",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Kext loading is disabled (attempt to start matching for kext %s).",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Kext %s sending %d personalit%s to the IOCatalogue%s.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": " and starting matching",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": " but not starting matching",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext26sendPersonalitiesToCatalogEbP7OSArray",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Kext %s removing all personalities naming it from the IOCatalogue.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext30removePersonalitiesFromCatalogEv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Failed to allocate user-space log message arrays.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZN6OSKext21setUserSpaceLogFilterEjb",
            "prototype": "",
            "backtrace": [
                "__ZN6OSKext13handleRequestEP4hostjPcjPS2_PjS3_S4_",
                "kext_request",
                "_Xkext_request"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s%s%s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "OSKextVLog",
            "prototype": "",
            "backtrace": [
                "OSKextLog"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "         can't perform kext scan: no kext summary",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "         can't perform kext scan: missing kext summary page %p",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "__ZN6OSKext21printKextsInBacktraceEPmjPFiPKczEj",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "      Kernel Extensions in backtrace:\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "___ZN6OSKext21printKextsInBacktraceEPmjPFiPKczEj_block_invoke",
            "prototype": "",
            "backtrace": [
                "__ZN6OSKext21printKextsInBacktraceEPmjPFiPKczEj"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "unknown version",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcpy"
                },
                {
                    "string": "%s%s(%s)[%s]@0x%llx->0x%llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "pmap_find_pa"
                },
                {
                    "string": "         ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "pmap_find_pa"
                },
                {
                    "string": "            kmod dependency scan stopped due to missing dependency page: %p\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__stack_chk_fail"
                },
                {
                    "string": "            kmod dependency scan stopped due to missing kmod page: %p\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__stack_chk_fail"
                },
                {
                    "string": "            dependency: %s(%s)[%s]@%p->%p\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "pmap_find_pa"
                }
            ],
            "symbol": "__ZN6OSKext12printSummaryEP20_loaded_kext_summaryPFiPKczEj",
            "prototype": "",
            "backtrace": [
                "___ZN6OSKext21printKextsInBacktraceEPmjPFiPKczEj_block_invoke",
                "__ZN6OSKext21printKextsInBacktraceEPmjPFiPKczEj"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "OSKext::saveLoadedKextPanicListTyped - NULL kext in loaded kext list; continuing\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "OSKext::saveLoadedKextPanicListTyped - Kext type cast failed in loaded kext list; continuing\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "kext scan stopped due to missing kmod_info page: %p\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "error saving loaded kext info\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "__ZN6OSKext28saveLoadedKextPanicListTypedEPKciiPcj",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Couldn't allocate kext panic log buffer.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kfree_ext"
                }
            ],
            "symbol": "__ZN6OSKext23saveLoadedKextPanicListEv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "last started kext at %llu: %.*s (addr %p, size %lu)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "pmap_find_pa"
                },
                {
                    "string": "last stopped kext at %llu: %.*s (addr %p, size %lu)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "pmap_find_pa"
                },
                {
                    "string": "loaded kexts:\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "pmap_find_pa"
                },
                {
                    "string": "(none)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "__ZN6OSKext19printKextPanicListsEPFiPKczE",
            "prototype": "",
            "backtrace": [
                "SavePanicInfo",
                "handle_debugger_trap"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Elements of request should be of type OSDictionary",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Failed to get request predicate",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Could not create send right for object.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Could not create OSNumber object.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Could not set OSNumber object as request Check In Token",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "__ZL23patchDextLaunchRequestsP4taskP7OSArray",
            "prototype": "",
            "backtrace": [
                "__ZN6OSKext13handleRequestEP4hostjPcjPS2_PjS3_S4_",
                "kext_request",
                "_Xkext_request"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "__llvm_prf_data",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN6OSKext13lookupSectionEPKcS1_"
                },
                {
                    "string": "__llvm_prf_names",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN6OSKext13lookupSectionEPKcS1_"
                },
                {
                    "string": "__llvm_prf_name",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN6OSKext13lookupSectionEPKcS1_"
                }
            ],
            "symbol": "__ZL23OSKextGrabPgoDataLockedP6OSKextbPhPyPcy",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%lu.%06d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "__ZL23OSKextPgoMetadataPutAllP6OSKextPhPcPmmPj",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "integer size=\"%d\"",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "0x%lx%08lx",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "0x%lx",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "__ZNK8OSNumber9serializeEP11OSSerialize",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "__cxa_pure_virtual",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__cxa_pure_virtual",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "OSRuntime: C++ runtime failed to initialize. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "OSlibkernInit",
            "prototype": "",
            "backtrace": [
                "InitIOKit",
                "PE_init_iokit",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Size of array created by new[] has overflowed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZSt20__throw_length_errorPKc",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: null structor @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZL31OSRuntimeCallStructorsInSectionP6OSKextP9kmod_infoPvP18segment_command_64PKcmm",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "<reference IDREF=\"",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "__ZN11OSSerialize20previouslySerializedEPK15OSMetaClassBase",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "class %s: xml serialize\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": " ID=\"",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "__ZN11OSSerialize14addXMLStartTagEPK15OSMetaClassBasePKc",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "xml serialize\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "__ZN11OSSerialize7addCharEc",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "OSUnserialize: can't alloc temp memory\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "__Z18OSUnserializeparsev",
            "prototype": "",
            "backtrace": [
                "__Z13OSUnserializePKcPP8OSString"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "unexpected end of buffer",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZL18OSUnserializeerrorP12parser_statePKc"
                },
                {
                    "string": "buildDictionary",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZL18OSUnserializeerrorP12parser_statePKc"
                },
                {
                    "string": "maximum object count",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZL18OSUnserializeerrorP12parser_statePKc"
                },
                {
                    "string": "buildArray",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZL18OSUnserializeerrorP12parser_statePKc"
                },
                {
                    "string": "buildSet",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZL18OSUnserializeerrorP12parser_statePKc"
                },
                {
                    "string": "buildString",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZL18OSUnserializeerrorP12parser_statePKc"
                },
                {
                    "string": "buildData",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZL18OSUnserializeerrorP12parser_statePKc"
                },
                {
                    "string": "buildNumber",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZL18OSUnserializeerrorP12parser_statePKc"
                },
                {
                    "string": "buildBoolean",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZL18OSUnserializeerrorP12parser_statePKc"
                },
                {
                    "string": "maximum object reference count",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZL18OSUnserializeerrorP12parser_statePKc"
                },
                {
                    "string": "duplicate dictionary key",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "format",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strcmp"
                },
                {
                    "string": "plist",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strcmp"
                }
            ],
            "symbol": "__Z21OSUnserializeXMLparsePv",
            "prototype": "",
            "backtrace": [
                "__Z16OSUnserializeXMLPKcPP8OSString"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "OSUnserializeXML: can't alloc temp memory\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "__ZL9getStringP12parser_statePi",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "No service matching %s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Unable to match CoreAnalyticsHub",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "CoreAnalyticsHub",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN9IOService15serviceMatchingEPKcP12OSDictionary"
                },
                {
                    "string": "No service matching %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Unable to match CoreAnalyticsHub",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "core_analytics_family_match",
            "prototype": "",
            "backtrace": [
                "core_analytics_event_queue_invoke",
                "telemetry_init"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "CoreAnalyticsHub is out of sync with xnu. CoreAnalyticsHub table version: %d. xnu table version: %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Registered CoreAnalyticsHub functions with xnu.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Registered CoreAnalyticsHub functions with xnu.",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "core_analytics_hub_register",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Unknown CoreAnalytics event type: %s. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "core_analytics_send_event_lazy",
            "prototype": "",
            "backtrace": [
                "core_analytics_event_queue_invoke",
                "telemetry_init"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Kext %s (load tag %d) has been retained.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Can't retain kext with load tag %d - no such kext is loaded.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "OSKextRetainKextWithLoadTag",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Kext %s (load tag %d) has been released.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Can't release kext with load tag %d - no such kext is loaded.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "OSKextReleaseKextWithLoadTag",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "Invalid request from user space (no data).",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "vm_map_copyout() failed for request from user space.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                },
                {
                    "string": "Failed to copy log data for request from user space.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSKextLog"
                }
            ],
            "symbol": "kext_request",
            "prototype": "",
            "backtrace": [
                "_Xkext_request"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "A kext referenced an unresolved weak symbol @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "OSKextLib.cpp",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "kext_weak_symbol_referenced",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s@%llx:%llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "scnprintf"
                }
            ],
            "symbol": "__telemetry_backtrace_add_kexts_block_invoke",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "(invalid)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcpy"
                },
                {
                    "string": "(missing)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcpy"
                }
            ],
            "symbol": "OSKextVersionGetString",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%2hhx%2hhx%2hhx%2hhx-%2hhx%2hhx-%2hhx%2hhx-%2hhx%2hhx-%2hhx%2hhx%2hhx%2hhx%2hhx%2hhx%n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "sscanf"
                }
            ],
            "symbol": "uuid_parse",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "uuid_unparse_lower",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Long logs support disabled: Logging disabled by ATM\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_bzero"
                },
                {
                    "string": "Long logs support configured: size: %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Long logs support disabled: Not enough memory\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_bzero"
                }
            ],
            "symbol": "oslog_init_logmem",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "[%5lu.%06u]: ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf_log_locked"
                },
                {
                    "string": "Unknown firehose tracepoint flags %x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "_os_log_with_args_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "Unexpected firehose stream type %u @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "log_payload_send",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "unhandled return value @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "log_encode.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "os_log_context_encode",
            "prototype": "",
            "backtrace": [
                "_os_log_with_args_internal"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Log queues disabled: Logging disabled by ATM\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kalloc_type_impl_internal"
                },
                {
                    "string": "Log queues disabled: Zero lq_size_order boot argument\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kalloc_type_impl_internal"
                },
                {
                    "string": "Log queues configured: slot count: %u, per-slot size: %u, total size: %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "oslog_init_log_queues",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "os_refcnt: unexpected release of final reference (rc=%p) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "os_ref_panic_live",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "os_refcnt: underflow (rc=%p) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "os_ref_panic_underflow",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "os_refcnt: attempted resurrection (rc=%p) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "os_ref_panic_retain",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "os_pcpu_ref: destroying live refcount %p at %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "os_pcpu_ref: destroying refcount %p with a waiter at %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "os_pcpu_ref: destroying non-zero refcount %p at %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__os_pcpu_ref_destroy_panic",
            "prototype": "",
            "backtrace": [
                "os_pcpu_ref_destroy"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "os_pcpu_ref: attempted resurrection (rc=%p) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__os_pcpu_ref_retain_panic",
            "prototype": "",
            "backtrace": [
                "__os_pcpu_ref_retain_slow",
                "os_pcpu_ref_retain"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "os_pcpu_ref: unexpected release of final reference (rc=%p) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__os_pcpu_ref_release_live_panic",
            "prototype": "",
            "backtrace": [
                "__os_pcpu_ref_release_live_slow",
                "os_pcpu_ref_release_live"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "os_pcpu_ref: over-release (rc=%p) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__os_pcpu_ref_release_panic",
            "prototype": "",
            "backtrace": [
                "__os_pcpu_ref_release_slow",
                "os_pcpu_ref_release"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "os_pcpu_ref: double-kill (rc=%p) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__os_pcpu_ref_kill_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "os_pcpu_ref: overflow (rc=%p) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__os_pcpu_ref_overflow_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "os_pcpu_ref: double-wait (rc=%p) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "os_pcpu_ref: wait while still live (rc=%p) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__os_pcpu_ref_invalid_wait_panic",
            "prototype": "",
            "backtrace": [
                "os_pcpu_ref_wait_for_death"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "incorrect header check",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "z_crc32"
                },
                {
                    "string": "unknown compression method",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "z_crc32"
                },
                {
                    "string": "invalid window size",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "z_crc32"
                },
                {
                    "string": "unknown header flags set",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "z_crc32"
                },
                {
                    "string": "header crc mismatch",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "z_crc32"
                },
                {
                    "string": "invalid block type",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "z_crc32"
                },
                {
                    "string": "invalid stored block lengths",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "z_crc32"
                },
                {
                    "string": "too many length or distance symbols",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "z_crc32"
                },
                {
                    "string": "invalid code lengths set",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "z_crc32"
                },
                {
                    "string": "invalid literal/lengths set",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "z_crc32"
                },
                {
                    "string": "invalid distances set",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "z_crc32"
                },
                {
                    "string": "incorrect data check",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "z_crc32"
                },
                {
                    "string": "incorrect length check",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "z_crc32"
                }
            ],
            "symbol": "inflate",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "zlib deflate",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "compress_block",
            "prototype": "",
            "backtrace": [
                "_tr_flush_block"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: inconsistent size for SHA384 context @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "SHA384_Init",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "SHA384_Init",
            "prototype": "",
            "backtrace": [
                "pmap_cs_verify_code_signature_blob_internal"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "sha1_hardware_hook: Called twice.. Should never happen @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "corecrypto_sha1.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "sha1_hardware_hook",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: inconsistent size for DES-ECB context @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "des_ecb_key_sched",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "des_ecb_key_sched",
            "prototype": "",
            "backtrace": [
                "esp_des_schedule"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: inconsistent size for 3DES-ECB context @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "des3_ecb_key_sched",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "des3_ecb_key_sched",
            "prototype": "",
            "backtrace": [
                "esp_3des_schedule"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: corecrypto not registered! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: xts mode not registered? enc=%p, dec=%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s: inconsistent size for AES-XTS context @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "xts_start",
            "prototype": "",
            "backtrace": [
                "vm_swap_encrypt",
                "vm_swapout_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "xts encrypt not a multiple of block size @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "xts_encrypt",
            "prototype": "",
            "backtrace": [
                "vm_swap_encrypt",
                "vm_swapout_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "xts decrypt not a multiple of block size @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "xts_decrypt",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "coretrust interface already set @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "coretrust.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "coretrust_interface_register",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "apple_encrypted_archive interface already set @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "apple_encrypted_archive_interface_register",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "img4 interface already set @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "interface.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "img4_interface_register",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "image4 dlxk interface already set @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "dlxk.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "image4_dlxk_link",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "AppleMobileFileIntegrity interface already set @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "amfi.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "amfi_interface_register",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ptrauth_utils_auth_blob_generic: ptr must not be NULL @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "signature mismatch for %lu bytes at %p, calculated %lx vs %lx @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "ptrauth_utils_auth_blob_generic",
            "prototype": "",
            "backtrace": [
                "ubc_cs_blob_add"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "compression interface already set @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "compression_interface_register",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "OSAction",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                }
            ],
            "symbol": "_GLOBAL__sub_I_OSAction.iig.cpp",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IODispatchSource",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                }
            ],
            "symbol": "_GLOBAL__sub_I_IODispatchSource.iig.cpp",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IODispatchQueue",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                }
            ],
            "symbol": "_GLOBAL__sub_I_IODispatchQueue.iig.cpp",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOInterruptDispatchSource",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                }
            ],
            "symbol": "_GLOBAL__sub_I_IOInterruptDispatchSource.iig.cpp",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOServiceStateNotificationDispatchSource",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                }
            ],
            "symbol": "_GLOBAL__sub_I_IOServiceStateNotificationDispatchSource.iig.cpp",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOEventLink",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                }
            ],
            "symbol": "_GLOBAL__sub_I_IOEventLink.iig.cpp",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOWorkGroup",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                }
            ],
            "symbol": "_GLOBAL__sub_I_IOWorkGroup.iig.cpp",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "hibernate_set_page_state @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "hibernate_set_page_state",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "boot-signature",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "bridge-boot-session-uuid",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "hfile",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                }
            ],
            "symbol": "__Z21IOHibernateSystemInitP14IOPMrootDomain",
            "prototype": "",
            "backtrace": [
                "__ZN14IOPMrootDomain5startEP9IOService"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "couldn't find sectHIBTEXTB in segInfo @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "hibernate_write_image",
            "prototype": "",
            "backtrace": [
                "ml_arm_sleep",
                "PE_cpu_machine_quiesce",
                "cpu_sleep",
                "processor_offline_intstack",
                "processor_offline",
                "processor_doshutdown"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "handoff overflow @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "handoff out of range @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "kIOHibernateHandoffTypeCryptVars(%d) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "kIOHibernateHandoffTypeVolumeCryptKey(%d) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "no volumeCryptKey @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "hibernate handoff @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "IOPolledFilePollersSetEncryptionKey(0x%x) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Hibernate restore error %x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "image2 pages corrupted @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "hibernate_machine_init",
            "prototype": "",
            "backtrace": [
                "IOCPURunPlatformActiveActions",
                "PE_cpu_machine_init"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "handoff %p, %x, %x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kdb_printf"
                },
                {
                    "string": "failed to find %s in IORegistry @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZL15IOHibernateDoneP15IOHibernateVars",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "no name @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZL15MergeDeviceTreePK13OpaqueDTEntryP15IORegistryEntryP5OSSetmm",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.private.hibernation.set-preview",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN24IOBufferMemoryDescriptor11withOptionsEjmm"
                }
            ],
            "symbol": "__ZL21hibernate_set_previewP10sysctl_oidPviP10sysctl_req",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pid %d, ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "IOCopyLogNameForPID",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Invalid offset %p for aligned addr %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "alignMask 0x%llx overflows recalAlignedStart %p for provided addr %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Recalculated aligned addr %p doesn't match provided addr %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Offset %zd doesn't accomodate IOLibPageMallocHeader for aligned addr %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "alignMask 0x%llx overflows adjusted size %zd for aligned addr %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZL33IOMallocAlignedHdrCorruptionPanicyyym",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOKitBuildVersion",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN16IOKitDiagnostics11diagnosticsEv"
                },
                {
                    "string": "_NO_NAME_4",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol11withCStringEPKc"
                }
            ],
            "symbol": "iokit_post_constructor_init",
            "prototype": "",
            "backtrace": [
                "last_kernel_constructor"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Failed to initialize IOKit root nub @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "InitIOKit",
            "prototype": "",
            "backtrace": [
                "PE_init_iokit",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Failed to start IOService matching @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "StartIOKitMatching",
            "prototype": "",
            "backtrace": [
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IODeviceTree:/chosen",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN15IORegistryEntry8fromPathEPKcPK15IORegistryPlanePcPiPS_"
                },
                {
                    "string": "IOProgressColorTheme",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "IORecordProgressBackbuffer",
            "prototype": "",
            "backtrace": [
                "internal_enable_progressmeter"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IODeviceTree",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN15IORegistryEntry9makePlaneEPKc"
                },
                {
                    "string": "AAPL,unit-string",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "bridge-model",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "#size-cells",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "#address-cells",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IODTPersist",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "associated-service",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOPrimaryInterruptController",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IONWInterrupts",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "AAPL,interrupts",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "interrupt-parent",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "#interrupt-cells",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "exclave-edk-endpoint",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kalloc_type_impl_internal"
                },
                {
                    "string": "exclave-endpoint",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTIterateEntries"
                },
                {
                    "string": "disp0",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZL24IODTMapInterruptsSharingP15IORegistryEntryP12OSDictionary"
                }
            ],
            "symbol": "__Z17IODeviceTreeAllocPv",
            "prototype": "",
            "backtrace": [
                "__ZN22IOPlatformExpertDevice4initEPv"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOInterruptController%08X",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "__Z27IODTInterruptControllerNameP15IORegistryEntry",
            "prototype": "",
            "backtrace": [
                "__ZL24IODTMapInterruptsSharingP15IORegistryEntryP12OSDictionary"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "AAPL,ignore",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN15IORegistryEntry16propertyHasValueEPK8OSSymbolPK8OSObject"
                }
            ],
            "symbol": "__Z23IODTFindMatchingEntriesP15IORegistryEntryjPKc",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IODTSetResolving - gIODTResolvers alloc overflows @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "IODTSetResolving - could not allocate new resolvers @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__Z16IODTSetResolvingP15IORegistryEntryPFxjPjS1_EPFvS0_PhS4_S4_E",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IODTResolveAddressCell: Invalid device tree (%u,%u) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "There is no mixed comparison function yet... @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "IODTResolveAddressCell: Invalid device tree (%u) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "IODTResolveAddressCell: Invalid device tree (%u, %u) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__Z22IODTResolveAddressCellP15IORegistryEntryPjPyS2_",
            "prototype": "",
            "backtrace": [
                "__Z21IODTResolveAddressingP15IORegistryEntryPKcP14IODeviceMemory",
                "__ZN18IODTPlatformExpert15getNubResourcesEP9IOService"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "slot-names",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "__Z16IODTFindSlotNameP15IORegistryEntryj",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kernel-only",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTGetPropertyInternal"
                }
            ],
            "symbol": "__ZL18MakeReferenceTablePK13OpaqueDTEntryb",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: error mapping interrupt[%d]\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "interrupt-map",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZL18IODTGetICellCountsP15IORegistryEntryPjS1_"
                },
                {
                    "string": "interrupt-map-mask",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "__ZL24IODTMapInterruptsSharingP15IORegistryEntryP12OSDictionary",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "DefaultCompare only knows how to handle 1 or 2 cells. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZL14DefaultComparejPjS_",
            "prototype": "",
            "backtrace": [
                "__Z22IODTResolveAddressCellP15IORegistryEntryPjPyS2_",
                "__Z21IODTResolveAddressingP15IORegistryEntryPKcP14IODeviceMemory",
                "__ZN18IODTPlatformExpert15getNubResourcesEP9IOService"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IORegistryLock",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "lck_grp_init_flags"
                },
                {
                    "string": "IOName",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOLocation",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IORegistryEntryID",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IORegistryEntryPropertyKeys",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IORegistryPlanes",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "os_ref_panic_retain"
                }
            ],
            "symbol": "__ZN15IORegistryEntry10initializeEv",
            "prototype": "",
            "backtrace": [
                "iokit_post_constructor_init",
                "last_kernel_constructor"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ChildLinks",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcpy"
                }
            ],
            "symbol": "__ZN15IORegistryEntry9makePlaneEPKc",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: attached at free() @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "IORegistryEntry.cpp",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN15IORegistryEntry4freeEv",
            "prototype": "",
            "backtrace": [
                "__ZN9IOService4freeEv"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "_IOServiceNullNotifier",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                },
                {
                    "string": "_IOConfigThread",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                },
                {
                    "string": "IOUserResources",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                },
                {
                    "string": "_IOServiceStateNotification",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                },
                {
                    "string": "IOServiceCompatibility",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                }
            ],
            "symbol": "_GLOBAL__sub_I_IOService.cpp",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOPower",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN15IORegistryEntry9makePlaneEPKc"
                },
                {
                    "string": "IOPropertyMatch",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOPropertyExistsMatch",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOLocationMatch",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOParentMatch",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IODefaultMatchCategory",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOMatchedAtBoot",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOMatchedServiceCountMatch",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOMatchedPersonality",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IORematchPersonality",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IORematchCount",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IODEXTMatchCount",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOServiceLegacyMatchingRegistryID",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "dextrelaunch",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "iocthreads",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "IOUserClientClass",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOUserClasses",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOUserServerName",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOUserServerTag",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOUserServerOneProcess",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOUserServerPreserveUserspaceReboot",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOResourceMatch",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOResourceMatched",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IODeviceMemory",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOInterruptControllers",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOInterruptSpecifiers",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOCompatibilityMatch",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOCompatibilityProperties",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOPath",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOSupportedProperties",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOMapperID",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOKitDebug",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOCommandPoolSize",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOGeneralInterest",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOAppPowerStateInterest",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOPriorityPowerStateInterest",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOConsoleSecurityInterest",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOServicePublish",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOServiceFirstPublish",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOServiceMatched",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOServiceFirstMatch",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOServiceTerminate",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOServiceWillTerminate",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOConsoleLocked",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOConsoleUsers",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "kCGSSessionUserIDKey",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "kCGSSessionAuditIDKey",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOConsoleUsersSeed",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "kCGSSessionOnConsoleKey",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "kCGSessionLoginDoneKey",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "kCGSSessionSecureInputPID",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "CGSSessionScreenLockedTime",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "CGSSessionScreenIsLocked",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOServiceDEXTEntitlements",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "com.apple.developer.driverkit",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "com.apple.developer.driverkit.userclient-access",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "com.apple.developer.driverkit.allow-any-userclient-access",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "com.apple.private.driverkit.driver-access",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "com.apple.private.driverkit.test-driver",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "com.apple.developer.driverkit.communicates-with-drivers",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "com.apple.developer.driverkit.allow-third-party-userclients",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOMatchDefer",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOServiceMatchDeferred",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOServiceNotificationUser",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOPrimaryDriverTerminateOptions",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOBlockStorageDriver",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "Virtual Interface",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOAllCPUInitialized",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOPlatformFunctionHandlerSet",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOPlatformFunctionHandlerMaxBusDelay",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "getKey",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOAssociatedServices",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOServiceTerminateThread",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "__ZN9IOService10initializeEv",
            "prototype": "",
            "backtrace": [
                "iokit_post_constructor_init",
                "last_kernel_constructor"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s::attach(%s)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "__ZN9IOService6attachEPS_",
            "prototype": "",
            "backtrace": [
                "__ZN16IOPlatformExpert6attachEP9IOService"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s::detach(%s)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "__ZN9IOService6detachEPS_",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: not registry member at registerService()\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "Registering: ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN9IOService15registerServiceEj",
            "prototype": "",
            "backtrace": [
                "__ZN17IONVRAMController15registerServiceEj"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: Failed to acquire power assertion for matching @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN9IOService13startMatchingEj",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Matching service count = %ld\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "__ZN9IOService17catalogNewDriversEP12OSOrderedSet",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Class %s passed the %s action to IOService @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN9IOService20callPlatformFunctionEPK8OSSymbolbPvS3_S3_S3_",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOPlatformMaxBusDelay",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__stack_chk_fail"
                }
            ],
            "symbol": "__ZN9IOService11setPlatformEP16IOPlatformExpert",
            "prototype": "",
            "backtrace": [
                "__ZN16IOPlatformExpert5startEP9IOService"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "I/O Kit: Unrecoverable deadlock. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN9IOService18lockForArbitrationEb",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s[0x%qx]::terminatePhase1(%08llx)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "%s[0x%qx]::waitPhase1(%s[0x%qx])\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "%s[0x%qx]::did waitPhase1(%s[0x%qx])\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "%s[0x%qx]::requestTerminate(%s[0x%qx], %08llx)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "%s[0x%qx]::requestTerminate(%s[0x%qx], ok = %d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "%s[0x%qx]::wakePhase1\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "DK: %s-0x%qx rematching after dext crash\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN9IOService15terminatePhase1Ej",
            "prototype": "",
            "backtrace": [
                "__ZN9IOService9terminateEj"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s[0x%qx]::terminate(kIOServiceSynchronous): THREAD_TIMED_OUT. Attempting to auto-resolve your deadlock. PLEASE FIX!\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN9IOService23scheduleTerminatePhase2Ej",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s[0x%qx]::scheduleStop(%s[0x%qx])\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN9IOService12scheduleStopEPS_",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s[0x%qx]::scheduleFinalize\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN9IOService16scheduleFinalizeEb",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s[0x%qx]::finalize(%08llx)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN9IOService14actionFinalizeEPS_jPvS1_S1_",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s[0x%qx]::stop(%s[0x%qx])\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "%s[0x%qx]::detach(%s[0x%qx])\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN9IOService10actionStopEPS_S0_PvS1_S1_",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s[0x%qx]::defer phase2(%s[0x%qx])\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "%s[0x%qx]::nop stop(%s[0x%qx])\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "%s[0x%qx]::defer stop()\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "iokit terminate done, %d stops remain\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN9IOService15terminateWorkerEj",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s[0x%qx]::stop1(%s[0x%qx])\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN9IOService8finalizeEj",
            "prototype": "",
            "backtrace": [
                "__ZN12IOUserServer8finalizeEj"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: match category %s exists\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "%s: stalling for module\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "Couldn't alloc class \"%s\"\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "%s::init fails\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "%s::probe(%s)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "%s::probe fails\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "%s(0x%qx): %u categories\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "match category exists, skipping ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "%s::start(%s) <%d>\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "%s(0x%qx): matching deferred by %s%s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": " in userspace reboot",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "%s::start(%s) <%d> failed\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "Can't replace primary matched driver on root media %s-0x%qx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN9IOService15probeCandidatesEP12OSOrderedSet",
            "prototype": "",
            "backtrace": [
                "__ZN9IOService14doServiceMatchEj"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s(0x%qx): category %s, %u matches\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "___ZN9IOService15probeCandidatesEP12OSOrderedSet_block_invoke",
            "prototype": "",
            "backtrace": [
                "__ZN9IOService15probeCandidatesEP12OSOrderedSet",
                "__ZN9IOService14doServiceMatchEj"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s(0x%qx): category %s: matched %s, probe score %qd\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "___ZN9IOService15probeCandidatesEP12OSOrderedSet_block_invoke_2",
            "prototype": "",
            "backtrace": [
                "___ZN9IOService15probeCandidatesEP12OSOrderedSet_block_invoke",
                "__ZN9IOService15probeCandidatesEP12OSOrderedSet",
                "__ZN9IOService14doServiceMatchEj"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "deferring %s-%llx (provider of %s-%llx) matching after userspace reboot\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN15IORegistryEntry16propertyHasValueEPK8OSSymbolPK8OSObject"
                }
            ],
            "symbol": "__ZN9IOService19userSpaceWillRebootEv",
            "prototype": "",
            "backtrace": [
                "__ZL26sysctl_willuserspacerebootP10sysctl_oidPviP10sysctl_req"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "DK: Waiting for %u user servers, %u matching work\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "DK: allowPowerChange\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN11IOServicePH9serverAckEP12IOUserServer",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "DK: sleep deferred rematching count %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN11IOServicePH11matchingEndEP9IOService",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "DK: ack timer expired\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "DK ack timer expired after %u ms @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN11IOServicePH25userServerAckTimerExpiredEPvS0_",
            "prototype": "",
            "backtrace": [
                "__ZN9IOService19publishPMRootDomainEv",
                "__ZN14IOPMrootDomain5startEP9IOService"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "DK: %s-0x%qx power state transition failed\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "Power Management Failed",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN12IOUserServer4killEPKc"
                }
            ],
            "symbol": "___ZN11IOServicePH25userServerAckTimerExpiredEPvS0__block_invoke",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOServicePH::kIOMessageSystemCapabilityChange: %s%s 0x%x->0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "DK: arming ack timer, %u ms\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN11IOServicePH17systemPowerChangeEPvS0_jP9IOServiceS0_m",
            "prototype": "",
            "backtrace": [
                "__ZN9IOService19publishPMRootDomainEv",
                "__ZN14IOPMrootDomain5startEP9IOService"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "DK: %s-0x%qx dext launches are disabled \n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "DK: %s disabled in shutdown\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "DK: %s deferred in sleep\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "DK: %s-0x%qx using existing server %s-0x%qx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "DK: %s-0x%qx waiting for server %s-%llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "DK: %s-0x%qx failed to launch server\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "DK: %s-0x%qx user server timeout\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "Check In Token verification failed",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN12IOUserServer4exitEPKc"
                },
                {
                    "string": "Entitlements check failed",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN12IOUserServer4exitEPKc"
                },
                {
                    "string": "%s::start took %ld ms\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN9IOService14startCandidateEPS_",
            "prototype": "",
            "backtrace": [
                "__ZN9IOService15probeCandidatesEP12OSOrderedSet",
                "__ZN9IOService14doServiceMatchEj"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: Can't match using: %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "config(%p): stalling %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "config(%p): waking\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "__ZN9IOService13checkResourceEP8OSObject",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOConfigThread_'%s'",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "__ZN15_IOConfigThread12configThreadEPKc",
            "prototype": "",
            "backtrace": [
                "__ZN13_IOServiceJob10pingConfigEPS_",
                "__ZN13_IOServiceJob8startJobEP9IOServiceij",
                "__ZN9IOService13startMatchingEj"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: bad busy count (%d,%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSReportWithBacktrace"
                }
            ],
            "symbol": "__ZN9IOService11_adjustBusyEib",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "busy extended ok[%d], (%llds, %llds)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "IOServiceBusyTimeoutExtensions",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "registry root held busy, kernelmanagerd %s checked in",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "has not",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "%s'%s' (%x,%x)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "%s[%d], (%llds): multiple entries holding the registry busy, IOKit termination queue depth %u: %s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "IOKit Daemon (kernelmanagerd) stall",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "busy timeout",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "%s[%d], (%llds): %s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "__ZN9IOService20waitQuietWithOptionsEyj",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "thread_policy_set(%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "config(%p): starting on %s, %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "config(%p): strange type (%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "config(%p): terminating\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "__ZN15_IOConfigThread4mainEPvi",
            "prototype": "",
            "backtrace": [
                "__ZN15_IOConfigThread12configThreadEPKc",
                "__ZN13_IOServiceJob10pingConfigEPS_",
                "__ZN13_IOServiceJob8startJobEP9IOServiceij",
                "__ZN9IOService13startMatchingEj"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "config(%d): creating\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "__ZN13_IOServiceJob10pingConfigEPS_",
            "prototype": "",
            "backtrace": [
                "__ZN13_IOServiceJob8startJobEP9IOServiceij",
                "__ZN9IOService13startMatchingEj"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "deliverNotification @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN9IOService19deliverNotificationEPK8OSSymboljj",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOConsoleUsers: gIOScreenLockState %d, hs %d, bs %d, now %ld, sm 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN9IOService18updateConsoleUsersEP7OSArrayjb",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.private.iokit.ioresources.setproperty",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN12IOUserClient18clientHasPrivilegeEPvPKc"
                }
            ],
            "symbol": "__ZN11IOResources13setPropertiesEP8OSObject",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: family specific matching fails\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "__ZN9IOService12matchPassiveEP12OSDictionaryj",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "addInterruptStatistics called for an excessively large index (%d) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s %d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "Interrupt Statistics (by index)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN14IOReportLegend14addLegendEntryEP12OSDictionaryPKcS3_"
                },
                {
                    "string": "addInterruptStatistics call for index %d would have clobbered existing statistics @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN9IOService22addInterruptStatisticsEP25IOInterruptAccountingDatai",
            "prototype": "",
            "backtrace": [
                "__ZN22IOInterruptEventSource24registerInterruptHandlerEP9IOServicei"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "removeInterruptStatistics called for index %d, which was never registered @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "removeInterruptStatistics called for empty index %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN9IOService25removeInterruptStatisticsEi",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.private.iokit.IOServiceSetAuthorizationID",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN12IOUserClient21copyClientEntitlementEP4taskPKc"
                }
            ],
            "symbol": "__ZN9IOService18setAuthorizationIDEy",
            "prototype": "",
            "backtrace": [
                "_Xio_service_set_authorization_id"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "DevicePowerState",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "DriverPowerState",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "ChildProxyPowerState",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "ChildrenPowerState",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "AdvisoryTicklePowerState",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "RootDomainPower",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                }
            ],
            "symbol": "__ZN9IOService6PMinitEv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: PMstop() already stopped\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "%s: %p PMstop\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "__ZN9IOService6PMstopEv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: %p %s start\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "%s: %p %s done\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "__ZN9IOService12handlePMstopEP11IOPMRequest",
            "prototype": "",
            "backtrace": [
                "__ZN9IOService16executePMRequestEP11IOPMRequest",
                "__ZN9IOService23actionPMWorkQueueInvokeEP11IOPMRequestP13IOPMWorkQueue",
                "__ZN9IOService6PMinitEv"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: %s (%p) is already a child\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "__ZN9IOService13addPowerChildEPS_",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: addPowerChild2 not in power plane\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "__ZN9IOService14addPowerChild2EP11IOPMRequest",
            "prototype": "",
            "backtrace": [
                "__ZN9IOService16executePMRequestEP11IOPMRequest",
                "__ZN9IOService23actionPMWorkQueueInvokeEP11IOPMRequestP13IOPMWorkQueue",
                "__ZN9IOService6PMinitEv"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: strict PM order enforced\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "%s: addPowerChild3 not in power plane\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "__ZN9IOService14addPowerChild3EP11IOPMRequest",
            "prototype": "",
            "backtrace": [
                "__ZN9IOService16executePMRequestEP11IOPMRequest",
                "__ZN9IOService23actionPMWorkQueueInvokeEP11IOPMRequestP13IOPMWorkQueue",
                "__ZN9IOService6PMinitEv"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "handlePowerDomainWillChangeTo",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "__ZN9IOService29handlePowerDomainWillChangeToEP11IOPMRequest",
            "prototype": "",
            "backtrace": [
                "__ZN9IOService16executePMRequestEP11IOPMRequest",
                "__ZN9IOService23actionPMWorkQueueInvokeEP11IOPMRequestP13IOPMWorkQueue",
                "__ZN9IOService6PMinitEv"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "handlePowerDomainDidChangeTo",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "aotPS %s0x%qx[%ld]\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "%s::powerDomainDidChangeTo parentsKnowState %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "__ZN9IOService28handlePowerDomainDidChangeToEP11IOPMRequest",
            "prototype": "",
            "backtrace": [
                "__ZN9IOService16executePMRequestEP11IOPMRequest",
                "__ZN9IOService23actionPMWorkQueueInvokeEP11IOPMRequestP13IOPMWorkQueue",
                "__ZN9IOService6PMinitEv"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s::requestPowerDomainState\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "%s: power drop cancelled in state %u by %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "__ZN9IOService23requestPowerDomainStateEmP17IOPowerConnectionm",
            "prototype": "",
            "backtrace": [
                "__ZN14IOPMrootDomain23requestPowerDomainStateEmP17IOPowerConnectionm"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "  %u %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "  temp %u, clamp %u, current %u, new %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "__ZN9IOService19computeDesiredStateEmb",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: %d children in delayed array\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "__ZN9IOService14notifyChildrenEv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: notified delayed children\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "__ZN9IOService21notifyChildrenDelayedEv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOService::pmDriverCallout bad machine state %x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN9IOService15pmDriverCalloutEPS_Pv",
            "prototype": "",
            "backtrace": [
                "__ZN9IOService6PMinitEv"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s::setPowerState(%p, %lu -> %lu) returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "__ZN9IOService19driverSetPowerStateEv",
            "prototype": "",
            "backtrace": [
                "__ZN9IOService15pmDriverCalloutEPS_Pv",
                "__ZN9IOService6PMinitEv"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PM waiting on pmDriverCallout(0x%x) to %s (%u ms)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "__ZN9IOService20pmDriverCalloutTimerEPvS0_",
            "prototype": "",
            "backtrace": [
                "__ZN9IOService6PMinitEv"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: power desired %u:0x%x got %u:0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "__ZN9IOService18requestDomainPowerEmj",
            "prototype": "",
            "backtrace": [
                "__ZN9IOService14OurChangeStartEv",
                "__ZN9IOService16startPowerChangeEjmmP17IOPowerConnectionm"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: tickle desire removed\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "%s: tickle desire dropped\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "__ZN9IOService26ParentChangeRootChangeDownEv",
            "prototype": "",
            "backtrace": [
                "__ZN9IOService8all_doneEv"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "IOPMTardyAckSetPowerState",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "%s::setPowerState(%p, %lu -> %lu) timed out after %d ms @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s::setPowerState(%p : %p, %lu -> %lu) timed out after %d ms @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "IOPMTardyAckPowerStateChange",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "%s::powerState%sChangeTo(%p, %s, %lu -> %lu) timed out after %d ms\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZNK11IOServicePM7pmTraceEjjmm"
                },
                {
                    "string": "%s: unexpected ack timer tick (state = %d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "__ZN9IOService12ackTimerTickEv",
            "prototype": "",
            "backtrace": [
                "__ZN9IOService21actionAckTimerExpiredEP8OSObjectPvS2_S2_S2_",
                "__ZN9IOService17ack_timer_expiredEPvS0_",
                "__ZN9IOService6PMinitEv"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "WDOG:Object %s unexpected in blocked array\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "__ZN9IOService19stop_watchdog_timerEv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "WDOG:Object %s is already blocked for responses. Ignoring timeout %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "__ZN9IOService20reset_watchdog_timerEPS_i",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "PM priority notification timeout\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "PM priority notification timeout @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN9IOService20cleanClientResponsesEb",
            "prototype": "",
            "backtrace": [
                "__ZN9IOService12ackTimerTickEv",
                "__ZN9IOService21actionAckTimerExpiredEP8OSObjectPvS2_S2_S2_",
                "__ZN9IOService17ack_timer_expiredEPvS0_",
                "__ZN9IOService6PMinitEv"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: tellClientsWithResponse( %s, %s )\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "tellClientsWithResponse(%s, %s) %d of %d skipped in dark\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN9IOService23tellClientsWithResponseEi",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMTellAppWithResponse - Suspended",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZL26logClientIDForNotificationP8OSObjectP19IOPMInterestContextPKc"
                },
                {
                    "string": "App response ignored",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZL26logClientIDForNotificationP8OSObjectP19IOPMInterestContextPKc"
                }
            ],
            "symbol": "__ZN9IOService21pmTellAppWithResponseEP8OSObjectPv",
            "prototype": "",
            "backtrace": [
                "__ZN9IOService23tellClientsWithResponseEi"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMTellCapablityAppWithResponse - Suspended",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZL26logClientIDForNotificationP8OSObjectP19IOPMInterestContextPKc"
                },
                {
                    "string": "%s MESG App(%u) %s, wait %u, %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "__ZN9IOService31pmTellCapabilityAppWithResponseEP8OSObjectPv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: tellClients( %s )\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN9IOService11tellClientsEi",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PM response took %d ms (%d, %s)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "Ack(%u) %u ms\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "__ZN9IOService13responseValidEji",
            "prototype": "",
            "backtrace": [
                "__ZN9IOService18actionPMReplyQueueEP11IOPMRequestP16IOPMRequestQueue",
                "__ZN9IOService6PMinitEv"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOPMClientAck",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                },
                {
                    "string": "IOPMRequest",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                },
                {
                    "string": "IOPMRequestQueue",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                },
                {
                    "string": "IOPMWorkQueue",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                },
                {
                    "string": "IOPMCompletionQueue",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                },
                {
                    "string": "IOServicePM",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                }
            ],
            "symbol": "_GLOBAL__sub_I_IOServicePM.cpp",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: resetting ack timer to %u ms\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN9IOService21updateClientResponsesEv",
            "prototype": "",
            "backtrace": [
                "__ZN9IOService18actionPMReplyQueueEP11IOPMRequestP16IOPMRequestQueue",
                "__ZN9IOService6PMinitEv"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": " (%s)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "PM notification cancel (pid %d, %s)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "__ZN9IOService17cancelPowerChangeEm",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: cancel from machine state %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "__ZN9IOService25handleCancelIdlePowerDownEv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "bufSize is smaller than the required size\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN9IOService26configurePowerStatesReportEjPv",
            "prototype": "",
            "backtrace": [
                "__ZN9IOService15configureReportEP19IOReportChannelListjPvS2_",
                "__ZN14IOPMrootDomain15configureReportEP19IOReportChannelListjPvS2_"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: No memory for PM request type 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "__ZN9IOService16acquirePMRequestEPS_jP11IOPMRequest",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: PM not initialized\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "[- %02x] %p [%p %s] !initialized\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "__ZN9IOService20actionPMRequestQueueEP11IOPMRequestP16IOPMRequestQueue",
            "prototype": "",
            "backtrace": [
                "__ZN9IOService6PMinitEv"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "[- %02x] %p [%p %s] state %d, busy %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "__ZN9IOService23actionPMWorkQueueRetireEP11IOPMRequestP13IOPMWorkQueue",
            "prototype": "",
            "backtrace": [
                "__ZN9IOService6PMinitEv"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "[B %02x] %p [%p %s] state %d, reason %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "__ZN9IOService11isPMBlockedEP11IOPMRequesti",
            "prototype": "",
            "backtrace": [
                "__ZN9IOService23actionPMWorkQueueInvokeEP11IOPMRequestP13IOPMWorkQueue",
                "__ZN9IOService6PMinitEv"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "[W %02x] %p [%p %s] state %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "%s: idle revert, state %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "%s: bad call reason %x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "PMWorkQueueInvoke: unknown machine state %x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN9IOService23actionPMWorkQueueInvokeEP11IOPMRequestP13IOPMWorkQueue",
            "prototype": "",
            "backtrace": [
                "__ZN9IOService6PMinitEv"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "executePMRequest: unknown request type %x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN9IOService16executePMRequestEP11IOPMRequest",
            "prototype": "",
            "backtrace": [
                "__ZN9IOService23actionPMWorkQueueInvokeEP11IOPMRequestP13IOPMWorkQueue",
                "__ZN9IOService6PMinitEv"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "[A %02x] %p [%p %s] state %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "%s: delay notify cancelled\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "PMReplyQueue: unknown reply type %x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN9IOService18actionPMReplyQueueEP11IOPMRequestP16IOPMRequestQueue",
            "prototype": "",
            "backtrace": [
                "__ZN9IOService6PMinitEv"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: %s(%s) on PM thread\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "waitForPMDriverCall",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "%s: waitForPMDriverCall timeout\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "__ZN9IOService19waitForPMDriverCallEPS_",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PM request 0x%x dropped\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "__ZN13IOPMWorkQueue17checkRequestQueueEP11queue_entryPb",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "CurrentPowerState",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "CapabilityFlags",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "MaxPowerState",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "DesiredPowerState",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "MachineState",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "PowerOverrideOn",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "PowerClamp",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "IdleTimerPeriod",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "ActivityTickles",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "TimeSinceLastTickle",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "IdleTimerElapsedTime",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "WQ-CheckForWork",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "WQ-ScanEntries",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "WQ-QueueEmpty",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "WQ-NoWorkDone",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "__ZNK11IOServicePM14gatedSerializeEP11OSSerialize",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PM notification timeout (pid %d, %s)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "__ZL14logAppTimeoutsP8OSObjectPv",
            "prototype": "",
            "backtrace": [
                "__ZN9IOService20cleanClientResponsesEb",
                "__ZN9IOService12ackTimerTickEv",
                "__ZN9IOService21actionAckTimerExpiredEP8OSObjectPvS2_S2_S2_",
                "__ZN9IOService17ack_timer_expiredEPvS0_",
                "__ZN9IOService6PMinitEv"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "tellAppClientApplier - Suspended",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZL26logClientIDForNotificationP8OSObjectP19IOPMInterestContextPKc"
                }
            ],
            "symbol": "__ZL20tellAppClientApplierP8OSObjectPv",
            "prototype": "",
            "backtrace": [
                "__ZN9IOService11tellClientsEi"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOPMPowerStateQueue",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                }
            ],
            "symbol": "_GLOBAL__sub_I_IOPMPowerStateQueue.cpp",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOCatalogue",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                }
            ],
            "symbol": "_GLOBAL__sub_I_IOCatalogue.cpp",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "KernelConfigTables syntax error: %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "IOProbeScore",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOHIDInterface",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                }
            ],
            "symbol": "__ZN11IOCatalogue10initializeEv",
            "prototype": "",
            "backtrace": [
                "iokit_post_constructor_init",
                "last_kernel_constructor"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Missing or bad \"%s\" key\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "__ZN11IOCatalogue4initEP7OSArray",
            "prototype": "",
            "backtrace": [
                "__ZN11IOCatalogue10initializeEv",
                "iokit_post_constructor_init",
                "last_kernel_constructor"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOCatalogue.cpp",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN11IOCatalogue4freeEv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOCatalogue::addDrivers() encountered non-dictionary; bailing.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN11IOCatalogue10addDriversEP7OSArrayb",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "OSBundleAllowUserTerminate",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "%sallowing kextunload terminate for bundleID %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN11IOCatalogue16terminateDriversEP12OSDictionaryPcb",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "preserving service %s-0x%llx during userspace reboot\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "terminating service %s-0x%llx [dext %s]\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "terminating service %s-0x%llx [kext %s]\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN11IOCatalogue34terminateDriversForUserspaceRebootEv",
            "prototype": "",
            "backtrace": [
                "__ZL26sysctl_willuserspacerebootP10sysctl_oidPviP10sysctl_req"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: failed to terminate service %s-0x%qx with options %08llx for new dext %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "startMatching_block_invoke",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "___ZN11IOCatalogue13startMatchingEPK8OSSymbol_block_invoke.34",
            "prototype": "",
            "backtrace": [
                "__ZN11IOCatalogue13startMatchingEPK8OSSymbol",
                "__ZN11IOCatalogue15moduleHasLoadedEPKc",
                "_Xio_catalog_module_loaded"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Resetting IOCatalogue.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN11IOCatalogue18resetAndAddDriversEP7OSArrayb",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "enableCPUCore is unimplemented @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "IOPMGR.cpp",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN6IOPMGR13enableCPUCoreEj",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOPolledFilePollers",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                }
            ],
            "symbol": "_GLOBAL__sub_I_IOPolledInterface.cpp",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOPolledInterface::close[%d] 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kdb_printf"
                }
            ],
            "symbol": "IOPolledFilePollersClose",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Preferred Block Size",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kdb_printf"
                },
                {
                    "string": "%qx:%x",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "__Z16IOPolledFileOpenPKcjyyPvmPP18IOPolledFileIOVarsPP6OSDataPhPm",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "IOPolledFileWrite(0x%p, 0x%p, %llu, 0x%p) : IOStartPolledIO(0x%p, kIOPolledWrite, %llu, 0x%llx, %d) returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kdb_printf"
                }
            ],
            "symbol": "IOPolledFileWrite",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOPolledFileFlush(0x%p) : IOStartPolledIO(0x%p, kIOPolledFlush, 0, 0, 0) returned 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kdb_printf"
                }
            ],
            "symbol": "IOPolledFileFlush",
            "prototype": "",
            "backtrace": [
                "disk_stage_outproc",
                "kdp_core_polled_io_polled_file_available",
                "__ZL20IOOpenPolledCoreFilePvS_"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOWorkLoop %p lock time %qd us @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "IOWorkLoop.cpp",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "IOWorkLoop %p lock time %qd us",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSReportWithBacktrace"
                }
            ],
            "symbol": "__ZN10IOWorkLoop8lockTimeEv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOCommandGate::disable() called when not gated",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSReportWithBacktrace"
                }
            ],
            "symbol": "__ZN13IOCommandGate7disableEv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "setTimeoutFunc already %p, %p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "IOTimerEventSource.cpp",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN18IOTimerEventSource14setTimeoutFuncEv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "IOBMD: Unsupported use of guard pages with pageable memory.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "IOBMD: Unsupported use of guard pages with physical mask or contiguous memory.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "__ZN24IOBufferMemoryDescriptor20initWithPhysicalMaskEP4taskjyyy",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "Attempting to free IOBMD with page allocated flag @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "IOBufferMemoryDescriptor.cpp",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN24IOBufferMemoryDescriptor4freeEv",
            "prototype": "",
            "backtrace": [
                "__ZN16IOSKMemoryBuffer4freeEv"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "dmaCommandOperation @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "dmaCommandOperation 0x%x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN12IODMACommand7prepareEyybb",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "no remap page found @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN12IODMACommand15genIOVMSegmentsEjPFiPvPS_NS_9Segment64ES0_jES0_PyS0_Pj",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "iommu-id",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "lck_mtx_unlock_slow"
                }
            ],
            "symbol": "__ZN8IOMapper5startEP9IOService",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "iommu-parent",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN9IOService16propertyMatchingEPK8OSSymbolPK8OSObjectP12OSDictionary"
                },
                {
                    "string": "%s.DMA.%s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "__ZN8IOMapper28copyMapperForDeviceWithIndexEP9IOServicej",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mach_make_memory_entry_64 actualSize @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "getKernelReserved @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "phys is kIODefaultCache @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN25IOGeneralMemoryDescriptor21memoryReferenceCreateEjPP17IOMemoryReference",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "overrun @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "map enter err %x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN25IOGeneralMemoryDescriptor21memoryReferenceMapNewEP17IOMemoryReferenceP7_vm_mapyyjPy",
            "prototype": "",
            "backtrace": [
                "__ZN25IOGeneralMemoryDescriptor18memoryReferenceMapEP17IOMemoryReferenceP7_vm_mapyyjPy"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "bad dir for upl 0x%x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "short external upl @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN25IOGeneralMemoryDescriptor15initWithOptionsEPvjjP4taskjP8IOMapper",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "IOGMD: not wired for the IODMACommand @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "!pageList phys_addr @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZNK25IOGeneralMemoryDescriptor19dmaCommandOperationEjPvj",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "fMapped %p %s %qx @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZNK18IOMemoryDescriptor19dmaCommandOperationEjPvj",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOMemoryDescriptor 0x%zx prepared read only",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSReportWithBacktrace"
                },
                {
                    "string": "memRefEntry @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "entry size error %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "__ZN25IOGeneralMemoryDescriptor11wireVirtualEj",
            "prototype": "",
            "backtrace": [
                "__ZN25IOGeneralMemoryDescriptor7prepareEj"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "complete() while dma active @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN25IOGeneralMemoryDescriptor8completeEj",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "upl_transpose(%x)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN25IOGeneralMemoryDescriptor5doMapEP7_vm_mapPyjyy",
            "prototype": "",
            "backtrace": [
                "__ZN27IOGuardPageMemoryDescriptor5doMapEP7_vm_mapPyjyy"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "doUnmap @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN18IOMemoryDescriptor7doUnmapEP7_vm_mapyy",
            "prototype": "",
            "backtrace": [
                "__ZN25IOGeneralMemoryDescriptor7doUnmapEP7_vm_mapyy"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "address",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol11withCStringEPKc"
                }
            ],
            "symbol": "__ZNK25IOGeneralMemoryDescriptor9serializeEP11OSSerialize",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "_IOMemoryDescriptorMixedData",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                }
            ],
            "symbol": "_GLOBAL__sub_I_IOMemoryDescriptor.cpp",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOPlatformInterruptController",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "enforce_platform_action_safety",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                }
            ],
            "symbol": "__ZN16IOPlatformExpert5startEP9IOService",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "top-level",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "__ZN16IOPlatformExpert9configureEP9IOService",
            "prototype": "",
            "backtrace": [
                "__ZN18IODTPlatformExpert9configureEP9IOService"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pm%u %p %.30s %d %lx %lx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "__ZN16IOPlatformExpert5PMLogEPKcmmm",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "device",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "provider",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRegisterDevice/CheckSubTree - service registered!\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN16IOPlatformExpert12CheckSubTreeEP7OSArrayP9IOServiceS3_P12OSDictionary",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s IOClass is %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "%s IOProviderClass is %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "%s IONameMatch is %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "%s IONameMatched is %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "%s name is %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__Z19printDictionaryKeysP12OSDictionaryPc",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "halt-restart-timeout",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kalloc_type_impl_internal"
                }
            ],
            "symbol": "PEHaltRestartInternal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "Class %s passed the %s action to IOPlatformExpert @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN16IOPlatformExpert20callPlatformFunctionEPK8OSSymbolbPvS3_S3_S3_",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "logical-cpu-id",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strcmp"
                },
                {
                    "string": "logical-cluster-id",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strcmp"
                }
            ],
            "symbol": "__ZN18IODTPlatformExpert10createNubsEP9IOServiceP10OSIterator",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "AAPL,",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlen"
                }
            ],
            "symbol": "__ZN18IODTPlatformExpert12getModelNameEPci",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOPlatformExpertDevice",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                },
                {
                    "string": "IOPanicPlatform",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                }
            ],
            "symbol": "_GLOBAL__sub_I_IOPlatformExpert.cpp",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "chip-id",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__stack_chk_fail"
                }
            ],
            "symbol": "__ZN22IOPlatformExpertDevice20generatePlatformUUIDEv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(unknown platform name)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Unable to find driver for this platform: \"%s\". @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN15IOPanicPlatform5startEP9IOService",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Halt/Restart Timed Out @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZL31IOShutdownNotificationsTimedOutPvS_",
            "prototype": "",
            "backtrace": [
                "PEHaltRestartInternal"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOPlatformIO",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                }
            ],
            "symbol": "_GLOBAL__sub_I_IOPlatformIO.cpp",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "IOCPUNumber",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "__ZN5IOCPU12setCPUNumberEj",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOPlatformSleepAction",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOPlatformWakeAction",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOPlatformQuiesceAction",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOPlatformActiveAction",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOPlatformHaltRestartAction",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOPlatformPanicAction",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                }
            ],
            "symbol": "__Z27IOPlatformActionsInitializev",
            "prototype": "",
            "backtrace": [
                "iokit_post_constructor_init",
                "last_kernel_constructor"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s -> %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZL23IOServicePlatformActionPvS_jS_S_S_PKcy",
            "prototype": "",
            "backtrace": [
                "__ZL30IOInstallServicePlatformActionP9IOServicej"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IODTNVRAMPlatformNotifier",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                },
                {
                    "string": "IODTNVRAMDiags",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                },
                {
                    "string": "IODTNVRAMVariables",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                }
            ],
            "symbol": "_GLOBAL__sub_I_IONVRAM.cpp",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Stats",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "lck_rw_alloc_init"
                }
            ],
            "symbol": "__ZN14IODTNVRAMDiags5startEP9IOService",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%02X:%s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "Write",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "lck_rw_done"
                },
                {
                    "string": "Delete",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "lck_rw_done"
                }
            ],
            "symbol": "__ZN14IODTNVRAMDiags11logVariableE18NVRAMPartitionType16IONVRAMOperationPKcPv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nvram-bank-count",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "nvram-current-bank",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "__ZN22IODTNVRAMFormatHandler18getNVRAMPropertiesEv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "header adler %#08X != calculated_adler %#08X\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "IONVRAMCHRPHandler.cpp",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN18IONVRAMCHRPHandler16unserializeImageEPKhy",
            "prototype": "",
            "backtrace": [
                "__ZN9IODTNVRAM15initImageFormatEv",
                "__ZN9IODTNVRAM5startEP9IOService"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nvram-raw",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "__ZN16IONVRAMV3Handler18getNVRAMPropertiesEv",
            "prototype": "",
            "backtrace": [
                "__ZN9IODTNVRAM15initImageFormatEv",
                "__ZN9IODTNVRAM5startEP9IOService"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Invalid _systemUsed size\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Invalid _commonUsed size\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN16IONVRAMV3Handler17setEntryForRemoveEP18nvram_v3_var_entryb",
            "prototype": "",
            "backtrace": [
                "__ZN16IONVRAMV3Handler19setVariableInternalEPKhPKcP8OSObject"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ephemeral-data-mode",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "epdm-skip-nvram",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                }
            ],
            "symbol": "__ZN16IONVRAMV3Handler11handleEphDMEv",
            "prototype": "",
            "backtrace": [
                "__ZN16IONVRAMV3Handler20unserializeVariablesEv"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "handleEphDM failed with ret=%08x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN16IONVRAMV3Handler20unserializeVariablesEv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Version",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSObject_typed_operator_new"
                },
                {
                    "string": "options-system",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSObject_typed_operator_new"
                },
                {
                    "string": "options-common",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "__ZN9IODTNVRAM5startEP9IOService",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nvram-proxy-data",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kalloc_type_impl_external"
                },
                {
                    "string": "NVRAM size is 0 bytes, possibly due to bad config with iBoot + xnu mismatch @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "IONVRAMV3Handler creation failed\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "IONVRAMCHRPHandler creation failed\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN9IODTNVRAM15initImageFormatEv",
            "prototype": "",
            "backtrace": [
                "__ZN9IODTNVRAM5startEP9IOService"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "triggered",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "record_system_event"
                },
                {
                    "string": "completed with ret=%08x",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "record_system_event"
                },
                {
                    "string": "Generation",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "lck_mtx_unlock_slow"
                }
            ],
            "symbol": "__ZN9IODTNVRAM12syncInternalEb",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ObliterateNVRam",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strcmp"
                },
                {
                    "string": "ResetNVRam",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strcmp"
                }
            ],
            "symbol": "__ZN9IODTNVRAM22handleSpecialVariablesEPKcPKhPK8OSObjectPi",
            "prototype": "",
            "backtrace": [
                "__ZN9IODTNVRAM26setPropertyWithGUIDAndNameEPKhPKcP8OSObject"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "IONVRAM-DELETE-PROPERTY",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strncmp"
                },
                {
                    "string": "IONVRAM-DELETEWRET-PROPERTY",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strncmp"
                },
                {
                    "string": "IONVRAM-FORCESYNCNOW-PROPERTY",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strncmp"
                },
                {
                    "string": "%s as bool to %d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "record_system_event"
                },
                {
                    "string": "%s as number to %#llx",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "record_system_event"
                },
                {
                    "string": "%s as string to %s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "record_system_event"
                },
                {
                    "string": "%s as data with size %#x",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "record_system_event"
                }
            ],
            "symbol": "__ZN9IODTNVRAM26setPropertyWithGUIDAndNameEPKhPKcP8OSObject",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOClassNameOverride",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "BSD Names",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "__ZL7skipKeyPK8OSSymbol",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "2nvram",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlen"
                }
            ],
            "symbol": "__ZL26nvram_validate_header_v1v2PKhPji",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "com.apple.private.iokit.nvram-write-access",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "get_bsdtask_info"
                },
                {
                    "string": "com.apple.private.iokit.nvram-read-access",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "get_bsdtask_info"
                },
                {
                    "string": "com.apple.private.iokit.system-nvram-allow",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "get_bsdtask_info"
                },
                {
                    "string": "com.apple.private.iokit.system-nvram-internal-allow",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "get_bsdtask_info"
                },
                {
                    "string": "com.apple.private.iokit.system-nvram-hidden-allow",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "__ZL16verifyPermission16IONVRAMOperationPKhPKcb",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOExtensiblePaniclog",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                }
            ],
            "symbol": "_GLOBAL__sub_I_IOExtensiblePaniclog.cpp",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "EXT_PANICLOG IOKIT: Failed to create iobmd",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN20IOExtensiblePaniclog11Create_ImplEP6OSDataP8OSStringjjPPS_",
            "prototype": "",
            "backtrace": [
                "__ZN20IOExtensiblePaniclog9MetaClass8DispatchE5IORPC"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "dma-parent",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__stack_chk_fail"
                },
                {
                    "string": "dmaIndex out of range @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "IODMAController.cpp",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN15IODMAController13getControllerEP9IOServicej",
            "prototype": "",
            "backtrace": [
                "__ZN16IODMAEventSource4initEP8OSObjectP9IOServicePFvS1_PS_P12IODMACommandiyyES8_j"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PassthruInterruptController",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                }
            ],
            "symbol": "_GLOBAL__sub_I_PassthruInterruptController.cpp",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "handleInterrupt shouldn't be invoked directly @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "PassthruInterruptController.cpp",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN27PassthruInterruptController15handleInterruptEPvP9IOServicei",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOMachPort",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                },
                {
                    "string": "iokit.IOMachPort",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_ext"
                },
                {
                    "string": "IOUserIterator",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                },
                {
                    "string": "IOUserNotification",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                },
                {
                    "string": "IOServiceUserNotification",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                },
                {
                    "string": "IOServiceMessageUserNotification",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                }
            ],
            "symbol": "_GLOBAL__sub_I_IOUserClient.cpp",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s(0x%qx)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "iokit_port_object_description",
            "prototype": "",
            "backtrace": [
                "mach_port_kobject_description_from_user"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ipcEnter @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN12IOUserClient18callExternalMethodEjP25IOExternalMethodArguments",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ipcExit @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN12IOUserClient7ipcExitEi",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "virtual bool IOServiceUserNotification::handler(void *, IOService *)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN25IOServiceUserNotification7handlerEPvP9IOService",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "virtual IOReturn IOServiceMessageUserNotification::handler(void *, UInt32, IOService *, void *, vm_size_t)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN32IOServiceMessageUserNotification7handlerEPvjP9IOServiceS0_m",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "setAsyncReference not valid for 64b @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN12IOUserClient17setAsyncReferenceEPjP8ipc_portPvS3_",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "consolesession",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strncmp"
                },
                {
                    "string": "secureprocess",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strncmp"
                }
            ],
            "symbol": "__ZN12IOUserClient18clientHasPrivilegeEPvPKc",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "iokit_task_terminate phase %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "destroying out of band connect for %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kfree_ext"
                }
            ],
            "symbol": "iokit_task_terminate",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: mach_msg_send_from_kernel(0x%x)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "static IOReturn IOUserClient::_sendAsyncResult64(io_user_reference_t *, IOReturn, io_user_reference_t *, UInt32, IOOptionBits)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN12IOUserClient18_sendAsyncResult64EPyiS0_jj",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IORegistryEntrySetProperties(%s, %s) disallowed due to IORegistryEntryAllowableSetProperties\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__is_io_registry_entry_set_properties_block_invoke",
            "prototype": "",
            "backtrace": [
                "is_io_registry_entry_set_properties"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.private.security.waitquiet-panics",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "current_thread_ro"
                }
            ],
            "symbol": "is_io_service_wait_quiet_with_options",
            "prototype": "",
            "backtrace": [
                "_Xio_service_wait_quiet_with_options"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOUserClientSharedInstance",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "lck_mtx_lock"
                },
                {
                    "string": "IOUserClientMessageAppSuspended",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "IOUC %s requires kIOUserClientDefaultLockingKey, kIOUserClientDefaultLockingSetPropertiesKey, kIOUserClientDefaultLockingSingleThreadExternalMethodKey\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "IOUC %s missing IOUserClientEntitlements property\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "IOUC %s had IOUserClientEntitlementswith value not boolean false or string\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "IOUC %s missing entitlement in process %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "IOUC %s failed MACF in process %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "IOUC %s failed sandbox in process %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "is_io_service_open_extended",
            "prototype": "",
            "backtrace": [
                "_Xio_service_open_extended"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ignored is_io_service_close(0x%qx,%s)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "is_io_service_close",
            "prototype": "",
            "backtrace": [
                "_Xio_service_close"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.private.security.iocatalog-management",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "current_thread_ro"
                }
            ],
            "symbol": "is_io_catalog_send_data",
            "prototype": "",
            "backtrace": [
                "_Xio_catalog_send_data"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "wrong externalMethod for IOUserClient2022 @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN16IOUserClient202214externalMethodEjP25IOExternalMethodArgumentsP24IOExternalMethodDispatchP8OSObjectPv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "Count %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "Empty\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": ", busy %ld",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "IOPrintPlane",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Instance allocation",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClass24serializeClassDictionaryEP12OSDictionary"
                },
                {
                    "string": "Container allocation",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClass24serializeClassDictionaryEP12OSDictionary"
                },
                {
                    "string": "IOMalloc allocation",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClass24serializeClassDictionaryEP12OSDictionary"
                },
                {
                    "string": "Pageable allocation",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClass24serializeClassDictionaryEP12OSDictionary"
                }
            ],
            "symbol": "__ZNK16IOKitDiagnostics9serializeEP11OSSerialize",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOKitDiagnosticsClient",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                }
            ],
            "symbol": "_GLOBAL__sub_I_IOKitDebug.cpp",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: dataAvailableNotification failed - msg_send returned: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN11IODataQueue29sendDataAvailableNotificationEv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOStatistics::onKextUnload: cannot find kext: %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN12IOStatistics12onKextUnloadEP6OSKext",
            "prototype": "",
            "backtrace": [
                "__ZN6OSKext6unloadEv"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOStatistics::onClassAdded: cannot find parent kext: %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN12IOStatistics12onClassAddedEP6OSKextP11OSMetaClass",
            "prototype": "",
            "backtrace": [
                "__ZN6OSKext8addClassEP11OSMetaClassj"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOStatistics::onClassRemoved: cannot find class: %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN12IOStatistics14onClassRemovedEP6OSKextP11OSMetaClass",
            "prototype": "",
            "backtrace": [
                "__ZN6OSKext11removeClassEP11OSMetaClass"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOStatistics::registerEventSource - bad metaclass %p\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "IOStatistics::registerEventSource: cannot find parent class: %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN12IOStatistics19registerEventSourceEP8OSObject",
            "prototype": "",
            "backtrace": [
                "__ZN13IOEventSource4initEP8OSObjectPFvS1_zE"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOStatistics::registerWorkLoop: cannot find parent kext @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN12IOStatistics16registerWorkLoopEP10IOWorkLoop",
            "prototype": "",
            "backtrace": [
                "__ZN10IOWorkLoop4initEv"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOStatistics::registerUserClient: cannot find parent class: %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN12IOStatistics18registerUserClientEP12IOUserClient",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "interrupt_accounting",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                }
            ],
            "symbol": "__Z23interruptAccountingInitv",
            "prototype": "",
            "backtrace": [
                "InitIOKit",
                "PE_init_iokit",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "virtual IOReturn IOReporter::handleSwapPrepare(int)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "%s doesn't support shrinking @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "IOReporter::_swap* already in use @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN10IOReporter17handleSwapPrepareEi",
            "prototype": "",
            "backtrace": [
                "__ZN15IOStateReporter17handleSwapPrepareEi"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s - can't free %d channels of dimension %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "virtual void IOReporter::handleSwapCleanup(int)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN10IOReporter17handleSwapCleanupEi",
            "prototype": "",
            "backtrace": [
                "__ZN15IOStateReporter17handleSwapCleanupEi"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "virtual IOReturn IOReporter::setElementValues(int, IOReportElementValues *, uint64_t)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN10IOReporter16setElementValuesEiP21IOReportElementValuesy",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "virtual const IOReportElementValues *IOReporter::getElementValues(int)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN10IOReporter16getElementValuesEi",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOReturn IOReporter::updateReportChannel(int, int *, IOBufferMemoryDescriptor *)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "updateReportChannel",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "chElems",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN10IOReporter19updateReportChannelEiPiP24IOBufferMemoryDescriptor",
            "prototype": "",
            "backtrace": [
                "__ZN10IOReporter18handleUpdateReportEP19IOReportChannelListjPvS2_"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "virtual IOReturn IOReporter::copyElementValues(int, IOReportElementValues *)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN10IOReporter17copyElementValuesEiP21IOReportElementValues",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOReportChannelUnit",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "IOReportChannels",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "__ZN10IOReporter10legendWithEP7OSArrayS1_19IOReportChannelTypey",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "virtual IOReturn IOStateReporter::handleSwapPrepare(int)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "IOStateReporter::_swap* already in use @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN15IOStateReporter17handleSwapPrepareEi",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "IOStateReporter::handleAddChannelSwap _lastUpdateTimes unset despite non-NULL _currentStates @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN15IOStateReporter20handleAddChannelSwapEyPK8OSSymbol",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "virtual void IOStateReporter::handleSwapCleanup(int)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN15IOStateReporter17handleSwapCleanupEi",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "overrideChannelState() cannot be used after setChannelState()! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN15IOStateReporter20overrideChannelStateEyyyyy",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "incrementChannelState() cannot be used after setChannelState()! @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN15IOStateReporter21incrementChannelStateEyyyyy",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "virtual IOReturn IOStateReporter::handleSetStateID(uint64_t, int, uint64_t)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN15IOStateReporter16handleSetStateIDEyiy",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "virtual IOReturn IOStateReporter::handleSetStateByIndices(int, int, uint64_t, uint64_t)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN15IOStateReporter23handleSetStateByIndicesEiiyy",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "virtual IOReturn IOStateReporter::updateChannelValues(int)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN15IOStateReporter19updateChannelValuesEi",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOReportGroupName",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "IOReportSubGroupName",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "__ZN14IOReportLegend14organizeLegendEP12OSDictionaryPK8OSSymbolS4_",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "OSUserMetaClass",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                },
                {
                    "string": "IOUserService",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                },
                {
                    "string": "IOUserServerCheckInToken",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                },
                {
                    "string": "_IOUserServerCheckInCancellationHandler",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                },
                {
                    "string": "IOServiceStateNotificationEventSource",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                },
                {
                    "string": "IOSystemStateNotification",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                },
                {
                    "string": "IOStateNotificationItem",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                },
                {
                    "string": "IOStateNotificationListener",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                }
            ],
            "symbol": "_GLOBAL__sub_I_IOUserServer.cpp",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "DK: %s-0x%qx::SetDispatchQueue(%s)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN9IOService21SetDispatchQueue_ImplEPKcP15IODispatchQueue",
            "prototype": "",
            "backtrace": [
                "__ZN9IOService9_DispatchEPS_5IORPC"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.private.driverkit.allows-publish",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN12IOUserServer17checkEntitlementsEP12OSDictionaryP8OSObjectP9IOServiceS5_"
                },
                {
                    "string": "DK: %s-0x%qx: publisher entitlements check failed\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "IODriverKitPublishEntitlementsKey",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN12IOUserServer17checkEntitlementsEP12OSDictionaryP8OSObjectP9IOServiceS5_"
                },
                {
                    "string": "DK: %s-0x%qx: subscriber entitlements check failed\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "___ZN35IOServiceNotificationDispatchSource11Create_ImplEP12OSDictionaryyP15IODispatchQueuePPS__block_invoke",
            "prototype": "",
            "backtrace": [
                "__ZN35IOServiceNotificationDispatchSource11Create_ImplEP12OSDictionaryyP15IODispatchQueuePPS_",
                "__ZN35IOServiceNotificationDispatchSource9MetaClass8DispatchE5IORPC"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "DK: %s-0x%qx::Create(%s-0x%qx) %p\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "DK: %s-0x%qx::Create(%s-0x%qx): could not find OSKext for %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "IOUserServer(%s-0x%qx)",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "%s: found the task loadTag already set to %u (set to %u)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "__ZN12IOUserServer11Create_ImplEPKcyyP8OSStringPPS_",
            "prototype": "",
            "backtrace": [
                "__ZN12IOUserServer9MetaClass8DispatchE5IORPC"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "DK: IODispatchQueue::Create %s %p\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN15IODispatchQueue11Create_ImplEPKcyyPPS_",
            "prototype": "",
            "backtrace": [
                "__ZN15IODispatchQueue9MetaClass8DispatchE5IORPC"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "DK: OSMetaClassBase::Invoke user 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "DK: OSMetaClassBase::Invoke kernel %s 0x%qx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN15OSMetaClassBase6InvokeE5IORPC",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: proc not found\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: uuid not matching\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "__ZN12IOUserServer16setDriverKitUUIDEP6OSKext",
            "prototype": "",
            "backtrace": [
                "__ZN12IOUserServer11Create_ImplEPKcyyP8OSStringPPS_",
                "__ZN12IOUserServer9MetaClass8DispatchE5IORPC"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: failed to set check in token. token=%p, fCheckInToken=%p\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "setCheckInToken",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "__ZN12IOUserServer15setCheckInTokenEP24IOUserServerCheckInToken",
            "prototype": "",
            "backtrace": [
                "__ZN12IOUserServer19externalMethodStartEP8OSObjectPvP25IOExternalMethodArguments"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "DK: %s-0x%qx: provider entitlements check failed\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "DK: %s-0x%qx: family entitlements check failed\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN12IOUserServer17checkEntitlementsEP9IOServiceS1_",
            "prototype": "",
            "backtrace": [
                "__ZN9IOService14startCandidateEPS_",
                "__ZN9IOService15probeCandidatesEP12OSOrderedSet",
                "__ZN9IOService14doServiceMatchEj"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "DK: %s::exit(%s)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN12IOUserServer4exitEPKc",
            "prototype": "",
            "backtrace": [
                "__ZN9IOService14startCandidateEPS_",
                "__ZN9IOService15probeCandidatesEP12OSOrderedSet",
                "__ZN9IOService14doServiceMatchEj"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "DK: %s::kill(%s)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN12IOUserServer4killEPKc",
            "prototype": "",
            "backtrace": [
                "___ZN11IOServicePH25userServerAckTimerExpiredEPvS0__block_invoke"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "DK: %s-0x%qx::instantiate inactive\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "DK: no IOUserClass defined for %s-0x%qx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "DK: userMeta %s %p\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "DK: userMeta %s was not found in fClasses\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "DK: instantiate object %s with user class %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "DK: %s: no user class found\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN12IOUserServer17objectInstantiateEP8OSObject5IORPCP12IORPCMessage",
            "prototype": "",
            "backtrace": [
                "__ZN12IOUserServer14kernelDispatchEP8OSObject5IORPC",
                "__ZN12IOUserServer6serverEP8ipc_kmsgP12IORPCMessagePS1_",
                "uext_server",
                "ipc_kobject_server"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "DK:  fClasses[\"%s\"] => %p\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "___ZN12IOUserServer17objectInstantiateEP8OSObject5IORPCP12IORPCMessage_block_invoke",
            "prototype": "",
            "backtrace": [
                "__ZN12IOUserServer17objectInstantiateEP8OSObject5IORPCP12IORPCMessage",
                "__ZN12IOUserServer14kernelDispatchEP8OSObject5IORPC",
                "__ZN12IOUserServer6serverEP8ipc_kmsgP12IORPCMessagePS1_",
                "uext_server",
                "ipc_kobject_server"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "DK: %s: instantiate failed 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "DK: %s::Dispatch kernel 0x%qx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "DK: %s::Dispatch kernel 0x%qx result 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN12IOUserServer14kernelDispatchEP8OSObject5IORPC",
            "prototype": "",
            "backtrace": [
                "__ZN12IOUserServer6serverEP8ipc_kmsgP12IORPCMessagePS1_",
                "uext_server",
                "ipc_kobject_server"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "DK: TARGET %s msg 0x%qx from 0x%qx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN12IOUserServer6targetEP8OSActionP12IORPCMessage",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "DK: UEXT notify %o\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "DK: UEXT copyin(0x%x) %x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN12IOUserServer6serverEP8ipc_kmsgP12IORPCMessagePS1_",
            "prototype": "",
            "backtrace": [
                "uext_server",
                "ipc_kobject_server"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "DK: invalid refs count %qd in message id 0x%qx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "DK: %s::Dispatch(trap) kernel 0x%qx 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "IOUserServerUEXTTrap",
            "prototype": "",
            "backtrace": [
                "iokit_user_client_trap"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "DK: mach_msg() failed 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "DK: rpc copyin(0x%x) %x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN12IOUserServer3rpcE5IORPC",
            "prototype": "",
            "backtrace": [
                "__ZN15OSMetaClassBase6InvokeE5IORPC"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "DK: %s::finalize(%p)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "DK: %s::finalize(%p) dext was replaced, do not rematch current dext\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "DK: %s::finalize(%p) could not find fCheckInToken\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN12IOUserServer8finalizeEj",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "DK: %s::terminate(%s-0x%qx)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "DK: %s::terminate(%s-0x%qx) server exit before start()\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "___ZN12IOUserServer8finalizeEj_block_invoke",
            "prototype": "",
            "backtrace": [
                "__ZN12IOUserServer8finalizeEj"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "DK: IOUserServer may only be created with driver tasks\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "DK: entitlements are missing for %s[%d]\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "DK: %s[%d] has team identifier %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "com.apple.developer.driverkit entitlement check failed for %s[%d]\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN12IOUserServer8withTaskEP4task",
            "prototype": "",
            "backtrace": [
                "__ZN22IOPlatformExpertDevice13newUserClientEP4taskPvjP12OSDictionaryPP12IOUserClient"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "DK: %s::clientClose(%p)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "Driver %s has crashed too many times\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN12IOUserServer11clientCloseEv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "DK: %s-0x%qx::ClientCrashed(%s-0x%qx)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "___ZN12IOUserServer11clientCloseEv_block_invoke",
            "prototype": "",
            "backtrace": [
                "__ZN12IOUserServer11clientCloseEv"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "DK: %s::registerClass %s, %d, %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN12IOUserServer13registerClassEP18OSClassDescriptionjPP15OSUserMetaClass",
            "prototype": "",
            "backtrace": [
                "__ZN12IOUserServer27externalMethodRegisterClassEP8OSObjectPvP25IOExternalMethodArguments"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "DK: %s::LoadModule 0x%x %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN12IOUserServer13serviceAttachEP9IOServiceS1_",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "com.apple.developer.driverkit.administrator",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "current_thread_ro"
                },
                {
                    "string": "DK: %s-0x%qx:UC failed required entitlement check\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "DK: %s-0x%qx:UC failed userclient-access check, needed bundle ID %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "DK: %s-0x%qx:UC entitlements check failed\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN12IOUserServer20serviceNewUserClientEP9IOServiceP4taskPvjP12OSDictionaryPP12IOUserClient",
            "prototype": "",
            "backtrace": [
                "__ZN9IOService13newUserClientEP4taskPvjP12OSDictionaryPP12IOUserClient"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "non-removable",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "__ZN12IOUserServer17serviceJoinPMTreeEP9IOService",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "DK: %s-0x%qx::setPowerState(%ld) %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN12IOUserServer13setPowerStateEmP9IOService",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "DK: %s-0x%qx::serviceSetPowerState(%ld) %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN12IOUserServer20serviceSetPowerStateEP9IOServiceS1_mm",
            "prototype": "",
            "backtrace": [
                "__ZN9IOService19driverSetPowerStateEv",
                "__ZN9IOService15pmDriverCalloutEPS_Pv",
                "__ZN9IOService6PMinitEv"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "DK: %s-0x%qx::powerStateDidChangeTo(%ld) %d, %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN12IOUserServer21powerStateDidChangeToEmmP9IOService",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "DK: %s-0x%qx::SetPowerState(%d), %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN9IOService18SetPowerState_ImplEj",
            "prototype": "",
            "backtrace": [
                "__ZN9IOService9_DispatchEPS_5IORPC"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "DK: %s::powerOff(%d) %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN12IOUserServer11systemPowerEbb",
            "prototype": "",
            "backtrace": [
                "___ZN11IOServicePH11matchingEndEP9IOService_block_invoke",
                "__ZN11IOServicePH11matchingEndEP9IOService"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "DK: changePowerStateWithOverrideTo(%s-0x%qx, %d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "___ZN12IOUserServer11systemPowerEbb_block_invoke.164",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "DK: %schangePowerStateWithOverrideTo(%s-0x%qx, %d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "___ZN12IOUserServer11systemPowerEbb_block_invoke_2",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "DK: %s::systemHalt()\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN12IOUserServer10systemHaltEi",
            "prototype": "",
            "backtrace": [
                "___ZN11IOServicePH10systemHaltEi_block_invoke",
                "__ZN11IOServicePH10systemHaltEi",
                "IOSystemShutdownNotification"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "DK: stale service %s-0x%qx found, skipping termination\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "DK: %d: terminate(%s-0x%qx)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "___ZN12IOUserServer10systemHaltEi_block_invoke",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "DK: %s-0x%qx::start(%s-0x%qx) %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN12IOUserServer14serviceStartedEP9IOServiceS1_b",
            "prototype": "",
            "backtrace": [
                "__ZN9IOService14startCandidateEPS_",
                "__ZN9IOService15probeCandidatesEP12OSOrderedSet",
                "__ZN9IOService14doServiceMatchEj"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "DK: %s-0x%qx- %s-0x%qx blocked attempt to open %s-0x%qx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN12IOUserServer11serviceOpenEP9IOServiceS1_",
            "prototype": "",
            "backtrace": [
                "__ZN9IOService4openEPS_jPv"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "DK: %s-0x%qx:force close (%s-0x%qx)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "___ZN12IOUserServer14serviceDidStopEP9IOServiceS1__block_invoke",
            "prototype": "",
            "backtrace": [
                "__ZN12IOUserServer14serviceDidStopEP9IOServiceS1_"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "DK: %s-0x%qx %s SetEventlinkPort() returned %x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN16IOUserUserClient26eventlinkConfigurationTrapEPvS0_S0_S0_S0_S0_",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "DK: %s-0x%qx %s SetWorkGroupPort() returned %x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN16IOUserUserClient26workgroupConfigurationTrapEPvS0_S0_S0_S0_S0_",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "Driver %s has crashed %zu time(s)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "DK: Could not find OSKext for %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "IOUserServerName \"%s\" not correct organization for bundleID \"%s\"\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "Could not initialize token\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN12IOUserServer16launchUserServerEP8OSStringPK8OSSymbolP8OSNumberbPP24IOUserServerCheckInTokenP6OSData",
            "prototype": "",
            "backtrace": [
                "__ZN9IOService14startCandidateEPS_",
                "__ZN9IOService15probeCandidatesEP12OSOrderedSet",
                "__ZN9IOService14doServiceMatchEj"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.iokit.pm.sleepdescription",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "com.apple.iokit.pm.hibernatestate",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "com.apple.iokit.pm.sleepreason",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "com.apple.iokit.pm.wakedescription",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "com.apple.iokit.pm.wakereason",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "com.apple.iokit.pm.wakedescription.continuous-time-offset",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "com.apple.iokit.pm.haltdescription",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "com.apple.iokit.pm.haltstate",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "com.apple.iokit.pm.powersourcedescription",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "com.apple.iokit.pm.acattached",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                }
            ],
            "symbol": "__ZN25IOSystemStateNotification10initializeEv",
            "prototype": "",
            "backtrace": [
                "__ZN9IOService11setPlatformEP16IOPlatformExpert",
                "__ZN16IOPlatformExpert5startEP9IOService"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.private.iokit.systemstate",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "get_threadtask"
                },
                {
                    "string": "com.apple.iokit.statenotification.create",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "get_threadtask"
                },
                {
                    "string": "com.apple.iokit.statenotification.set",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "get_threadtask"
                }
            ],
            "symbol": "__ZN25IOSystemStateNotification13setPropertiesEP8OSObject",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "DK: Attempted to create action object with type \"%s\" which does not inherit from OSAction\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZL34OSActionCreateWithTypeNameInternalP8OSObjectyymP8OSStringbPP8OSAction",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "obsolete message",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "OSReportWithBacktrace"
                }
            ],
            "symbol": "__ZL25IORPCMessageFromMachReplyP16IORPCMessageMach",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOInterfaceNamePrefix",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "network-type",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "IONetworkRootType",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__stack_chk_fail"
                }
            ],
            "symbol": "IONetworkNamePrefixMatching",
            "prototype": "",
            "backtrace": [
                "IOFindBSDRoot",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "apfs-preboot-uuid",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_memmove"
                }
            ],
            "symbol": "IOGetApfsPrebootUUID",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "associated-volume-group",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_memmove"
                }
            ],
            "symbol": "IOGetAssociatedApfsVolgroupUUID",
            "prototype": "",
            "backtrace": [
                "sysctl_targetsystemvolgroupuuid"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "boot-objects-path",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_bzero"
                }
            ],
            "symbol": "IOGetBootObjectsPath",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "boot-manifest-hash",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_memmove"
                }
            ],
            "symbol": "IOGetBootManifestHash",
            "prototype": "",
            "backtrace": [
                "sysctl_bootobjectspath"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ssv-seal-broken",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlen"
                },
                {
                    "string": "40A0DDD2-77F8-4392-B4A3-1E7304206516:recovery-broken-seal-uuid",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZL28PEWriteNVRAMPropertyInternalPKciPKvj"
                },
                {
                    "string": "Failed to write recovery-broken-seal-uuid to NVRAM.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "40A0DDD2-77F8-4392-B4A3-1E7304206516:recovery-boot-mode",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZL28PEWriteNVRAMPropertyInternalPKciPKvj"
                },
                {
                    "string": "Failed to write recovery-boot-mode to NVRAM.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "missing-boot-media",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlen"
                },
                {
                    "string": "40A0DDD2-77F8-4392-B4A3-1E7304206516:boot-picker-bringup-reason",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZL28PEWriteNVRAMPropertyInternalPKciPKvj"
                },
                {
                    "string": "Failed to write boot-picker-bringup-reason to NVRAM.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "40A0DDD2-77F8-4392-B4A3-1E7304206516:boot-command",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "recover-system",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN9IOService15serviceMatchingEPKcP12OSDictionary"
                },
                {
                    "string": "Failed to acquire IODTNVRAM object.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "Failed to wait for IONVRAM service.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "Failed to save new boot-command to NVRAM.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "Unknown mode: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "\nAbout to reboot into Recovery!\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "IOSetRecoveryBoot",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "!BSD\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "mount(%d) failed\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "rootdev",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "root-matching",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "rooting via boot-uuid from /chosen: %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "RAMDisk",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "phystokv"
                },
                {
                    "string": "ramdisk params @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "BSD root: %s, major %d, minor %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "Unable to retrieve range for root memory device %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "IOFindBSDRoot: specified root memory device, %s, has not been configured @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "rd=uuid but no boot-uuid=<value> specified @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "\nWaiting for boot volume with UUID %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "Apple_HFS",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "Content",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "Waiting for matching to complete\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "Waiting on %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "Got boot device = %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "Wait for root failed\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": ", major %d, minor %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "IONetworkStack",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN9IOService15serviceMatchingEPKcP12OSDictionary"
                },
                {
                    "string": "IOInterfaceUnit",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOFreeData"
                }
            ],
            "symbol": "IOFindBSDRoot",
            "prototype": "",
            "backtrace": [
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "SecureRootName",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                }
            ],
            "symbol": "IOSecureBSDRoot",
            "prototype": "",
            "backtrace": [
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Failed to open the corefile. Error %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "IOProvideCoreFileAccess",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kernel-core-dump-location",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTGetPropertyInternal"
                },
                {
                    "string": "/private/preboot/kernelcore",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "corefile path selection in device-tree is not one of the allowed values: %s, Using default %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "corefile path selection in device-tree was set to: %s (value: %s)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZL21IOResolveCoreFilePathv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Failed to open corefile of size %llu MB (low disk space)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "IOPolledFilePollersSetup for corefile failed with error: 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "Opened corefile of size %llu MB\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "corefile_size_mb",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "Boot-args specify %d MB kernel corefile\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "Volume is low on space. Not allocating kernel corefile.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "Couldn't retrieve volume status. Error %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZL20IOOpenPolledCoreFilePvS_",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Failed to %s the corefile. Error %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "write to",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "read from",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZL20IOAccessCoreFileDataPviyiS_",
            "prototype": "",
            "backtrace": [
                "IOProvideCoreFileAccess"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "di-root-image",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "IOHDIXController::setProperty(%s, %s) failed.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "failed to quiesce attached disk image (%s)! \n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "di-root-removable",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "IOHDIXController::setProperty(%s, %d) failed.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "di_root_image_ext",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "boot-ramdmg-size",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN18IOMemoryDescriptor17withAddressRangesEP14IOVirtualRangejjP4task"
                },
                {
                    "string": "boot-ramdmg-extents",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN18IOMemoryDescriptor17withAddressRangesEP14IOVirtualRangejjP4task"
                }
            ],
            "symbol": "di_root_ramfile",
            "prototype": "",
            "backtrace": [
                "IOFindBSDRoot",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.AppleDiskImageController.load",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN9IOService15publishResourceEPKcP8OSObject"
                },
                {
                    "string": "IOHDIXController",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN9IOService15serviceMatchingEPKcP12OSDictionary"
                }
            ],
            "symbol": "__ZL18di_load_controllerv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "IOUserClientCrossEndianCompatible",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN9IOService4initEP12OSDictionary"
                }
            ],
            "symbol": "__ZN20RootDomainUserClient12initWithTaskEP4taskPvjP12OSDictionary",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "SleepRequestedByPID",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__Z16OSUnserializeXMLPKcmPP8OSString"
                },
                {
                    "string": "IOPMRootDomain SleepSystem unserialization failure: %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN20RootDomainUserClient24secureSleepSystemOptionsEPKvyPj",
            "prototype": "",
            "backtrace": [
                "__ZN20RootDomainUserClient24externalMethodDispatchedEP8OSObjectPvP25IOExternalMethodArguments"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "UserActivity Assertion",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN14IOPMrootDomain24setPMAssertionUserLevelsEy"
                }
            ],
            "symbol": "__ZN20RootDomainUserClient24externalMethodDispatchedEP8OSObjectPvP25IOExternalMethodArguments",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "could not create IOPerfControlClient @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN19IOPerfControlClient10copyClientEP9IOServicey",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "driverState has already been initialized @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN19IOPerfControlClient14registerDeviceEP9IOServiceS1_",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOPerfControlWorkContext",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                }
            ],
            "symbol": "_GLOBAL__sub_I_IOPerfControl.cpp",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "WorkloadIDTable",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "workload_config_free"
                },
                {
                    "string": "WorkloadIDConfigurationFlags",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "workload_config_free"
                }
            ],
            "symbol": "IOParseWorkloadConfig",
            "prototype": "",
            "backtrace": [
                "sysctl_workload_config"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "WorkloadClass",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "workload_config_insert"
                },
                {
                    "string": "CriticalityOffset",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "workload_config_insert"
                },
                {
                    "string": "WorkIntervalType",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "workload_config_insert"
                }
            ],
            "symbol": "___ZL11parsePhasesP19workload_config_ctxRK8OSSymbolP8OSObject_block_invoke",
            "prototype": "",
            "backtrace": [
                "___ZL20parseWorkloadIDTableP19workload_config_ctxP12OSDictionary_block_invoke",
                "IOParseWorkloadConfig",
                "sysctl_workload_config"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ComplexityAllowed",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "___ZL10parseFlagsRK8OSSymbolPK8OSObjectRjS5__block_invoke",
            "prototype": "",
            "backtrace": [
                "___ZL11parsePhasesP19workload_config_ctxRK8OSSymbolP8OSObject_block_invoke",
                "___ZL20parseWorkloadIDTableP19workload_config_ctxP12OSDictionary_block_invoke",
                "IOParseWorkloadConfig",
                "sysctl_workload_config"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "DefaultPhase",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "workload_config_set_default"
                },
                {
                    "string": "Phases",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_Block_object_dispose"
                }
            ],
            "symbol": "___ZL20parseWorkloadIDTableP19workload_config_ctxP12OSDictionary_block_invoke",
            "prototype": "",
            "backtrace": [
                "IOParseWorkloadConfig",
                "sysctl_workload_config"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "DisableWorkloadClassThreadPolicy",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "workload_config_clear_flag"
                }
            ],
            "symbol": "___ZL33parseWorkloadIDConfigurationFlagsP19workload_config_ctxPK8OSObject_block_invoke",
            "prototype": "",
            "backtrace": [
                "IOParseWorkloadConfig",
                "sysctl_workload_config"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOSKRegionMapper",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                },
                {
                    "string": "IOSKMapper",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                },
                {
                    "string": "IOSKArena",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                },
                {
                    "string": "IOSKRegion",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                },
                {
                    "string": "IOSKMemoryArray",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                },
                {
                    "string": "IOSKMemoryBuffer",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                },
                {
                    "string": "iokit.IOSKMemoryBuffer",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "zone_create_ext"
                }
            ],
            "symbol": "_GLOBAL__sub_I_IOSkywalkSupport.cpp",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOUnifiedAddressTranslator",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                }
            ],
            "symbol": "_GLOBAL__sub_I_IOUnifiedAddressTranslator.cpp",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOUnifiedAddressTranslator init failed\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN26IOUnifiedAddressTranslator22registerTaskForServiceEP4taskP9IOService",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOUAT ERROR: Failed to retrieve '%s' DT prop @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "IOUAT ERROR: Bad '%s' DT prop size (expected %zu bytes, got %u) @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN26IOUnifiedAddressTranslator13getDTPropertyEPKcm",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "IOUAT %s:%d: *** Attempting to map %s\n\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "IOUAT ERROR: Expected %s base address to be page-aligned but got %#llx @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "IOUAT ERROR: Expected %s size to be a non-zero multiple of the page size but got %#zx bytes @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "IOUAT ERROR: Failed to allocate IOMemoryDescriptor for %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "IOUAT ERROR: Failed to allocate IOMemoryMap for %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "IOUAT ERROR: Failed to prepare %s descriptor @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "IOUAT %s:%d: *** Successfully mapped %s at (VA=%#lx, PA=%#llx)\n\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN26IOUnifiedAddressTranslator29mapHardwareResourceDTInternalEPKcS1_m",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ASC carveout region",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN26IOUnifiedAddressTranslator29mapHardwareResourceDTInternalEPKcS1_m"
                },
                {
                    "string": "gfx-shared-region-base",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN26IOUnifiedAddressTranslator29mapHardwareResourceDTInternalEPKcS1_m"
                },
                {
                    "string": "gfx-shared-region-size",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN26IOUnifiedAddressTranslator13getDTPropertyEPKcm"
                },
                {
                    "string": "TTBR1 shared L2 table",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN26IOUnifiedAddressTranslator29mapHardwareResourceDTInternalEPKcS1_m"
                },
                {
                    "string": "gfx-shared-l2-region-base",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN26IOUnifiedAddressTranslator29mapHardwareResourceDTInternalEPKcS1_m"
                },
                {
                    "string": "TTBAT",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN26IOUnifiedAddressTranslator29mapHardwareResourceDTInternalEPKcS1_m"
                },
                {
                    "string": "gpu-region-base",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN26IOUnifiedAddressTranslator29mapHardwareResourceDTInternalEPKcS1_m"
                },
                {
                    "string": "GPU handoff region",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN26IOUnifiedAddressTranslator29mapHardwareResourceDTInternalEPKcS1_m"
                },
                {
                    "string": "gfx-handoff-base",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN26IOUnifiedAddressTranslator29mapHardwareResourceDTInternalEPKcS1_m"
                },
                {
                    "string": "IOUAT %s:%d: *** IOUnifiedAddressTranslator entry\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "IOUAT ERROR: Failed to allocate unmap list lock\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "IOUAT ERROR: Failed to allocate the TTBR0 lock\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "IOUAT ERROR: Failed to allocate release thread lock\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "IOUAT ERROR: Failed to allocate release array\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "iouat_debug",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "IOUAT WARN: Not using restricted aperture as VM range extension not sufficient\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "IOUAT ERROR: Failed to allocate the TTBR1 lock\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "IOUAT",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "pmap_iommu_init"
                },
                {
                    "string": "IOUAT ERROR: failed to initialize PPL state object\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "fCodeRangeAllocator @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "IOUAT %s:%d: *** IOUnifiedAddressTranslator success\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN26IOUnifiedAddressTranslator4initEP4taskP9IOService",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "IOUAT %s:%d: *** setClientContextID entry: %u\n\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "setClientContextID",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "IOUAT: failed to call PPL ioctl UAT_PPL_IOCTL_SET_CONTEXT_ID @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN26IOUnifiedAddressTranslator18setClientContextIDEjb",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "IOUAT %s:%d: *** removeClientContextID entry: %u\n\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "removeClientContextID",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "IOUAT: failed to call PPL ioctl UAT_PPL_IOCTL_REMOVE_CONTEXT_ID @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN26IOUnifiedAddressTranslator21removeClientContextIDEv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "IOUAT %s:%d: *** taskDied, context ID: %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "IOUAT %s:%d: *** taskDied, no context ID assigned\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "IOUAT: failed to free all page tables on task death for ID %u @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN26IOUnifiedAddressTranslator8taskDiedEv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "IOUAT %s:%d: *** map virt: %010llX length: 0x%llX options: 0x%llX contextID: %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "doMap",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "backingDescriptor != nullptr @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "isAligned(size, (uint32_t)PAGE_SIZE)failed: %llu/%u @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "isAligned(virtAddr, (uint32_t)PAGE_SIZE)failed: 0x%llX/%u @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "IOUAT: PPL map operation failed virt: %010llX length: 0x%llX options: 0x%llX contextID: %u @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN26IOUnifiedAddressTranslator5doMapEP18IOMemoryDescriptoryyj",
            "prototype": "",
            "backtrace": [
                "__ZN26IOUnifiedAddressTranslator3mapEP11IOMemoryMapj"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "IOUAT %s:%d: *** unmap virt: %010llX length: 0x%llX contextID: %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "IOUAT %s:%d: *** reached doUnmap exit\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN26IOUnifiedAddressTranslator7doUnmapEP18IOMemoryDescriptoryy",
            "prototype": "",
            "backtrace": [
                "__ZN26IOUnifiedAddressTranslator5unmapEP11IOMemoryMap"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "IOUAT %s:%d: *** prepareFWUnmap entry virt:%010llX length: 0x%llX contextID: %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "prepareFWUnmap",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "IOUAT: failed to call PPL ioctl UAT_PPL_IOCTL_PREPARE_UNMAP @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN26IOUnifiedAddressTranslator14prepareFWUnmapEyy",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "IOUAT %s:%d: *** reached createMappingInAperture()\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "createMappingInAperture",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN26IOUnifiedAddressTranslator23createMappingInApertureEjP18IOMemoryDescriptorjym",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOUAT %s:%d: *** reached queueUnmap()\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "fUnmapListCount < IOUAT_UNMAP_LIST_MAX_SIZE @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "IOUAT %s:%d: *** exit queueUnmap()\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN26IOUnifiedAddressTranslator10queueUnmapEP18IOMemoryDescriptoryy",
            "prototype": "",
            "backtrace": [
                "__ZN26IOUnifiedAddressTranslator7doUnmapEP18IOMemoryDescriptoryy",
                "__ZN26IOUnifiedAddressTranslator5unmapEP11IOMemoryMap"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOUAT %s:%d: *** Reached commitUnmaps()\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "IOUAT %s:%d: *** exit commitUnmaps()\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN26IOUnifiedAddressTranslator12commitUnmapsEv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOUAT %s:%d: *** getTotalPageTableMemory entry\n\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "getTotalPageTableMemory",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "IOUAT: failed to call PPL ioctl UAT_PPL_IOCTL_TOTAL_PT_MEM @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN26IOUnifiedAddressTranslator23getTotalPageTableMemoryEv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOUAT %s:%d: *** isPageFaultExpected entry 0x%llx %u\n\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "isPageFaultExpected",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "IOUAT: failed to call PPL ioctl UAT_PPL_IOCTL_FAULT_EXPECTED @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN26IOUnifiedAddressTranslator19isPageFaultExpectedEyj",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOUAT %s:%d: *** getPageTablePhysicalBaseAddress entry %u\n\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "getPageTablePhysicalBaseAddress",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "ttbrIdx < 2 @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN26IOUnifiedAddressTranslator31getPageTablePhysicalBaseAddressEj",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOUAT %s:%d: *** getPageTableEntry entry 0x%llx\n\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "getPageTableEntry",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "IOUAT: failed to call PPL ioctl UAT_PPL_IOCTL_GET_PT_ENTRY @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN26IOUnifiedAddressTranslator17getPageTableEntryEy",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOUAT %s:%d: *** mapToPhysicalAddress entry 0x%llx\n\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "mapToPhysicalAddress",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN26IOUnifiedAddressTranslator20mapToPhysicalAddressEy",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "SEPHibernator",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                },
                {
                    "string": "SEPHibernatorService",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                }
            ],
            "symbol": "_GLOBAL__sub_I_SEPHibernator.cpp",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "HibernationService",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN9IOService15serviceMatchingEPKcP12OSDictionary"
                },
                {
                    "string": "Couldn't allocate service dict @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Wrong type for IOService @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZN13SEPHibernator13sepHibernatorEv",
            "prototype": "",
            "backtrace": [
                "__Z16IOPolledFileOpenPKcjyyPvmPP18IOPolledFileIOVarsPP6OSDataPhPm"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kPMGeneralAggressiveness",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "kPMMinutesToDim",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "kPMMinutesToSpinDown",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "kPMMinutesToSleep",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "kPMEthernetWakeOnLANSettings",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "kPMSetProcessorSpeed",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "kPMPowerSource",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "kPMMotionSensor",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "kPMLastAggressivenessType",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: setAggressiveness(%x) %s = %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: setAggressiveness(%x) %s = %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain17setAggressivenessEmmj",
            "prototype": "",
            "backtrace": [
                "__ZN14IOPMrootDomain17setAggressivenessEmm"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kPMCPUAssertion",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "kPMPCIUnsupported",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "kPMDKNotReady",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain23checkSystemSleepAllowedEjj",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "OSValueObject<PMAssertStruct>",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                }
            ],
            "symbol": "__cxx_global_var_init.1332",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMAssertionsTracker",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                },
                {
                    "string": "PMHaltWorker",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                },
                {
                    "string": "IOPMServiceInterestNotifier",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                },
                {
                    "string": "PMTraceWorker",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                },
                {
                    "string": "PMSettingHandle",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                },
                {
                    "string": "PMSettingObject",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN11OSMetaClassC2EPKcPKS_j"
                }
            ],
            "symbol": "_GLOBAL__sub_I_IOPMrootDomain.cpp",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: %qd ms @ 0x%lx, ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZL8halt_logPKcz"
                }
            ],
            "symbol": "halt_log_enter",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "waitQuiet() for unmount %qd ms\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "IOServicePH::systemHalt took %qd ms\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "IOPMRootDomainWillShutdown",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZL8halt_logPKcz"
                },
                {
                    "string": "IOHibernateSystemPostWake",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZL8halt_logPKcz"
                }
            ],
            "symbol": "IOSystemShutdownNotification",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "WakeByCalendarDate",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol11withCStringEPKc"
                },
                {
                    "string": "PowerByCalendarDate",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol11withCStringEPKc"
                },
                {
                    "string": "poweron",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol11withCStringEPKc"
                },
                {
                    "string": "WakeRelativeToSleep",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol11withCStringEPKc"
                },
                {
                    "string": "PowerRelativeToShutdown",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol11withCStringEPKc"
                },
                {
                    "string": "MaintenanceWakeCalendarDate",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol11withCStringEPKc"
                },
                {
                    "string": "SleepServiceWakeCalendarKey",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol11withCStringEPKc"
                },
                {
                    "string": "SilentRunning",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOPMUserTriggeredFullWake",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "IOPMUserIsActive",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "LowLatencyAudioMode",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "ResponseTimedOut",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol11withCStringEPKc"
                },
                {
                    "string": "ResponseCancel",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol11withCStringEPKc"
                },
                {
                    "string": "ResponseSlow",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol11withCStringEPKc"
                },
                {
                    "string": "ResponsePrompt",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol11withCStringEPKc"
                },
                {
                    "string": "DriverPSChangeSlow",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol11withCStringEPKc"
                },
                {
                    "string": "IOPMSetSleepSupported",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol11withCStringEPKc"
                },
                {
                    "string": "IOPMSystemSleepMessage",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol11withCStringEPKc"
                },
                {
                    "string": "Sleep On Power Button",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol11withCStringEPKc"
                },
                {
                    "string": "Wake On Modem Ring",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol11withCStringEPKc"
                },
                {
                    "string": "Wake On Clamshell Open",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol11withCStringEPKc"
                },
                {
                    "string": "Wake On AC Change",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol11withCStringEPKc"
                },
                {
                    "string": "TimeZoneOffsetSeconds",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol11withCStringEPKc"
                },
                {
                    "string": "Display Sleep Uses Dim",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol11withCStringEPKc"
                },
                {
                    "string": "MobileMotionModule",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol11withCStringEPKc"
                },
                {
                    "string": "GPUSwitch",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol11withCStringEPKc"
                },
                {
                    "string": "ConsoleShutdown",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol11withCStringEPKc"
                },
                {
                    "string": "swd_sleeptimeout",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "swd_waketimeout",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "haltmspanic",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "haltmslog",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "no-idle",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_get_default"
                },
                {
                    "string": "PMRD: Setting gNoIdleFlag to %u from device tree\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "IOSleepSupported",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN13PMTraceWorker6tracerEP14IOPMrootDomain"
                },
                {
                    "string": "TimeMS",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol11withCStringEPKc"
                },
                {
                    "string": "ResponseType",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol11withCStringEPKc"
                },
                {
                    "string": "MessageType",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol11withCStringEPKc"
                },
                {
                    "string": "PowerCaps",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol11withCStringEPKc"
                },
                {
                    "string": "LowLatencyAudioNotifyState",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol11withCStringEPKc"
                },
                {
                    "string": "LowLatencyAudioNotifyTimestamp",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol11withCStringEPKc"
                },
                {
                    "string": "DisplayDims",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN14IOPMrootDomain14publishFeatureEPKcjPj"
                },
                {
                    "string": "Hibernation",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN14IOPMrootDomain14publishFeatureEPKcjPj"
                },
                {
                    "string": "BootSessionUUID",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol11withCStringEPKc"
                },
                {
                    "string": "PMRD: Setting gNoIdleFlag to %u from device tree\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain5startEP9IOService",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "com.apple.private.iokit.rootdomain-set-property",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN12IOUserClient21copyClientEntitlementEP4taskPKc"
                },
                {
                    "string": "privileged",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "current_thread_ro"
                },
                {
                    "string": "entitled",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "current_thread_ro"
                },
                {
                    "string": "PMRD: %s failed, process %s is not %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "SoftwareSimulatedBatteries",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol11withCStringEPKc"
                },
                {
                    "string": "System Boot Complete",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol11withCStringEPKc"
                },
                {
                    "string": "System Shutdown",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol11withCStringEPKc"
                },
                {
                    "string": "StallSystemAtHalt",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol11withCStringEPKc"
                },
                {
                    "string": "BatteryWarningsDisabled",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol11withCStringEPKc"
                },
                {
                    "string": "System Idle Seconds",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol11withCStringEPKc"
                },
                {
                    "string": "System Idle Milliseconds",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol11withCStringEPKc"
                },
                {
                    "string": "SleepDisabled",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol11withCStringEPKc"
                },
                {
                    "string": "LoginWindowProgress",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol11withCStringEPKc"
                },
                {
                    "string": "CoreDisplayProgress",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol11withCStringEPKc"
                },
                {
                    "string": "CoreGraphicsProgress",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol11withCStringEPKc"
                },
                {
                    "string": "DestroyFVKeyOnStandby",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "UserWakeAlarmScheduled",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: _userScheduledAlarmMask 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: setProperties(%s) not handled\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: %s failed, process %s is not %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: _userScheduledAlarmMask 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: setProperties(%s) not handled\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain13setPropertiesEP8OSObject",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: getAggressiveness type 0x%x not found\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: getAggressiveness type 0x%x not found\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain17getAggressivenessEmPm",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: disk spindown accelerated, was %u min\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: disk spindown restored to %u min\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: disk spindown accelerated\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "bad aggressives request type %x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "PMRD: disk spindown accelerated, was %u min\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: disk spindown restored to %u min\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: disk spindown accelerated\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain25handleAggressivesRequestsEv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: idle timer not set (noidle=%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: startIdleSleepTimer increasing timeout from %u to %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: idle timer set for %u milliseconds\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: idle timer not set (noidle=%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: startIdleSleepTimer increasing timeout from %u to %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: idle timer set for %u milliseconds\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain19startIdleSleepTimerEj",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: idle timer cancelled\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: idle timer cancelled\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain20cancelIdleSleepTimerEv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: sleep timer expired\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: sleep timer expired\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain26handleSleepTimerExpirationEv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: ignoring lastActivityTime 0x%qx, now 0x%qx, wake 0x%qx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: user inactive %u min, time to idle sleep %u min\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: ignoring lastActivityTime 0x%qx, now 0x%qx, wake 0x%qx\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: user inactive %u min, time to idle sleep %u min\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain18getTimeToIdleSleepEv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "OSSwitch",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "Sleep Reason",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "__ZN14IOPMrootDomain18sleepSystemOptionsEP12OSDictionary",
            "prototype": "",
            "backtrace": [
                "__ZN20RootDomainUserClient24secureSleepSystemOptionsEPKvyPj",
                "__ZN20RootDomainUserClient24externalMethodDispatchedEP8OSObjectPvP25IOExternalMethodArguments"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: Added %s to idle sleep preventers list (Total %u)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: Removed %s from idle sleep preventers list (Total %u)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: Cannot cancel idle sleep\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: Added %s to idle sleep preventers list (Total %u)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: Removed %s from idle sleep preventers list (Total %u)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: Cannot cancel idle sleep\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain34updatePreventIdleSleepListInternalEP9IOServicebj",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: Added %s to system sleep preventers list (Total %u)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: Removed %s from system sleep preventers list (Total %u)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: Added %s to system sleep preventers list (Total %u)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: Removed %s from system sleep preventers list (Total %u)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain28updatePreventSystemSleepListEP9IOServiceb",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: tellChangeDown %s->%s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: tellChangeDown::userActivityAtSleep %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: tellChangeDown %s->%s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: tellChangeDown::userActivityAtSleep %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain14tellChangeDownEm",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: askChangeDown %s->%s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: askChangeDown %s->%s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain13askChangeDownEm",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: askChangeDownDone(0x%x, %u) type %x, cap %x->%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: cancel dark->sleep\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "AOT wake window cancel: %qd, %qd\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: askChangeDownDone(0x%x, %u) type %x, cap %x->%x\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: cancel dark->sleep\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain17askChangeDownDoneEPjPb",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: MESG cap %x->%x did change\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: MESG cap %x->%x did change\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain17systemDidNotSleepEv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: tellNoChangeDown %s->%s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: tellNoChangeDown %s->%s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain16tellNoChangeDownEm",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: tellChangeUp %s->%s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: tellChangeUp %s->%s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain12tellChangeUpEm",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: sysPowerDownHandler message %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: sysPowerDownHandler cap %x -> %x (flags %x)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: sysPowerDownHandler max wait %d s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: sysPowerDownHandler message %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: sysPowerDownHandler cap %x -> %x (flags %x)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: sysPowerDownHandler max wait %d s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain19sysPowerDownHandlerEPvS0_jP9IOServiceS0_m",
            "prototype": "",
            "backtrace": [
                "__ZN14IOPMrootDomain5startEP9IOService"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "PMRD: SleepWake UUID queued: %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: SleepWake UUID queued: %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain24handleQueueSleepWakeUUIDEP8OSObject",
            "prototype": "",
            "backtrace": [
                "__ZN14IOPMrootDomain18dispatchPowerEventEjPvy",
                "__ZN14IOPMrootDomain5startEP9IOService"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: SleepWake UUID cleared\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: SleepWake UUID cleared\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain26handlePublishSleepWakeUUIDEb",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: Reverting sleep with relative wake\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "Reverting sleep with relative wake\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain26scheduleImmediateDebugWakeEv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "aotlinger",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain23willNotifyPowerChildrenEm",
            "prototype": "",
            "backtrace": [
                "__ZN9IOService15pmDriverCalloutEPS_Pv",
                "__ZN9IOService6PMinitEv"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: dark wake promotion disabled at %u ms\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: dark wake promotion disabled at %u ms\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain33willTellSystemCapabilityDidChangeEv",
            "prototype": "",
            "backtrace": [
                "__ZN9IOService32OurChangeTellCapabilityDidChangeEv",
                "__ZN9IOService23actionPMWorkQueueInvokeEP11IOPMRequestP13IOPMWorkQueue",
                "__ZN9IOService6PMinitEv"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "AppleClamshellState",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN14IOPMrootDomain28shouldSleepOnClamshellClosedEv"
                },
                {
                    "string": "AppleClamshellCausesSleep",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN14IOPMrootDomain28shouldSleepOnClamshellClosedEv"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain31sendClientClamshellNotificationEv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: setSleepSupported(%x)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: setSleepSupported(%x)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain17setSleepSupportedEj",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: setClamShellSleepDisable(%x->%x)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: setClamShellSleepDisable(%x->%x)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain24setClamShellSleepDisableEbj",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: next alarm (%s) in %u secs\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: %s %04d/%02d/%d %02d:%02d:%02d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: next alarm (%s) %04d/%02d/%d %02d:%02d:%02d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: scheduled alarm mask 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: next alarm (%s) in %u secs\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: %s %04d/%02d/%d %02d:%02d:%02d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: next alarm (%s) %04d/%02d/%d %02d:%02d:%02d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: scheduled alarm mask 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain14recordRTCAlarmEPK8OSSymbolP8OSObject",
            "prototype": "",
            "backtrace": [
                "__ZN14IOPMrootDomain12setPMSettingEPK8OSSymbolP8OSObject"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "SleepTimerWake",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcat"
                },
                {
                    "string": "LidOpen",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcat"
                },
                {
                    "string": "ACPower",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcat"
                },
                {
                    "string": "BatteryLow",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcat"
                },
                {
                    "string": "StandbyNoDelay",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcat"
                },
                {
                    "string": "StandbyForced",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcat"
                },
                {
                    "string": "StandbyDisabled",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcat"
                },
                {
                    "string": "USBExternalDevice",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcat"
                },
                {
                    "string": "BluetoothHIDDevice",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcat"
                },
                {
                    "string": "ExternalMediaMounted",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcat"
                },
                {
                    "string": "ThunderboltDevice",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcat"
                },
                {
                    "string": "RTCAlarmScheduled",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcat"
                },
                {
                    "string": "MagicPacketWakeEnabled",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcat"
                },
                {
                    "string": "HibernateForced",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcat"
                },
                {
                    "string": "AutoPowerOffDisabled",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcat"
                },
                {
                    "string": "AutoPowerOffForced",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcat"
                },
                {
                    "string": "ExternalDisplay",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcat"
                },
                {
                    "string": "NetworkKeepAliveActive",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcat"
                },
                {
                    "string": "LocalUserActivity",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcat"
                },
                {
                    "string": "HibernateFailed",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcat"
                },
                {
                    "string": "ThermalWarning",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcat"
                },
                {
                    "string": "DisplayCaptured",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcat"
                },
                {
                    "string": "PMRD: phase %d, standby %d delay %u timer %u, poweroff %d delay %u timer %u, hibernate 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: HibernateMode is 0. Not sending LowBattery factor to IOPPF\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: sleep factors 0x%llx%s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: sleep policy handler error\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "sleep policy handler error\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: sleep params v%u, type %u, flags 0x%x, wake 0x%x, timer %u, poweroff %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: phase %d, standby %d delay %u timer %u, poweroff %d delay %u timer %u, hibernate 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: HibernateMode is 0. Not sending LowBattery factor to IOPPF\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: sleep factors 0x%llx%s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: sleep params v%u, type %u, flags 0x%x, wake 0x%x, timer %u, poweroff %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain25evaluateSystemSleepPolicyEP25IOPMSystemSleepParametersiPj",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOPMSystemSleepType",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "__ZN14IOPMrootDomain30evaluateSystemSleepPolicyEarlyEv",
            "prototype": "",
            "backtrace": [
                "__ZN14IOPMrootDomain19sysPowerDownHandlerEPvS0_jP9IOServiceS0_m",
                "__ZN14IOPMrootDomain5startEP9IOService"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: wake in %u secs for hibernateDisabled %d, hibernateAborted %d, standbyNixed %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: wake in %u secs for hibernateDisabled %d, hibernateAborted %d, standbyNixed %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain30evaluateSystemSleepPolicyFinalEv",
            "prototype": "",
            "backtrace": [
                "__ZN14IOPMrootDomain15powerChangeDoneEm"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "PMRD: hibernateMode 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: hibernateMode 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain20getHibernateSettingsEPjS0_S0_",
            "prototype": "",
            "backtrace": [
                "__Z22IOHibernateSystemSleepv",
                "__ZN14IOPMrootDomain23willNotifyPowerChildrenEm",
                "__ZN9IOService15pmDriverCalloutEPS_Pv",
                "__ZN9IOService6PMinitEv"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: Standby delay is not set\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: Standby delay is not set\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain18getSystemSleepTypeEPjS0_",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PagingOff",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN9IOService18updateConsoleUsersEP7OSArrayjb"
                },
                {
                    "string": "PMRD: PM quiesce took %u ms\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "Quiesce",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZL8halt_logPKcz"
                },
                {
                    "string": "PMRD: %s all drivers took %u ms\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "PMRD: %s total %u ms\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "%s total %d ms:%s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "PMRD: %s msgType = 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMShutdown",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "PMRD: Skipped PM node %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: Nodes at depth %u = %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: PM nodes %u, maxDepth %u, workers %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: %s done\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: PM quiesce took %u ms\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: %s msgType = 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: Skipped PM node %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: Nodes at depth %u = %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: PM nodes %u, maxDepth %u, workers %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: %s done\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain25handlePlatformHaltRestartEj",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOPMUnattendedWakePowerState",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "IOPCITunnelled",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN15IORegistryEntry16propertyHasValueEPKcPK8OSObject"
                },
                {
                    "string": "PMRD: Avoiding delayChildNotification on object 0x%llx. flags: 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: delayChildNotification for 0x%llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "IOPMDarkWakeMaxPowerState",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: %s tag flags %x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "IOPCIBridge",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZNK15OSMetaClassBase8metaCastEPKc"
                },
                {
                    "string": "PMRD: PMTrace found PCI host bridge %s->%s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "IOPCIDevice",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZNK15OSMetaClassBase8metaCastEPKc"
                },
                {
                    "string": "acpi-device",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN13PMTraceWorker23recordTopLevelPCIDeviceEP9IOService"
                },
                {
                    "string": "PMRD: Avoiding delayChildNotification on object 0x%llx. flags: 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: delayChildNotification for 0x%llx\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: %s tag flags %x\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: PMTrace found PCI host bridge %s->%s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain20tagPowerPlaneServiceEP9IOServiceP11IOPMActionsm",
            "prototype": "",
            "backtrace": [
                "__ZN9IOService25handleRegisterPowerDriverEP11IOPMRequest",
                "__ZN9IOService16executePMRequestEP11IOPMRequest",
                "__ZN9IOService23actionPMWorkQueueInvokeEP11IOPMRequestP13IOPMWorkQueue",
                "__ZN9IOService6PMinitEv"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: PowerChangeOverride (%s->%s, %x, 0x%x) tag 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: Duplicate lowBattery sleep",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: PowerChangeOverride (%s->%s, %x, 0x%x) tag 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: Duplicate lowBattery sleep",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain22overrideOurPowerChangeEP9IOServiceP11IOPMActionsPK11IOPMRequestPmPj",
            "prototype": "",
            "backtrace": [
                "__ZN14IOPMrootDomain20tagPowerPlaneServiceEP9IOServiceP11IOPMActionsm",
                "__ZN9IOService25handleRegisterPowerDriverEP11IOPMRequest",
                "__ZN9IOService16executePMRequestEP11IOPMRequest",
                "__ZN9IOService23actionPMWorkQueueInvokeEP11IOPMRequestP13IOPMWorkQueue",
                "__ZN9IOService6PMinitEv"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "PMRD: sleepDelaysReport f->9 start at 0x%llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: sleepDelaysReport 9->0 start at 0x%llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: sleep reason %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: === START (%s->%s, %x->%x, 0x%x) gen %u, msg %x, tag %x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "illegal AOT entry from %s @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "PMRD: sleepDelaysReport f->9 start at 0x%llx\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: sleepDelaysReport 9->0 start at 0x%llx\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: sleep reason %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: === START (%s->%s, %x->%x, 0x%x) gen %u, msg %x, tag %x\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain25handleOurPowerChangeStartEP9IOServiceP11IOPMActionsPK11IOPMRequestmPj",
            "prototype": "",
            "backtrace": [
                "__ZN14IOPMrootDomain20tagPowerPlaneServiceEP9IOServiceP11IOPMActionsm",
                "__ZN9IOService25handleRegisterPowerDriverEP11IOPMRequest",
                "__ZN9IOService16executePMRequestEP11IOPMRequest",
                "__ZN9IOService23actionPMWorkQueueInvokeEP11IOPMRequestP13IOPMWorkQueue",
                "__ZN9IOService6PMinitEv"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "PMRD: sleepDelaysReport f->9 end 0x%llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: === FINISH (%s->%s, %x->%x, 0x%x) gen %u, msg %x, tag %x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: DisplayOn fullwake request is removed\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: sleepDelaysReport f->9 end 0x%llx\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: === FINISH (%s->%s, %x->%x, 0x%x) gen %u, msg %x, tag %x\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: DisplayOn fullwake request is removed\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain24handleOurPowerChangeDoneEP9IOServiceP11IOPMActionsPK11IOPMRequestmj",
            "prototype": "",
            "backtrace": [
                "__ZN14IOPMrootDomain20tagPowerPlaneServiceEP9IOServiceP11IOPMActionsm",
                "__ZN9IOService25handleRegisterPowerDriverEP11IOPMRequest",
                "__ZN9IOService16executePMRequestEP11IOPMRequest",
                "__ZN9IOService23actionPMWorkQueueInvokeEP11IOPMRequestP13IOPMWorkQueue",
                "__ZN9IOService6PMinitEv"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: power clamp enabled %s %qx, pendingCap 0x%x, ps %d, cflags 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: power clamp removed %s %qx, pendingCap 0x%x, ps %d, cflags 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: power clamped %s %qx, ps %u->%u, cflags 0x%x)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: dark wake power clamped after %u ms\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: power clamp enabled %s %qx, pendingCap 0x%x, ps %d, cflags 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: power clamp removed %s %qx, pendingCap 0x%x, ps %d, cflags 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: power clamped %s %qx, ps %u->%u, cflags 0x%x)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: dark wake power clamped after %u ms\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain29overridePowerChangeForServiceEP9IOServiceP11IOPMActionsPK11IOPMRequestPmPj",
            "prototype": "",
            "backtrace": [
                "__ZN14IOPMrootDomain20tagPowerPlaneServiceEP9IOServiceP11IOPMActionsm",
                "__ZN9IOService25handleRegisterPowerDriverEP11IOPMRequest",
                "__ZN9IOService16executePMRequestEP11IOPMRequest",
                "__ZN9IOService23actionPMWorkQueueInvokeEP11IOPMRequestP13IOPMWorkQueue",
                "__ZN9IOService6PMinitEv"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: %s: delay child notify\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: %s: delay child notify\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain28shouldDelayChildNotificationEP9IOService",
            "prototype": "",
            "backtrace": [
                "__ZN9IOService14notifyChildrenEv"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOPMSystemCapabilityInterest",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kalloc_ext"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain16registerInterestEPK8OSSymbolPFiPvS3_jP9IOServiceS3_mES3_S3_",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: destroyed capability client set %p\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain19systemMessageFilterEPvS0_S0_S0_",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: user activity reported %d lastSleepReason %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: user activity reported %d lastSleepReason %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain15reportUserInputEv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: requestUserActive: device is null\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: requestUserActive: no device name or registry entry\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "%s:%s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "PMRD: requestUserActive from %s (0x%llx) for %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: requestUserActive: device is null\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: requestUserActive: no device name or registry entry\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: requestUserActive from %s (0x%llx) for %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain17requestUserActiveEP9IOServicePKc",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: wakeAbs %qd < nowAbs %qd\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "PMRD: setWakeTime: %04d/%02d/%d %02d:%02d:%02d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain11setWakeTimeEy",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "user alarm",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain13aotShouldExitEb",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: System cannot sustain full wake\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN9IOService29changePowerStateForRootDomainEm"
                },
                {
                    "string": "Notification",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: System cannot sustain full wake\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain23handleSetDisplayPowerOnEb",
            "prototype": "",
            "backtrace": [
                "__ZN14IOPMrootDomain18dispatchPowerEventEjPvy",
                "__ZN14IOPMrootDomain5startEP9IOService"
            ]
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "sleep-disabled",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_get_default"
                },
                {
                    "string": "PMRD: Setting gSleepDisabledFlag to %u from device tree\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: Clearing gSleepDisabledFlag due to test_sleep_in_vm boot-arg\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "WakeTypeUser",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN14IOPMrootDomain17requestUserActiveEP9IOServicePKc"
                },
                {
                    "string": "WakeTypeAlarm",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN14IOPMrootDomain17requestUserActiveEP9IOServicePKc"
                },
                {
                    "string": "SleepService",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "Maintenance",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: Setting gSleepDisabledFlag to %u from device tree\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: Clearing gSleepDisabledFlag due to test_sleep_in_vm boot-arg\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain18dispatchPowerEventEjPvy",
            "prototype": "",
            "backtrace": [
                "__ZN14IOPMrootDomain5startEP9IOService"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "PMRD: Thermal overtemp message received!\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: DarkWake thermal limits message received!\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: Received kIOPMPowerEmergency",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: Clamshell opened\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "Lid Open",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN14IOPMrootDomain15reportUserInputEv"
                },
                {
                    "string": "PMRD: clamshell tickled %d lastSleepReason %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: Ignoring redundant Clamshell close event\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: Clamshell closed\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: Desktop mode %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: Clamshell enabled\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: Clamshell disabled\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: ProModeEngaged\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: ProModeDisengaged\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: Thermal overtemp message received!\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: DarkWake thermal limits message received!\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: Received kIOPMPowerEmergency",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: Clamshell opened\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: clamshell tickled %d lastSleepReason %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: Ignoring redundant Clamshell close event\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: Clamshell closed\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: Desktop mode %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: Clamshell enabled\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: Clamshell disabled\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: ProModeEngaged\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: ProModeDisengaged\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain23handlePowerNotificationEj",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: user active dropped\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: User activity while in notification wake\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: aggressiveness changed: system %u->%u, display %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: idle time -> %d ms (ena %d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: Requested wrangler idle\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "HID Activity",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: Requesting full wake due to dark wake activity tickle\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: dark wake entry\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: User activity recorded while going to darkwake\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: DarkWake: sleepASAP %d, clamshell closed %d, disabled %d/%x, desktopMode %d, ac %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: Display sleep while in notification wake\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: extra sleep timer changed\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: user inactive\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: idle sleep timer enabled\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: idle sleep timer disabled\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: user active dropped\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: User activity while in notification wake\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: aggressiveness changed: system %u->%u, display %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: idle time -> %d ms (ena %d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: Requested wrangler idle\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: Requesting full wake due to dark wake activity tickle\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: dark wake entry\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: User activity recorded while going to darkwake\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: DarkWake: sleepASAP %d, clamshell closed %d, disabled %d/%x, desktopMode %d, ac %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: Display sleep while in notification wake\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: extra sleep timer changed\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: user inactive\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: idle sleep timer enabled\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: idle sleep timer disabled\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain14evaluatePolicyEij",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "AppleARMBacklight",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZNK15OSMetaClassBase8metaCastEPKc"
                }
            ],
            "symbol": "___ZN14IOPMrootDomain24idleSleepPreventersCountEv_block_invoke",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "PMRD: full wake %s (reason %u) %u ms\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "promotion",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN9IOService20synchronizePowerTreeEjPS_"
                },
                {
                    "string": "full wake %s (reason %u) %u ms\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain15requestFullWakeENS_14FullWakeReasonE",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: wrangler->setIgnoreIdleTimer(%d)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "CPU assertions %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: PreventIdleSleep driver assertion raised\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: PreventIdleSleep driver assertion dropped\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: wrangler->setIgnoreIdleTimer(%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: PreventIdleSleep driver assertion raised\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: PreventIdleSleep driver assertion dropped\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain18evaluateAssertionsEyy",
            "prototype": "",
            "backtrace": [
                "__ZN19PMAssertionsTracker8tabulateEv"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMStats: Hibernate read took %qd ms\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "SleepStatistics",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "__ZN14IOPMrootDomain18pmStatsRecordEventEiy",
            "prototype": "",
            "backtrace": [
                "hibernate_machine_init",
                "IOCPURunPlatformActiveActions",
                "PE_cpu_machine_init"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Sleep",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol11withCStringEPKc"
                },
                {
                    "string": "TransitionType",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "lck_mtx_lock_slow"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain32pmStatsRecordApplicationResponseEPK8OSSymbolPKcijyP8OSObjectmb",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 7,
            "anchors": [
                {
                    "string": "IOPMRegisterNVRAMTracePointHandler",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN15IORegistryEntry8fromPathEPKcPK15IORegistryPlanePcPiPS_"
                },
                {
                    "string": "wake-failure",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "PMRD: Sleep failure code 0x%08x 0x%08x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "Sleep failure code 0x%08x 0x%08x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "IOPMInstallSystemSleepPolicyHandler",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN15IORegistryEntry8fromPathEPKcPK15IORegistryPlanePcPiPS_"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain20callPlatformFunctionEPK8OSSymbolbPvS3_S3_S3_",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: %s[%u] to %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: %s to %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: %s[%u] to %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: %s to %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain17traceNotificationEP8OSObjectbyj",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: %s[%u] ack from %s took %d ms\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: %s[%u] ack from %s took %d ms\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain20traceNotificationAckEP8OSObjectj",
            "prototype": "",
            "backtrace": [
                "__ZN9IOService13responseValidEji",
                "__ZN9IOService18actionPMReplyQueueEP11IOPMRequestP16IOPMRequestQueue",
                "__ZN9IOService6PMinitEv"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: %s[%u] response from %s took %d ms\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: %s[%u] response from %s took %d ms (ack in %d us)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: %s[%u] response from %s took %d ms\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: %s[%u] response from %s took %d ms (ack in %d us)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain25traceNotificationResponseEP8OSObjectjj",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: %s to %s dropped\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: %s to %s dropped\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain25traceFilteredNotificationEP8OSObject",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "PMRD: trace point 0x%02x msgType 0x%x detail 0x%08x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: trace point 0x%02x msgType 0x%x detail 0x%08x\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain11traceDetailEjjj",
            "prototype": "",
            "backtrace": [
                "__ZN9IOService23tellClientsWithResponseEi"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: PMTraceWorker %p\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: PMTraceWorker %p\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN13PMTraceWorker6tracerEP14IOPMrootDomain",
            "prototype": "",
            "backtrace": [
                "__ZN14IOPMrootDomain5startEP9IOService"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PCITopLevel",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "lck_mtx_unlock_slow"
                }
            ],
            "symbol": "__ZN13PMTraceWorker23recordTopLevelPCIDeviceEP9IOService",
            "prototype": "",
            "backtrace": [
                "__ZN14IOPMrootDomain20tagPowerPlaneServiceEP9IOServiceP11IOPMActionsm",
                "__ZN9IOService25handleRegisterPowerDriverEP11IOPMRequest",
                "__ZN9IOService16executePMRequestEP11IOPMRequest",
                "__ZN9IOService23actionPMWorkQueueInvokeEP11IOPMRequestP13IOPMWorkQueue",
                "__ZN9IOService6PMinitEv"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: trace point 0x%02x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: trace point 0x%02x\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN13PMTraceWorker10tracePointEh",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: component trace point 0x%02x data 0x%08x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: component trace point 0x%02x data 0x%08x\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN13PMTraceWorker26traceComponentWakeProgressEjj",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: trace point 0x%02x detail 0x%08x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: trace point 0x%02x detail 0x%08x\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN13PMTraceWorker19tracePCIPowerChangeENS_8change_tEP9IOServicejj",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: PMHaltWorker %p\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: PMHaltWorker %p\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN12PMHaltWorker6workerEv",
            "prototype": "",
            "backtrace": [
                "__ZN14IOPMrootDomain25handlePlatformHaltRestartEj"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: PMHaltWorker free %p\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: PMHaltWorker free %p\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN12PMHaltWorker4freeEv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "PMRD: All done for worker: %p (visits = %u)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: All done for worker: %p (visits = %u)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN12PMHaltWorker4mainEPvi",
            "prototype": "",
            "backtrace": [
                "__ZN12PMHaltWorker6workerEv",
                "__ZN14IOPMrootDomain25handlePlatformHaltRestartEj"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: %s driver %s (0x%llx) took %u ms\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "PowerOff/Restart handler completed",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "halt_log_enter"
                }
            ],
            "symbol": "__ZN12PMHaltWorker4workEPS_",
            "prototype": "",
            "backtrace": [
                "__ZN12PMHaltWorker4mainEPvi",
                "__ZN12PMHaltWorker6workerEv",
                "__ZN14IOPMrootDomain25handlePlatformHaltRestartEj"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PowerOff/Restart still waiting on handler",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "halt_log_enter"
                },
                {
                    "string": "PMRD: %s still waiting on %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "%s still waiting on %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN12PMHaltWorker12checkTimeoutEPS_Py",
            "prototype": "",
            "backtrace": [
                "__ZN14IOPMrootDomain25handlePlatformHaltRestartEj"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: %s acknowledged without worker property\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: %s acknowledged without worker property\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain29acknowledgeSystemWillShutdownEP9IOService",
            "prototype": "",
            "backtrace": [
                "__ZN9IOService18systemWillShutdownEj"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "DK matching",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN19PMAssertionsTracker15createAssertionEyjP9IOServicePKcPy"
                }
            ],
            "symbol": "___ZN14IOPMrootDomain33acquireDriverKitMatchingAssertionEv_block_invoke",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Over-release of driverkit matching assertion @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "___ZN14IOPMrootDomain33releaseDriverKitMatchingAssertionEv_block_invoke",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "SWWdogTriggeredRestart",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strncmp"
                },
                {
                    "string": "SWWdogLogsValid",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strncmp"
                },
                {
                    "string": "DesktopMode",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strcmp"
                },
                {
                    "string": "DisplayIdleForDemandSleep",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strcmp"
                },
                {
                    "string": "IOPMDriverWakeEvents",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strcmp"
                },
                {
                    "string": "AppStatistics",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strcmp"
                },
                {
                    "string": "IdleSleepPreventers",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strcmp"
                },
                {
                    "string": "SystemSleepPreventers",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strcmp"
                },
                {
                    "string": "IdleSleepPreventersWithID",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strcmp"
                },
                {
                    "string": "SystemSleepPreventersWithID",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strcmp"
                }
            ],
            "symbol": "__ZNK14IOPMrootDomain12copyPropertyEPKc",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: system wake events: %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "system wake events: %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain22acceptSystemWakeEventsEj",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "AOP.OutboxNotEmpty",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strcmp"
                },
                {
                    "string": "spu_gesture",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strcmp"
                },
                {
                    "string": "trackpadkeyboard",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strcmp"
                },
                {
                    "string": "Reason",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "Details",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "claimSystemWakeEvent(%s, %s, 0x%x) 0x%x %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: claimSystemWakeEvent(%s, 0x%x, %s, 0x%llx) aot %d phase 0x%x add %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain20claimSystemWakeEventEP9IOServicejPKcP8OSObject",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: cpu assertion held for %llu ms by 0x%llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: cpu assertion held for %llu ms by 0x%llx\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN19PMAssertionsTracker22reportCPUBitAccountingEv",
            "prototype": "",
            "backtrace": [
                "__ZN14IOPMrootDomain24handleOurPowerChangeDoneEP9IOServiceP11IOPMActionsPK11IOPMRequestmj",
                "__ZN14IOPMrootDomain20tagPowerPlaneServiceEP9IOServiceP11IOPMActionsm",
                "__ZN9IOService25handleRegisterPowerDriverEP11IOPMRequest",
                "__ZN9IOService16executePMRequestEP11IOPMRequest",
                "__ZN9IOService23actionPMWorkQueueInvokeEP11IOPMRequestP13IOPMWorkQueue",
                "__ZN9IOService6PMinitEv"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "DriverPMAssertions",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "lck_mtx_unlock_slow"
                }
            ],
            "symbol": "__ZN19PMAssertionsTracker17publishPropertiesEv",
            "prototype": "",
            "backtrace": [
                "__ZNK14IOPMrootDomain19serializePropertiesEP11OSSerialize"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "PMRD: assertionsUser 0x%llx->0x%llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: assertionsUser 0x%llx->0x%llx\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN19PMAssertionsTracker28handleSetUserAssertionLevelsEPv",
            "prototype": "",
            "backtrace": [
                "__ZN14IOPMrootDomain24setPMAssertionUserLevelsEy",
                "__ZN20RootDomainUserClient24externalMethodDispatchedEP8OSObjectPvP25IOExternalMethodArguments"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "CreatedTime",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "ModifiedTime",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "Level",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "Assertions",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "__ZN19PMAssertionsTracker19copyAssertionsArrayEv",
            "prototype": "",
            "backtrace": [
                "__ZN19PMAssertionsTracker17publishPropertiesEv",
                "__ZNK14IOPMrootDomain19serializePropertiesEP11OSSerialize"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "DesignCapacity",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "MaxErr",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "ManufactureDate",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "BatteryHealth",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "HealthConfidence",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "CapacityEstimated",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "ChargeStatus",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "Temperature",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "AdapterDetails",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "ChargerConfiguration",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "AdapterID",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "Watts",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "AdapterRevision",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "SerialNumber",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "FamilyCode",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "Current",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "Description",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "PMUConfiguration",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "Source",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "ErrorFlags",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "SharedSource",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "CloakedSource",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "BatteryInvalidWakeSeconds",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "PostChargeWaitSeconds",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                },
                {
                    "string": "PostDischargeWaitSeconds",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN8OSSymbol17withCStringNoCopyEPKc"
                }
            ],
            "symbol": "__ZN12IORootParent10initializeEv",
            "prototype": "",
            "backtrace": [
                "iokit_post_constructor_init",
                "last_kernel_constructor"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOPMAOTAnalytics possibleCount: %u, confirmedPossibleCount: %u, rejectedPossibleCount: %u, expiredPossibleCount: %u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain15reportAnalyticsEv",
            "prototype": "",
            "backtrace": [
                "__ZL27reportAnalyticsTimerExpiredPvS_",
                "__ZN14IOPMrootDomain14initAOTMetricsEv",
                "___ZL14update_aotmodej_block_invoke"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "starting sleep",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN18IORegistryIterator11iterateOverEP15IORegistryEntryPK15IORegistryPlanej"
                },
                {
                    "string": "notifying applications",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN18IORegistryIterator11iterateOverEP15IORegistryEntryPK15IORegistryPlanej"
                },
                {
                    "string": "notifying clients about upcoming system capability changes",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN18IORegistryIterator11iterateOverEP15IORegistryEntryPK15IORegistryPlanej"
                },
                {
                    "string": "creating hibernation file or while calling rootDomain's clients about upcoming rootDomain's state changes",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN18IORegistryIterator11iterateOverEP15IORegistryEntryPK15IORegistryPlanej"
                },
                {
                    "string": "calling power state change callbacks",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN18IORegistryIterator11iterateOverEP15IORegistryEntryPK15IORegistryPlanej"
                },
                {
                    "string": "calling rootDomain's clients about rootDomain's state changes",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN18IORegistryIterator11iterateOverEP15IORegistryEntryPK15IORegistryPlanej"
                },
                {
                    "string": "notifying clients about current system capabilities",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN18IORegistryIterator11iterateOverEP15IORegistryEntryPK15IORegistryPlanej"
                },
                {
                    "string": "calling Quiesce/Sleep action callbacks",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN18IORegistryIterator11iterateOverEP15IORegistryEntryPK15IORegistryPlanej"
                },
                {
                    "string": "halting all non-boot CPUs",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN18IORegistryIterator11iterateOverEP15IORegistryEntryPK15IORegistryPlanej"
                },
                {
                    "string": "executing platform specific code",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN18IORegistryIterator11iterateOverEP15IORegistryEntryPK15IORegistryPlanej"
                },
                {
                    "string": "writing the hibernation image",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN18IORegistryIterator11iterateOverEP15IORegistryEntryPK15IORegistryPlanej"
                },
                {
                    "string": "in EFI/Bootrom after last point of entry to sleep",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN18IORegistryIterator11iterateOverEP15IORegistryEntryPK15IORegistryPlanej"
                },
                {
                    "string": "calling Wake action callbacks",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN18IORegistryIterator11iterateOverEP15IORegistryEntryPK15IORegistryPlanej"
                },
                {
                    "string": "starting non-boot CPUs",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN18IORegistryIterator11iterateOverEP15IORegistryEntryPK15IORegistryPlanej"
                },
                {
                    "string": "sending kIOMessageSystemWillPowerOn message to kernel and userspace clients",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN18IORegistryIterator11iterateOverEP15IORegistryEntryPK15IORegistryPlanej"
                },
                {
                    "string": "calling rootDomain's clients about upcoming rootDomain's state changes",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN18IORegistryIterator11iterateOverEP15IORegistryEntryPK15IORegistryPlanej"
                },
                {
                    "string": "calling rootDomain's clients about completed rootDomain's state changes",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN18IORegistryIterator11iterateOverEP15IORegistryEntryPK15IORegistryPlanej"
                },
                {
                    "string": "informing clients about current system capabilities",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN18IORegistryIterator11iterateOverEP15IORegistryEntryPK15IORegistryPlanej"
                },
                {
                    "string": "sending asynchronous kIOMessageSystemHasPoweredOn message to userspace clients",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN18IORegistryIterator11iterateOverEP15IORegistryEntryPK15IORegistryPlanej"
                },
                {
                    "string": "entering darkwake on way to sleep",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcat"
                },
                {
                    "string": "entering fullwake from darkwake",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN18IORegistryIterator11iterateOverEP15IORegistryEntryPK15IORegistryPlanej"
                },
                {
                    "string": "Sleep transition timed out after %d seconds",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "Wake transition timed out after %d seconds",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": " while ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcat"
                },
                {
                    "string": " Suspected bundle: ",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcat"
                },
                {
                    "string": " Thread 0x%llx.",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain14getFailureDataEPP6threadPcm",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: Sleep Wake failure in EFI\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "Sleep Wake failure in EFI\n\nFailure code:: 0x%08x 0x%08x\n\nPlease IGNORE the below stackshot\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "PMRD: No sleep wake failure string\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: Ignoring zero byte SleepWake failure string\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: Deleting stackshot on successful wake\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "/var/log/SleepWakeFailureString.txt",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN14IOPMrootDomain22sleepWakeDebugSaveFileEPKcPci"
                },
                {
                    "string": "PMRD: Failed to save SleepWake failure string to file. error:%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: Saved SleepWake failure string to file.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: No SleepWake blob to read beyond chunk %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "PMRD: Could not read the property :-(\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "PMRD: Concatenated length for the SWD blob %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "PMRD: Failed to save SleepWake zipped data to file. error:%d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "PMRD: Saved SleepWake zipped data to file.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "No stackshot data\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "PMRD: No buffer allocated to save failure stackshot\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "bounded_array_ref: n + m is larger than the size of any bounded_array_ref",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN9os_detail21panic_trapping_policy4trapEPKc.47521"
                },
                {
                    "string": "bounded_array_ref: invalid slice provided, the indices are of bounds for the bounded_array_ref",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "__ZN9os_detail21panic_trapping_policy4trapEPKc.47521"
                },
                {
                    "string": "PMRD: No sleep wake failure string\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: Ignoring zero byte SleepWake failure string\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: Deleting stackshot on successful wake\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: Failed to save SleepWake failure string to file. error:%d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: Saved SleepWake failure string to file.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain20saveFailureData2FileEv",
            "prototype": "",
            "backtrace": [
                "__ZN14IOPMrootDomain18dispatchPowerEventEjPvy",
                "__ZN14IOPMrootDomain5startEP9IOService"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: Deleting any sleepwake failure data in nvram\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain15deleteStackshotEv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "Power button pressed during wake transition after %u ms.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "PMRD: Taking snapshot. bytesRemaining: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: stack_snapshot_from_kernel returned 0x%x. pid: %d bufsize:0x%x flags:0x%llx bytesWritten: %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: Insufficient buffer size for only kernel task\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "PMRD: Failed to get stackshot(0x%x) bufsize:0x%x flags:0x%llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "Failed to get stackshot(0x%x) bufsize:0x%x flags:0x%llx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: Failed to update NVRAM %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "PMRD: Failed to update NVRAM with leftovers\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "PMRD: Successfully saved stackshot to NVRAM\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "PMRD: Compressed failure stackshot of kernel+dexts is too large size=%d bytes\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "PMRD: Compressed failure stackshot of only kernel is too large size=%d bytes\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "\nFailure code:: 0x%08x %08x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "snprintf"
                },
                {
                    "string": "PMRD: Failed to write SleepWake failure string\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: Shutting down due to repeated Sleep/Wake failures\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "PMRD: Calling panic prevented by swd_panic boot-args. Calling restart",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "PMRD: PMRD inited the zlib allocation routines\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "PMRD: ZERR %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "PMRD: Total output size %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "PMRD: Taking snapshot. bytesRemaining: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: stack_snapshot_from_kernel returned 0x%x. pid: %d bufsize:0x%x flags:0x%llx bytesWritten: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: Failed to write SleepWake failure string\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain13takeStackshotEb",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: Failed to allocate Memory descriptor for sleepWake debug\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: SleepWake debug buffer size:0x%x spindump offset:0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: Failed to allocate Memory descriptor for sleepWake debug\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: SleepWake debug buffer size:0x%x spindump offset:0x%x\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain22sleepWakeDebugMemAllocEv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: Failed to open the file %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "PMRD: Bailing as this is not a regular file\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "PMRD: Failed to save sleep wake log. err 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "PMRD: Saved %d bytes to file %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: Saved %d bytes to file %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN14IOPMrootDomain22sleepWakeDebugSaveFileEPKcPci",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: disk_sync_callout ps=%u\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: disk_sync_callout finish\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "PMRD: disk_sync_callout ps=%u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "PMRD: disk_sync_callout finish\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZL17disk_sync_calloutPvS_",
            "prototype": "",
            "backtrace": [
                "__ZN14IOPMrootDomain5startEP9IOService"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: Print buffer exhausted for sleep preventers list\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "IOLog"
                },
                {
                    "string": "PMRD: Print buffer exhausted for sleep preventers list\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZL26makeSleepPreventersListLogRK11OSSharedPtrI5OSSetEPcm",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: %s handler %p took %u ms\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "PowerOff/Restart message to priority client",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "halt_log_enter"
                }
            ],
            "symbol": "__ZL26platformHaltRestartApplierP8OSObjectPv",
            "prototype": "",
            "backtrace": [
                "__ZN14IOPMrootDomain25handlePlatformHaltRestartEj"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: Alloc in zipping %d items of size %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "PMRD: Offset %zu\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "__ZL12swd_zs_allocPvjj",
            "prototype": "",
            "backtrace": [
                "__ZN14IOPMrootDomain13takeStackshotEb"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PMRD: No space to GZIP... not writing to NVRAM\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "__ZL11swd_zoutputP10z_stream_sPhj",
            "prototype": "",
            "backtrace": [
                "__ZN14IOPMrootDomain13takeStackshotEb"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "cpu_boot_thread",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "bsd_setthreadname"
                }
            ],
            "symbol": "__Z15IOCPUInitializev",
            "prototype": "",
            "backtrace": [
                "iokit_post_constructor_init",
                "last_kernel_constructor"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PE_cpu_start_from_kext unimplemented @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "PE_cpu_start_from_kext",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "PE_cpu_halt unimplemented @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "PE_cpu_halt",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s>turning off power to cluster %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "PE_cpu_power_disable",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "PE_cpu_power_disable",
            "prototype": "",
            "backtrace": [
                "processor_doshutdown"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s>turning on power to cluster %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "PE_cpu_power_enable",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "PE_cpu_power_enable",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IOCPUSleepKernel enter\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "IOCPUSleepKernel exit\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "__Z16IOCPUSleepKernelv",
            "prototype": "",
            "backtrace": [
                "__ZN16IOPlatformExpert11sleepKernelEv"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Can't initialize PassthruInterruptController @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "ml_processor_register failed: %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Error finding interrupts for CPU %d @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Error registering IPIs @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Error registering PMI @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZL15cpu_boot_threadPvi",
            "prototype": "",
            "backtrace": [
                "__Z15IOCPUInitializev",
                "iokit_post_constructor_init",
                "last_kernel_constructor"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "assertions",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "statistics",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "diagnostic_api",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "cpu-factor",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "target-is-fpga",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTGetPropertyInternal"
                }
            ],
            "symbol": "pe_init_debug",
            "prototype": "",
            "backtrace": [
                "PE_init_platform"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "random-seed",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTGetPropertyInternal"
                },
                {
                    "string": "no random seed @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "pe_gen.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "PE_get_random_seed",
            "prototype": "",
            "backtrace": [
                "early_random_init",
                "early_random"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "consistent-debug-root",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTGetPropertyInternal"
                }
            ],
            "symbol": "PE_consistent_debug_inherit",
            "prototype": "",
            "backtrace": [
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "timebase-frequency",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTGetPropertyInternal"
                },
                {
                    "string": "bus-frequency",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTGetPropertyInternal"
                },
                {
                    "string": "memory-frequency",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTGetPropertyInternal"
                },
                {
                    "string": "peripheral-frequency",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTGetPropertyInternal"
                },
                {
                    "string": "fixed-frequency",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTGetPropertyInternal"
                }
            ],
            "symbol": "pe_identify_machine",
            "prototype": "",
            "backtrace": [
                "PE_init_platform"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pe_arm_init_interrupts: args: %p\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "pe_arm_map_interrupt_controller: soc_phys:  0x%lx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "master",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "find_entry"
                },
                {
                    "string": "pe_arm_map_interrupt_controller: found interrupt-controller\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "pe_arm_map_interrupt_controller: gPicBase: 0x%lx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "pe_arm_map_interrupt_controller: failed to find the interrupt-controller.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "pe_arm_map_interrupt_controller: found timer\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "pe_arm_map_interrupt_controller: gTimerBase: 0x%lx\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                },
                {
                    "string": "pe_arm_map_interrupt_controller: failed to find the timer.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "kprintf"
                }
            ],
            "symbol": "pe_arm_init_interrupts",
            "prototype": "",
            "backtrace": [
                "PE_init_platform"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "iBoot version: %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "BootCLUT",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTGetPropertyInternal"
                },
                {
                    "string": "Pict-FailedBoot",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTGetPropertyInternal"
                },
                {
                    "string": "-noprogress",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "progress-dy",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_get_default"
                },
                {
                    "string": "/chosen/iBoot",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTLookupEntry"
                },
                {
                    "string": "start-time",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTGetPropertyInternal"
                },
                {
                    "string": "debug-wait-start",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTGetPropertyInternal"
                },
                {
                    "string": "load-kernel-start",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTGetPropertyInternal"
                },
                {
                    "string": "populate-registry-time",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTGetPropertyInternal"
                }
            ],
            "symbol": "PE_init_iokit",
            "prototype": "",
            "backtrace": [
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "BBBBBBBBGGGGGGGGRRRRRRRR",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strlcpy"
                },
                {
                    "string": "debug-enabled",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTGetPropertyInternal"
                },
                {
                    "string": "firmware-version",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTGetPropertyInternal"
                },
                {
                    "string": "dram-vendor-id",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTGetPropertyInternal"
                }
            ],
            "symbol": "PE_init_platform",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Error!! Current Magic 0x%X, expected value 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "PE_update_panic_crc",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "socd-trace-ram",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTLookupEntry"
                }
            ],
            "symbol": "PE_init_socd_client",
            "prototype": "",
            "backtrace": [
                "socd_client_init",
                "socd_client_reinit"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "unaligned acccess to socd trace ram @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "pe_init.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "socd_client_trace",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "embedded-panic-log-size",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTGetPropertyInternal"
                },
                {
                    "string": "iBoot didn't extract panic log from previous session crash, this is bad\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "PE_create_console",
            "prototype": "",
            "backtrace": [
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Platform Expert not initialized @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "pe_kprintf.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "PE_init_kprintf_config",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "disable-uart-irq",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "PE_parse_boot_argn_internal"
                },
                {
                    "string": "Unable to find the 'defaults' devicetree node. @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "serial-device",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTGetPropertyInternal"
                },
                {
                    "string": "Unable to find a devicetree node with phandle %x @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "The serial device devicetree node doesn't have a 'compatible' string @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Unable to find serial device driver for '%s' @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "uart-1,samsung",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strcmp"
                },
                {
                    "string": "Unable to find the 'reg' property on the Apple UART devicetree node @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Unable to find the 'reg' property on the Dock Channels devicetree node @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "max-aop-clk",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTGetPropertyInternal"
                },
                {
                    "string": "enable-sw-drain",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTGetPropertyInternal"
                },
                {
                    "string": "dock-wstat-mask",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "SecureDTGetPropertyInternal"
                }
            ],
            "symbol": "serial_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "On-demand serial mode selected.\nWaiting for user input to send logs.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "serial_set_on_demand",
            "prototype": "",
            "backtrace": [
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Unable to find a configuration for the UART that would result in a nominal baud rate close enough to %u @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "apple_uart_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pe_arm_init_debug: failed to initialize gSocPhys == 0\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                },
                {
                    "string": "cpu-debug-interface",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "find_entry"
                },
                {
                    "string": "pe_arm_init_debug: failed to find cpu-debug-interface\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": null
                }
            ],
            "symbol": "pe_arm_init_debug",
            "prototype": "",
            "backtrace": [
                "PE_init_platform"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "MAC Framework successfully initialized\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "mac_policy_initbsd",
            "prototype": "",
            "backtrace": [
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "AppleUserConsent Policy",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "_strcmp"
                },
                {
                    "string": "policy's name is not set @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "policy's full name is not set @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "policy's managed label namespaces exceeds maximum @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "policy's OPs field is NULL @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "Module %s does not support late loading.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "calling mpo_policy_init for %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "calling mpo_policy_initbsd for %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "Security policy loaded: %s (%s)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "mac_policy_register",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Security policy unload: %s (%s)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "mac_policy_unregister",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Free of NULL MAC label @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "mac_labelzone_free",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "label backref mismatch: labelp:%p label:%p l_owner:%p @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "mac_label_verify_panic",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "cannot set mac label to ~0 @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "panic_label_set_sentinel",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: MAC hook returned no error, but status is claimed to be fatal? path: '%s', fatal_failure_desc_len: %ld, fatal_failure_desc:\n%s\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "mac_proc_check_launch_constraints",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "mac_process.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "mac_proc_check_launch_constraints",
            "prototype": "",
            "backtrace": [
                "process_signature"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mac_vnode_check_signature: MAC hook returned no error, but status is claimed to be fatal? path: '%s', fatal_failure_desc_len: %ld, fatal_failure_desc:\n%s\n @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "mac_vfs.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "mac_vnode_check_signature: %s: code signature validation failed fatally: %s",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "mac_vnode_check_signature: %s: failure to allocate exit reason for validation failure: %s\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "mac_vnode_check_signature: %s: fatal failure is missing its description.\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "mac_vnode_check_signature: %s: failed to copy reason string (kcdata_memcpy error: %d, length: %ld)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "mac_vnode_check_signature: %s: failed to allocate space for reason string (os_reason_alloc_buffer error: %d, kcdata error: %d, length: %ld)\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "mac_vnode_check_signature",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "vn_setlabel: null v_mount\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "vn_setlabel: null v_mount with non-VNON\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "%s: mac_vnode_label_store failed %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "vn_setlabel",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                },
                {
                    "string": "vn_setlabel: vop setlabel failed %d\n",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "vn_setlabel",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "file_check_mmap increased max protections @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "mac_file.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "mac_file_check_mmap",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "mac_exc_action_check_exception_send: no exc_action label for process @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "mac_mach.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "mac_exc_action_check_exception_send: no exc_action label for process",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "printf"
                }
            ],
            "symbol": "mac_exc_action_check_exception_send",
            "prototype": "",
            "backtrace": [
                "exception_deliver"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "\"Unable to recycle a chunk\" @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                },
                {
                    "string": "firehose_buffer.c",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "firehose_buffer_tracepoint_reserve_slow.cold.1",
            "prototype": "",
            "backtrace": [
                "firehose_buffer_tracepoint_reserve_slow",
                "__firehose_buffer_tracepoint_reserve",
                "log_payload_send"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "\"TB_ASSERT: \" \"msg_buf->position >= msg_buf->reserved\" @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__tb_forwarding_connection_message_forward.cold.3",
            "prototype": "",
            "backtrace": [
                "__tb_forwarding_connection_message_forward"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "\"TB_ASSERT: \" \"end <= msg_buf->size\" @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__tb_forwarding_connection_message_forward.cold.2",
            "prototype": "",
            "backtrace": [
                "__tb_forwarding_connection_message_forward"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "\"TB_ASSERT: \" \"original_buffer->connection_owned\" @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "_tb_reply_splitter_add_reply.cold.1",
            "prototype": "",
            "backtrace": [
                "_tb_reply_splitter_add_reply",
                "___tb_service_connection_create_block_invoke",
                "_tb_service_connection_create",
                "_tb_service_connection_create_with_endpoint"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "\"TB_ASSERT: \" \"success\" @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__add_accumulator.cold.1",
            "prototype": "",
            "backtrace": [
                "__add_accumulator",
                "_tb_message_accumulator_accumulate"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "\"TB_FATAL: \" \"overflow detected when multiplying\" @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "_tb_message_accumulator_accumulate.cold.2",
            "prototype": "",
            "backtrace": [
                "_tb_message_accumulator_accumulate"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "\"TB_ASSERT: \" \"accumulator->total_size >= total\" @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "_tb_message_accumulator_accumulate.cold.7",
            "prototype": "",
            "backtrace": [
                "_tb_message_accumulator_accumulate"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "\"TB_ASSERT: \" \"!init_err\" @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "_tb_message_accumulator_accumulate.cold.9",
            "prototype": "",
            "backtrace": [
                "_tb_message_accumulator_accumulate"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "\"TB_ASSERT: \" \"tb_message_get_state(message) == TB_MESSAGE_STATE_RECEIVED\" @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "___tb_service_connection_create_block_invoke.cold.4",
            "prototype": "",
            "backtrace": [
                "___tb_service_connection_create_block_invoke",
                "_tb_service_connection_create",
                "_tb_service_connection_create_with_endpoint"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "\"TB_ASSERT: \" \"tb_message_get_disposition(message) == TB_MESSAGE_DISPOSITION_QUERY\" @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "___tb_service_connection_create_block_invoke.cold.3",
            "prototype": "",
            "backtrace": [
                "___tb_service_connection_create_block_invoke",
                "_tb_service_connection_create",
                "_tb_service_connection_create_with_endpoint"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "\"TB_ASSERT: \" \"buffer\" @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "___tb_service_connection_create_block_invoke.cold.1",
            "prototype": "",
            "backtrace": [
                "___tb_service_connection_create_block_invoke",
                "_tb_service_connection_create",
                "_tb_service_connection_create_with_endpoint"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "\"TB_ASSERT: \" \"buffer->payload != NULL\" @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "___tb_service_connection_create_block_invoke.cold.2",
            "prototype": "",
            "backtrace": [
                "___tb_service_connection_create_block_invoke",
                "_tb_service_connection_create",
                "_tb_service_connection_create_with_endpoint"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "\"TB_ASSERT: \" \"query->state == TB_MESSAGE_STATE_READY\" @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "_tb_connection_send_query.cold.4",
            "prototype": "",
            "backtrace": [
                "_tb_connection_send_query",
                "__tb_forwarding_connection_message_forward"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "\"TB_ASSERT: \" \"query->disposition == TB_MESSAGE_DISPOSITION_QUERY\" @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "_tb_connection_send_query.cold.3",
            "prototype": "",
            "backtrace": [
                "_tb_connection_send_query",
                "__tb_forwarding_connection_message_forward"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "\"TB_ASSERT: \" \"transport_buffer->connection_owned\" @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "_tb_connection_dealloc_destruct_owned_transport_message_buffer.cold.1",
            "prototype": "",
            "backtrace": [
                "_tb_connection_dealloc_destruct_owned_transport_message_buffer"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "\"TB_ASSERT: \" \"0 && \\\"invalid transport type for static initialisation\\\"\" @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__tb_connection_transport_for_endpoint_inplace.cold.1",
            "prototype": "",
            "backtrace": [
                "__tb_connection_transport_for_endpoint_inplace",
                "_tb_client_connection_create_with_endpoint_static"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "\"TB_ASSERT: \" \"transport_buffer->wrapping == false\" @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__tb_connection_message_construct.cold.1",
            "prototype": "",
            "backtrace": [
                "__tb_connection_message_construct"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "\"TB_ASSERT: \" \"tpt_buf->wrapping == false\" @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__tb_connection_message_destruct.cold.1",
            "prototype": "",
            "backtrace": [
                "__tb_connection_message_destruct"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "\"TB_ASSERT: \" \"self->state == TB_MESSAGE_STATE_UNINITIALIZED\" @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "_tb_message_construct.cold.1",
            "prototype": "",
            "backtrace": [
                "_tb_message_construct"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "\"TB_ASSERT: \" \"(disposition == TB_MESSAGE_DISPOSITION_REPLY || disposition == TB_MESSAGE_DISPOSITION_QUERY)\" @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "_tb_message_configure_recieved.cold.1",
            "prototype": "",
            "backtrace": [
                "_tb_message_configure_recieved"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "\"TB_FATAL: \" \"overflow detected when subtracting\" @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "_tb_message_measure_subrange.cold.1",
            "prototype": "",
            "backtrace": [
                "_tb_message_measure_subrange"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "\"TB_ASSERT: \" \"start <= msg->transport_buffer->size\" @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "_tb_message_subrange.cold.1",
            "prototype": "",
            "backtrace": [
                "_tb_message_subrange"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "\"TB_ASSERT: \" \"end <= msg->transport_buffer->size\" @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "_tb_message_subrange.cold.3",
            "prototype": "",
            "backtrace": [
                "_tb_message_subrange"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "\"TB_FATAL: \" \"tb_message_encode_f32_v2\" \": %d\" @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "_tb_message_encode_f32",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "\"TB_FATAL: \" \"tb_message_encode_f64_v2\" \": %d\" @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "_tb_message_encode_f64",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "\"TB_ASSERT: \" \"end <= tpt_buf->size\" @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "_tb_message_encode_buffer.cold.2",
            "prototype": "",
            "backtrace": [
                "_tb_message_encode_buffer"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "\"TB_FATAL: \" \"tb_message_decode_f32_v2\" \": %d\" @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "_tb_message_decode_f32",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "\"TB_FATAL: \" \"tb_message_decode_f64_v2\" \": %d\" @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "_tb_message_decode_f64",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "\"TB_ASSERT: \" \"kr == KERN_SUCCESS\" @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__tb_xnu_transport_destruct_message_buffer.cold.1",
            "prototype": "",
            "backtrace": [
                "__tb_xnu_transport_destruct_message_buffer",
                "_tb_xnu_transport_create",
                "__tb_connection_create_transport_for_endpoint"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "\"TB_ASSERT: \" \"blocks->connection_message_handler\" @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__tb_xnu_upcall_handler.cold.3",
            "prototype": "",
            "backtrace": [
                "__tb_xnu_upcall_handler",
                "__tb_xnu_service_transport_activate",
                "_tb_xnu_transport_create",
                "__tb_connection_create_transport_for_endpoint"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "\"TB_ASSERT: \" \"response->state == TB_MESSAGE_STATE_READY\" @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "___tb_afk_transport_create_block_invoke.cold.3",
            "prototype": "",
            "backtrace": [
                "___tb_afk_transport_create_block_invoke",
                "_tb_afk_transport_create",
                "__tb_connection_create_transport_for_endpoint"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "\"TB_ASSERT: \" \"response\" @%s:%d",
                    "segment": "__TEXT",
                    "section": "__cstring",
                    "caller": "panic"
                }
            ],
            "symbol": "__ZL30_tb_afk_transport_send_messageP14tb_transport_sP12tb_message_sPS2_21tb_connection_flags_t.cold.1",
            "prototype": "",
            "backtrace": [
                "__ZL30_tb_afk_transport_send_messageP14tb_transport_sP12tb_message_sPS2_21tb_connection_flags_t",
                "_tb_afk_transport_create",
                "__tb_connection_create_transport_for_endpoint"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "stackshot: initial allocation failed: %d, allocating %u bytes of %u max, try %llu\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "stackshot: final buffer size was insufficient at maximum size\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "stackshot: debugger call failed: %d, try %llu, buffer %u estimate %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "stackshot: initial buffer size was insufficient at maximum size\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "stackshot: succeeded, traced %u bytes to %u buffer (estimate %u) try %llu\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "kern_stack_snapshot_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "stackshot: final allocation failed: %d, allocating %u bytes of %u max, try %llu\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "stackshot_collect_kcdata",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Coalition [%lld] caught causing excessive I/O (flavor: %d). Task I/O: %lld MB. [Limit : %lld MB per %lld secs]. Triggered by process [%d]\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ERROR %#x returned from send_resource_violation(disk_writes, ...)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "SENDING_NOTIFICATION__THIS_COALITION_IS_CAUSING_TOO_MUCH_IO",
            "prototype": "",
            "backtrace": [
                "coalition_io_rate_exceeded",
                "init_coalition_ledgers",
                "coalitions_init",
                "kernel_bootstrap",
                "machine_startup",
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Failed to get memory error port - mcc",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mcc_memory_error_event_queue_invoke",
            "prototype": "",
            "backtrace": [
                "mcc_logging_init",
                "panic_with_options_and_initiator",
                "panic_with_options"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s[%d] task_info: possibly invalid task_info_count %d > TASK_VM_INFO_COUNT=%d on platform %d sdk %d.%d.%d - please use TASK_VM_INFO_COUNT",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "task_info",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "process %s[%d] caught allocating too many mach ports. \t    Num of ports allocated %u; \n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "SENDING_NOTIFICATION__THIS_PROCESS_HAS_TOO_MANY_MACH_PORTS",
            "prototype": "",
            "backtrace": [
                "task_port_space_ast",
                "ast_taken_user",
                "user_take_ast"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Memory pressure corpse purge for pid %d.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "task_pid"
                }
            ],
            "symbol": "task_purge_all_corpses",
            "prototype": "",
            "backtrace": [
                "memstat_approaching_fg_band"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "corpse for pid %d disabled via SPI\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "task_generate_corpse_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s[%d] Corpse failure, too many faults %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s[%d] Corpse failure, too many %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s[%d] Corpse allowed %d of %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "task_crashinfo_get_ref",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Failed to allocate event for VM API telemetry.",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "vm_sanitize_send_telemetry",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vm_reclaim: failed to initialize vmdr buffer - reclaim is disabled (%llu)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "vm_reclaim: failed to allocate VA for reclaim buffer (%d) - %s [%d]\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "vm_reclaim: indices were not zero-initialized\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "vm_reclaim: failed to initialize buffer on dying task %s [%d]",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "vm_reclaim: tried to overwrite existing reclaim buffer for %s [%d]",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "vm_deferred_reclamation_buffer_init_internal",
            "prototype": "",
            "backtrace": [
                "_Xmach_vm_deferred_reclamation_buffer_init"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vm_reclaim: enquequeing %d for asynchronous reclamation.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "vm_deferred_reclamation_reclaim_from_task_async",
            "prototype": "",
            "backtrace": [
                "memorystatus_on_suspend",
                "pid_suspend"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vm_reclaim: Unable to copy head ptr from 0x%llx: err=%d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "reclaim_copyin_head",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vm_reclaim: Unable to copy tail ptr from 0x%llx: err=%d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "reclaim_copyin_tail",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vm_reclaim: Unable to copy busy ptr from 0x%llx: err=%d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "reclaim_copyin_busy",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "vm_reclaim: Userspace modified head or busy pointer! head: %llu (0x%llx) != busy: %llu (0x%llx) | tail = %llu (0x%llx)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "vm_reclaim: Unable to copyin %llu entries in reclaim buffer at 0x%llx to 0x%llx: err=%d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "vm_reclaim: Unable to deallocate 0x%llx (%u) from 0x%llx err=%d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "vm_reclaim: unable to free(reusable) 0x%llx (%u) for pid %d err=%d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "vm_reclaim: attempted to reclaim entry with unsupported behavior %uh",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "reclaim_chunk",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "vm_reclaim: Unable to copy %llu to busy ptr at 0x%llx: err=%d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "reclaim_copyout_busy",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "vm_reclaim: Unable to copy %llu to head ptr at 0x%llx: err=%d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "reclaim_copyout_head",
            "prototype": "",
            "backtrace": [
                "reclaim_chunk"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "NSPACE SNAPSHOT not handled",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "NSPACE TRACK not handled",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "NSPACE no port",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "NSPACE resolve_path call",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "NSPACE resolve failure: %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "NSPACE process %s (pid %d) is decorated as no-materialization (op %lld; %s)",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "vfs_materialize_item",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "NSPACE send_nspace_resolve_cancel failure: %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "nspace_resolver_req_wait",
            "prototype": "",
            "backtrace": [
                "vfs_materialize_item"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "bpfopen: bpf%d kalloc_type bpf_d failed",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "bpf%u opened by %s.%u",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bpfopen",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "bpfattach - %s with dlt %d is already attached",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bpf_attach",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "bpfwrite: len %d if %s less than copy_len %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "bpfwrite: bad len %d if %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "bpfwrite: len %u - hlen %u too big if %s write_size_max %u",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "bpfwrite: len %u - hlen %u too big if %s mtu %u",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "bpfwrite mbuf_allocpacket len %d error %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "bpfwrite uiomove hlen %d error %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "bpfwrite bpf_copy_uio_to_mbuf_packet error %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "bpf_copy_uio_to_mbuf_packet: len %d error %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bpf_movein",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: uuids not found error %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: processes not matching error %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: d_to is closing error %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: d_from is closing error %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: bufsizes not matching error %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: bpf_setif() failed error %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bpf_setup",
            "prototype": "",
            "backtrace": [
                "bpfioctl"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: ifnet_allocate failed %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: bridge_ifnet_set_attrs failed %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: ifnet_attach failed %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: ifnet_set_lladdr_and_type failed %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: failed error %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: ifnet_set_mtu failed %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s sdl len %d index %d family %d type 0x%x nlen %d alen %d slen %d addr %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bridge_clone_create",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: ARP %s short frame %lu < %lu",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: ARP %s size %lu mbuf_pullup fail",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: ARP %s htype not ethernet",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: ARP %s hlen not ethernet",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: ARP %s ptype not IP",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: ARP %s plen not IP",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "is_valid_arp_packet",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: mbuf_copydata udphdr failed %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: mbuf_copydata dp_flags failed %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s %s DHCP dp_flags 0x%x UDP cksum 0x%x",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: short IPv6 payload length %d < %lu",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: failed to pullup icmp6 header",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: failed to pullup icmp6 + payload",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: short nd_ns %d < %lu",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: invalid ND6 NS option",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: bad ND6 DAD packet",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: short nd_na %d < %lu",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: invalid ND6 NA option",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: target lladdrlen %d != %lu",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: short ND6 %s %d < %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: invalid ND6 %s option",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s %s %s ip6len %d icmp6len %d lladdr offset %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bridge_mac_nat_output",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: bridge_get_ip_proto failed %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: IP checksum HW %svalid",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: IP checksum SW %svalid",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: IPv%c %s checksum HW 0x%x %svalid",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: IPv%c %s checksum SW %svalid (0x%x) hlen %d paylen %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bridge_verify_checksum",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: non-TCP (%d) IPv%c frame %d bytes",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: fragmented TSO packet?",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: m_pullup %d failed",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bridge_get_tcp_header",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: ifp %s cmd 0x%08lx (%c%c [%lu] %c %lu)",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: ifp %s has address",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s SIOCSIFLLADDR error %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s invalid MTU: %u(%s) != %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bridge_ioctl",
            "prototype": "",
            "backtrace": [
                "bridge_clone_create"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: ifnet_get_address_list(%s) failed %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: ifaddr_address_family unknown %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bridge_mac_nat_enable",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s0x%llx type: %u flags: 0x%x len: %u data: 0x%llx maxlen: %u datastart: 0x%llx next: 0x%llx%s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s<NULL>%s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%spktlen: %u rcvif: 0x%llx header: 0x%llx nextpkt: 0x%llx%s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "brlog_mbuf",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%02x%s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "brlog_mbuf_data",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: IPv4 checksum 0x%x",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: bad tcp header length %u",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: IPv%c %s set checksum 0x%x",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bridge_offload_checksum",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: %s.%dbrhf_arp_too_small",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s.%dbrhf_arp_pullup_failed",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s.%dbrhf_arp_bad_hw_type",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s.%dbrhf_arp_bad_pro_type",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s.%dbrhf_arp_bad_hw_len",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s.%dbrhf_arp_bad_pro_len",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s.%dbrhf_arp_bad_op",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s.%dbrhf_arp_bad_sha",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s.%dbrhf_arp_bad_spa",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bridge_host_filter_arp",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "%s: %s.%dbrhf_dhcp_too_small",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s.%dbrhf_dhcp_bad_op",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s.%dbrhf_dhcp_bad_htype",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s.%dbrhf_dhcp_bad_hlen",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s.%dbrhf_dhcp_bad_chaddr",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s.%dbrhf_dhcp_bad_ciaddr",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bridge_dhcp_filter",
            "prototype": "",
            "backtrace": [
                "bridge_iff_input",
                "bridge_ioctl_add"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "%s: zalloc_nolock failed",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: added %02x:%02x:%02x:%02x:%02x:%02x on %s count %u hashsize %u",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bridge_rtupdate",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: %s new size %u",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s failed %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bridge_rthash_delayed_resize",
            "prototype": "",
            "backtrace": [
                "bridge_rtupdate"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "%s: large non IPv4/IPv6 packet",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bridge_interface_input",
            "prototype": "",
            "backtrace": [
                "bridge_iff_input",
                "bridge_ioctl_add"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: %s doesn't support LRO",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s %s failed (cap 0x%x) %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s %s success (cap 0x%x)",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bridge_set_lro",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: ifnet_set_offload(%s, 0x%x) failed %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: ifnet_set_tso_mtu(%s, AF_INET, %u) failed %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: ifnet_set_tso_mtu(%s, AF_INET6, %u) failed %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bridge_set_tso",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "%s: %s MAC-NAT input translate to %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s MAC-NAT input for %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bridge_mac_nat_input_list",
            "prototype": "",
            "backtrace": [
                "bridge_input_list"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "%s: %s (%s) append gso #segs %u bytes %u",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s (%s) append %d bytes op %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s (%s) bridge_transmit packets %u bytes %u error %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bridge_enqueue_multi",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: %s is not attached",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "if_updown",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "interface %s management set %s by %s:%d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ifnet_set_management",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "null_proto_input unexpected packet on %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "null_proto_input",
            "prototype": "",
            "backtrace": [
                "ifioctl_ifreq",
                "ifioctl"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "eventhandler_invoke(\"ifnet_event\")",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "intf_event_callback",
            "prototype": "",
            "backtrace": [
                "intf_event_enqueue_nwk_wq_entry"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kern_nexus_interface_remove_netagent(%s) returned %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ifnet_remove_netagent",
            "prototype": "",
            "backtrace": [
                "bridge_ioctl_add"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s:%d %s Failed for ioctl %lu as interface is not attached",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d %s unknown ioctl %lu",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ifnet_ioctl_async",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: interface %s (%u) available\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: interface %s (%u) unavailable)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "if_state_update",
            "prototype": "",
            "backtrace": [
                "ifioctl_ifreq",
                "ifioctl"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%3lu: %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": null
                }
            ],
            "symbol": "log_hexdump",
            "prototype": "",
            "backtrace": [
                "dlil_input_packet_list_common"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d %s ifnet_ioctl returned %d for ioctl %lu",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d %s ifnet_ioctl returned successfully for ioctl %lu",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ifnet_ioctl_event_callback",
            "prototype": "",
            "backtrace": [
                "ifnet_ioctl_async"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: dropping short VLAN packet %d < %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: dropping VLAN non-contiguous header %p, %p",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: dropping VLAN short header %p %p",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: mbuf_copydata VLAN encap failed",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: mbuf_copyback VLAN stripped header failed",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ether_demux",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: proto_register_plumber failed for AF_INET error=%d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: proto_register_plumber failed for AF_INET6 error=%d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: proto_register_plumber failed vlan_clone_attach error=%d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "vlan_family_init",
            "prototype": "",
            "backtrace": [
                "ether_family_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "%s: %s: unable to prepend VLAN header",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: m_pullup VLAN header failed",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: needed to m_pullup VLAN header",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: %s tag %d bytes %d (%s)",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "vlan_output",
            "prototype": "",
            "backtrace": [
                "vlan_clone_create"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: %s: propagated link event to vlans",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "vlan_parent_signal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: %s: ifnet_set_promiscuous(%s, %d) failed %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: ifnet_set_promiscuous(%s, %d) succeeded",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "vlan_set_promisc",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: last vlan on %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "vlan_unconfig",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "%s: m_copyup failed",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: frame 0x%llx data 0x%llx len %ld",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "feth_output_common",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: ifnet_set_offload(%s, 0x%x) failed, %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: ifnet_set_offload(%s, 0x%x) succeeded",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "feth_ifnet_set_attrs",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: set TSO MTU IPv4 failed on %s, err %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: set TSO MTU IPv6 failed on %s, err %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "feth_set_tso_mtu",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: %s: ifnet_stat() failed %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: interface advisory report failed %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "feth_if_adv",
            "prototype": "",
            "backtrace": [
                "feth_nx_connected"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: %s ring %d flags 0x%x",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s peer fakeif %s is detaching",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s peer fakeif %s channel not connected, expn: %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s no peer fakeif (peer %p)",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s no peer",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "feth_nx_sync_tx",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: %s err=%d getting packetid",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s err=%d getting nx_port_id",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "feth_get_packet_notification_details",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: not enough room",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "feth_add_packet_trailer",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: %s: TX refill failed %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: TX refilled",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: threadcall waking up waiter",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "feth_async_doorbell",
            "prototype": "",
            "backtrace": [
                "feth_nx_tx_doorbell"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: %s: invalid qset_idx %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "feth_nx_qset_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: %s: invalid tx qidx %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: invalid rx qidx %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "feth_nx_queue_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: invalid llink_idx idx %d (max %d) on peer %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: invalid qset_idx %d (max %d) on peer %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: NULL default queue (llink_idx %d, qset_idx %d) on peer %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "feth_rx_queue_submit",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: free_provider_instance failed %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: deregister_provider %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "feth_detach_netif_nexus",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: if_redirect_request_copyin failed: error %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: NULL delegate name\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: delegate %s not found\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s's family %d not compatible with ethernet functional type\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: low latency %s cannot be a delegate\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s's family %d not compatible with cellular functional type\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: delegate %s cannot be redirect\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: user_addr(0x%llx) or len(%llu) < %lu\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: copyin failed: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: reserved[0]=0x%llu, reserved[1]=0x%llureserved[2]=0x%llu, reserved[3]=0x%llu\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: cannot configure the same delegate\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: failed to get self reference\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: failed to get delegate reference\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: failed to set delegate ifp: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: failed to get mac addr from %s, error %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: delegate %s detached during setup\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "redirect_ioctl",
            "prototype": "",
            "backtrace": [
                "redirect_clone_create"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: %s: classifier info missing\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: l4len(%u) < icmp6len(%lu)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "redirect_rx_cb",
            "prototype": "",
            "backtrace": [
                "redirect_ioctl",
                "redirect_clone_create"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: %s ring %d flags 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s is not usable\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s has no delegate\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: delegate interface is being detached\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: nexus adapter is not present\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: enqueue failed: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "redirect_nx_sync_tx",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: %s: Tx refill (sync) %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: Tx refilled (sync)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: schedule async refill\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "redirect_nx_tx_doorbell",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: %s: Tx refill failed %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: Tx refilled\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s: threadcall waking up waiter\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "redirect_async_doorbell",
            "prototype": "",
            "backtrace": [
                "redirect_nx_tx_doorbell"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: cannot %s advisory on %s because it is not usable\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: advisory is already %s on %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: delegate is not set on %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "redirect_nx_intf_adv_config",
            "prototype": "",
            "backtrace": [
                "redirect_nx_capab_config",
                "redirect_clone_create"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: free_provider_instance failed %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: deregister_provider failed %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "redirect_clone_destroy",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: proto_register_plumber failed for AF_INET error %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: proto_register_plumber failed for AF_INET6 error %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: bond_clone_attach error %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bond_family_init",
            "prototype": "",
            "backtrace": [
                "ether_family_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: interface %s doesn't support mtu %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: (%s, %s) hwassist values don't match 0x%x != 0x%x, using 0x%x instead",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: (%s, %s): multicast_list_program failed %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: (%s, %s): SIOCSIFFLAGS failed %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: (%s, %s): if_siflladdr restore failed %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: (%s, %s): promiscous mode disable failed %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: name too large",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: SIOCGIFDEVMTU %s failed, %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bond_add_interface",
            "prototype": "",
            "backtrace": [
                "bond_ioctl",
                "bond_clone_create"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: [%s] Receive PORT_DISABLED",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: [%s] Receive PORT_DISABLED: link timer started",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: [%s] Receive PORT_DISABLED: link timer completed, marking UNSELECTED",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bondport_receive_machine_port_disabled",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: [%s] Mux WAITING",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: [%s] Mux WAITING: Standby",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: [%s] Mux WAITING: Port is already ready",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: [%s] Mux WAITING: Timer already set",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: [%s] Mux WAITING: No waiting",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: [%s] Mux WAITING: 2 seconds",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: [%s] Mux WAITING: Ready",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: [%s] Mux WAITING: All Ports Ready",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bondport_mux_machine_waiting",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: [%s] periodic_transmit Start",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: [%s] periodic_transmit: Need To Transmit",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bondport_periodic_transmit_machine",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: (%s, %s): if_siflladdr (%s) failed %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "bond_remove_interface",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: %s failed, invalid dst sa_len %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s failed, mask sa_len %d too large\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: removing route to %s->%s->%s, flags 0x%x, ifaddr %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: removed route to %s->%s->%s, flags 0x%x, ifaddr %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: added route to %s->%s->%s, flags 0x%x, ifaddr %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "rtinit_locked",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s - for interface index %u with flags %x",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - for matching interface with flags %x",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - *matched non-Skywalk* [filter match: %d]",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - nstat get ifflags %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - nstat get progressdigest returned %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - *matched Skywalk* [filter match: %x %x]",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "progress_indicators",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "%s - NSTAT_DEBUG_SOCKET <pid %d>: NSTAT: Collecting stats",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - NSTAT_DEBUG_SOCKET <pid %d>: NSTAT: <pid %d> Collected stats - domain <%s> owner <%s> ctxt <%s> bundle id <%s> is_tracker %d is_non_app_initiated %d is_silent %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "nstat_inp_domain_info",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "%s - nstat_client_send_event() %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - nstat_client_send_event() used when updates not supported",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "nstat_client_send_event",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "%s - nstat_client_send_update() %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - nstat_client_send_counts() %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "nstat_client_send_goodbye",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s - mbuf_allocpacket failed",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - resorting to ctl_enqueuedata",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "nstat_accumulate_msg",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s - src->nts_provider->nstat_copy_descriptor: %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - src->nts_provider->nstat_counts: %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "nstat_client_append_update",
            "prototype": "",
            "backtrace": [
                "nstat_client_send",
                "nstat_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s - nstat_userland_tu_copy_descriptor  returned %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - nstat_userland_tu_counts  returned %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "nstat_userland_get_snapshot",
            "prototype": "",
            "backtrace": [
                "get_pcblist_n"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: unexpected protocol %u for inp %p",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "if_ports_used_add_inpcb",
            "prototype": "",
            "backtrace": [
                "inpcb_get_if_ports_used"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: unexpected protocol %u for nfi %p",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "if_ports_used_add_flow_entry",
            "prototype": "",
            "backtrace": [
                "__netns_get_if_local_ports_block_invoke",
                "netns_get_if_local_ports"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "%s: called PKT_F_WAKE_PKT not set from %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: unexpected protocol family %u from %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: unexpected wake fragment from %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: pkt with unassigned TCP header from %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: pkt with unassigned UDP header from %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: unexpected IP protocol %u from %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "if_ports_used_match_pkt",
            "prototype": "",
            "backtrace": [
                "fsw_receive"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "sysctl_wake_pkt_event_notify proc %s:%u val %u last_wake_phy_if_delay_wake_pkt %d last_wake_phy_if_family %u",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "sysctl_wake_pkt_event_notify",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "sysctl_wake_pkt_event_delay_if_families proc %s:%u npi_wake_packet_event_delay_if_families 0x%x -> 0x%x",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "sysctl_wake_pkt_event_delay_if_families",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: wakeuuid not set not adding port: %u flags: 0x%xif: %u pid: %u epid %u",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: zalloc() failed for port: %u flags: 0x%x if: %u pid: %u epid %u",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: num %u for port: %u flags: 0x%x if: %u pid: %u epid %u",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: already added port: %u flags: 0x%x if: %u pid: %u epid %u",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "net_port_info_add_entry",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s net_port_info if_index %u arch %s family %s proto %s local %s:%u foreign %s:%u pid: %u epid %u",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "net_port_info_log_npi",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "utun_output - ctl_enqueuembuf failed: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "utun_output",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "utun_framer - ifnet_output prepend failed\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Received app uuid error %d for %s%d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Cannot set proc uuid for %s%d, size %d < %zu\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "utun_framer",
            "prototype": "",
            "backtrace": [
                "utun_ctl_connect",
                "utun_register_control",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s, tx refill failed %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "utun_netif_tx_doorbell: ifnet_disable_output returned error %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "utun_netif_tx_doorbell",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "utun_cleanup_family - invalid protocol family %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "utun_cleanup_family - failed to create %s socket: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "utun_remove_address - ifaddr_address failed: %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "utun_remove_address - SIOCDIFADDR failed: %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "utun_remove_address - ifaddr_address failed (v6): %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "utun_remove_address - SIOCDIFADDR_IN6 failed: %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "utun_cleanup_family",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "utun_ctl_rcvd: ctl_getenqueuepacketcount returned error %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "utun_ctl_rcvd: ifnet_enable_output returned error %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "utun_ctl_rcvd",
            "prototype": "",
            "backtrace": [
                "utun_register_control",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "utun_attach_inet - ifnet_attach_protocol %d failed: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "utun_attach_proto",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "ipsec_output: first mbuf length shorter than IP header length: %d.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec_output: Bad ip header length %d.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec_output: ipsec4_output error %d.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec_output: first mbuf length shorter than IPv6 header length: %d.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec_output: ipsec6_splithdr returned NULL\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec_output: ipsec6_output error %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec_output: Received unknown packet version %d.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ipsec_output",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ipsec_cleanup_family - invalid protocol family %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec_cleanup_family - failed to create %s socket: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec_remove_address - ifaddr_address failed: %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec_remove_address - SIOCDIFADDR failed: %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec_remove_address - ifaddr_address failed (v6): %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec_remove_address - SIOCDIFADDR_IN6 failed: %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ipsec_cleanup_family",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ipsec_attach_inet - ifnet_attach_protocol %d failed: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ipsec_attach_proto",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: necp_session_action find fd error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_session_action unknown action (%u)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_session_action",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: DATA-TRACE: IP Output: RESULT - MATCHED (ID %d BoundInterface %d LastInterface %d Proto %d) Policy %d Result %d Parameter %d Route Rule %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: DATA-TRACE: IP Output: RESULT - NO MATCH (ID %d BoundInterface %d LastInterface %d Proto %d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_ip_output_find_policy_match",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: DATA-TRACE: IP6 Output: RESULT - MATCHED (ID %d BoundInterface %d LastInterface %d Proto %d) Policy %d Result %d Parameter %d Route Rule %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: DATA-TRACE: IP6 Output: RESULT - NO MATCH (ID %d BoundInterface %d LastInterface %d Proto %d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_ip6_output_find_policy_match",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: necp_session_get_policy invalid input (%zu)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_session_get_policy policy_id copyin error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Failed to find policy with id %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_session_get_policy buffer not large enough (%zu < %u)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_session_get_policy size too large to copy (%u)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_session_get_policy TLV copyout error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_session_get_policy",
            "prototype": "",
            "backtrace": [
                "necp_session_action"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: necp_session_delete_policy invalid input (%zu)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_session_delete_policy policy_id copyin error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_session_delete_policy failed to find policy with id %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_session_delete_policy",
            "prototype": "",
            "backtrace": [
                "necp_session_action"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: necp_session_list_all size too large to copy (%u policies)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_session_list_all buffer not large enough (%zu < %u)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_session_list_all TLV copyout error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_session_list_all",
            "prototype": "",
            "backtrace": [
                "necp_session_action"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: necp_session_set_session_priority invalid input (%zu)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_session_set_session_priority priority copyin error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Session does not hold necessary entitlement to claim priority level %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_session_set_session_priority",
            "prototype": "",
            "backtrace": [
                "necp_session_action"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: necp_session_register_service invalid input (%zu)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_session_register_service uuid copyin error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_session_register_service",
            "prototype": "",
            "backtrace": [
                "necp_session_action"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: necp_session_unregister_service invalid input (%zu)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_session_unregister_service uuid copyin error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_session_unregister_service",
            "prototype": "",
            "backtrace": [
                "necp_session_action"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: necp_session_add_domain_filter invalid input (%zu)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_session_add_domain_filter buffer not large enough (%zu)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_session_add_domain_filter allocate filter error (%zu)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_session_add_domain_filter filter copyin error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_session_add_domain_filter size mismatch (%zu != %zu)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_session_add_domain_filter ID copyout error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_session_add_domain_filter",
            "prototype": "",
            "backtrace": [
                "necp_session_action"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: necp_session_remove_domain_filter invalid input (%zu)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_session_remove_domain_filter uuid copyin error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_session_remove_domain_filter",
            "prototype": "",
            "backtrace": [
                "necp_session_action"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s (process %s:%u) %s no match",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_address_matches_drop_dest_policy",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: QoS Marking : Interface match %d for Rule %d Allowed %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: QoS Marking: C:%d WF:%d W:%d E:%d Cn:%d Cmpn:%d VPN:%d for Rule %d Allowed %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: QoS Marking: Rule %d ifp %s Allowed %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_update_qos_marking",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "necp_route_is_interface_type_allowed %s:%d %s not allowed on management interface %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_log_interface_not_allowed",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: Route Allowed: No interface for route, using default for Rule %d Allowed %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Route Allowed: Interface match %d for Rule %d Deny LQM Abort\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Route Allowed: Interface match %d for Rule %d Allowed %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Route Allowed: C:%d WF:%d W:%d E:%d Cmpn:%d VPN:%d for Rule %d Allowed %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Route Allowed: Using default for Rule %d Allowed %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_route_is_allowed_inner",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: %s (process %s:%u) not permitted\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s (process %s:%u) bad newlen %lu\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s (process %s:%u) sysctl_io_opaque() error %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s (process %s:%u) bad entry_count %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s (process %s:%u) NECP_SESSION_PRIORITY_UNKNOWN bad entry_count %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s (process %s:%u) bad level %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s (process %s:%u) AF_INET bad prefix %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s (process %s:%u) AF_INET bad sin_len %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s (process %s:%u) AF_INET bad sin_port %u, not zero\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s (process %s:%u) AF_INET6 bad prefix %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s (process %s:%u) AF_INET6 bad sin6_len %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s (process %s:%u) AF_INET6 bad sin6_port %u, not zero\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s (process %s:%u) AF_INET6 bad sin6_flowinfo %u, not zero\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s (process %s:%u) AF_INET6 bad sin6_scope_id %u, not zero\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "sysctl_handle_necp_drop_dest_level",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: necp_client_action find fd error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_action unknown action (%u)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_client_action",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: NECP_SOCKET_PARAMS_LOG <pid %d>: NECP ATTRIBUTES SOCKET - domain <%s> owner <%s> context <%s> tracker domain <%s> account <%s> <so flags - is_tracker %X non-app-initiated %X app-approved-domain %X\n\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Set on socket: Domain <%s> Domain owner <%s> Domain context <%s> Tracker domain <%s> Account <%s> \n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_set_socket_domain_attributes",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: NECP CLIENT FLOW TRACE <pid %d %s> <flow %s>: Collecting stats\n\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: NECP CLIENT FLOW TRACE <pid %d %s> <flow %s>: Collected stats - domain <%s> owner <%s> ctxt <%s> bundle id <%s> is_tracker %d is_non_app_initiated %d is_silent %d\n\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_find_domain_info_common",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: Incorrect length (got %zu, expected %zu)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_copy client_id copyin error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_copy request flow divert TLV copyout error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_client_copy",
            "prototype": "",
            "backtrace": [
                "necp_client_action"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: necp_client_copy parameters copyout error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_copy result copyout error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_copy group members copyout error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_client_copy_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: necp_client_copy assigned results tlv_header copyout error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_copy assigned results copyout error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_copy protocol control event results tlv_header copyout error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_client_fillout_flow_tlvs",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: req tcp stats, failed to get route details for pid %d curproc %d %s\n\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: req tcp stats, necp_client flow_registration flow_stats missing for pid %d %s curproc %d %s\n\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Collected stats - TCP - epid %d uid %d euuid %s persona id %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_request_tcp_netstats",
            "prototype": "",
            "backtrace": [
                "necp_stats_initialize"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: req udp stats, failed to get route details for pid %d curproc %d %s\n\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: req udp stats, necp_client flow_registration flow_stats missing for pid %d %s curproc %d %s\n\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Collected stats - UDP - epid %d uid %d euuid %s persona id %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_request_udp_netstats",
            "prototype": "",
            "backtrace": [
                "necp_stats_initialize"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: req quic stats, failed to get route details for pid %d curproc %d %s\n\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: req quic stats, necp_client flow_registration flow_stats missing for pid %d %s curproc %d %s\n\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Collected stats - QUIC - epid %d uid %d euuid %s persona id %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_request_quic_netstats",
            "prototype": "",
            "backtrace": [
                "necp_stats_initialize"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: Copyin client_id error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Parameters copyin error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Parameters copyout error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_client_agent_use",
            "prototype": "",
            "backtrace": [
                "necp_client_action"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: necp_client_update_cache copyin client_id error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_update_cache no flow error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_update_cache copyin cache buffer error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_update_cache copyin ecn cache buffer error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: necp_client_update_cache copyin tfo cache buffer error (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "necp_client_update_cache",
            "prototype": "",
            "backtrace": [
                "necp_client_action"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: mbuf_tag_id_find_internal failed: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: ctl_register failed: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "netagent_init",
            "prototype": "",
            "backtrace": [
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "%s: Register message size could not be read, error %d data_size %zu\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Failed to register agent: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "netagent_handle_register_message",
            "prototype": "",
            "backtrace": [
                "netagent_ctl_send",
                "netagent_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 3,
            "anchors": [
                {
                    "string": "%s: Update message size could not be read, error %d data_size %zu\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "netagent_handle_update_message",
            "prototype": "",
            "backtrace": [
                "netagent_ctl_send",
                "netagent_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: Failed to read uuid for assign message: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Failed to read assign message: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "netagent_handle_assign_nexus_message",
            "prototype": "",
            "backtrace": [
                "netagent_ctl_send",
                "netagent_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "eventhandler_invoke(\"in6_clat46_event\")",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "in6_clat46_event_callback",
            "prototype": "",
            "backtrace": [
                "in6_clat46_event_enqueue_nwk_wq_entry"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d unit %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "pktap_clone_create",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s:%d %s: kauth_authorize_generic(KAUTH_GENERIC_ISSUSER) - error %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "pktap_ioctl",
            "prototype": "",
            "backtrace": [
                "pktap_clone_create"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d pass %s match type %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d pass %s match name %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d skip %s match type %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d skip %s match name %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d %s no match\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "pktap_filter_evaluate",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "%s:%d mbuf_copydata tcp v4 failed for %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d mbuf_copydata udp v4 failed for %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d in_pcblookup_hash no pcb %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d unknown ip_p %u on %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d mbuf_copydata tcp v6 failed for %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d mbuf_copydata udp v6 failed for %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d in6_pcblookup_hash no pcb %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d unknown ip6.ip6_nxt %u on %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "pktap_fill_proc_info",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "%s:%d unsupported protocol %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d %s: header %d > %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "pktap_bpf_tap_packet",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: ignore v1 query on IGIF_LOOPBACK ifp %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: process v1 query on ifp %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "igmp_input_v1_query",
            "prototype": "",
            "backtrace": [
                "igmp_input"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "in_pcb_check_management_entitled %s:%d not management entitled %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "in_pcb_check_management_entitled",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: unable to insert route to %s;%s, flags=0x%x, due to existing ARP route %s->%s flags=0x%x, attempting to delete\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "in_addroute",
            "prototype": "",
            "backtrace": [
                "in_inithead"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: Resetting TFO-data loss to 0 from %u on heur %lx\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Resetting TFO-req loss to 0 from %u on heur %lx\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Resetting TFO-data RST to 0 from %u on heur %lx\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Resetting TFO-req RST to 0 from %u on heur %lx\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Resetting ECN-loss to 0 from %u and synrst from %u on heur %lx\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s disabling heuristics for 12 hours",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "tcp_heuristic_reset_counters",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s disable ECN until %u now %u on %lx for SYN-loss\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s disable MPTCP until %u now %u on %lx\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s disable ECN until %u now %u on %lx for drop-RST\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s disable ECN until %u now %u on %lx for drop-Rxmit\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s disable ECN until %u now %u on %lx for SYN-RST\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "tcp_heuristic_inc_counters",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "already processed AccECN field/options for this ACK",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "tcp_process_accecn",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: sysctl_io_string() error %d, req->newlen %lu, sizeof(keystring) %lu",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: strlen(keystring) %lu != TCP_FASTOPEN_KEYLEN * 2 %u, newlen %lu",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: sscanf() != 1, error EINVAL",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "tcp_sysctl_fastopenkey",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: %u > %u TSO 0 tunnel_ifp %s hwassist mismatch with ifp %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %u > %u TSO 0 tunnel_ifp %s hwassist mismatch with inp_last_outifp %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %u > %u TSO 0 tunnel_ifp %s hwassist mismatch with inp_boundifp %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %u > %u TSO %d ifp %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "tcp_set_tso",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 5,
            "anchors": [
                {
                    "string": "Segment start (%u) is not same as retransmitted start sequence number (%u)",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "tcp_seg_sent_insert",
            "prototype": "",
            "backtrace": [
                "tcp_output"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "bytes_retransmitted (%u) can't be smaller than retransmited segment length (%u)",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "tcp_mark_seg_lost",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "RB tree still contains segments while time ordered list is already empty",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "Segment ACKed list shouldn't contain any segments as they are removed immediately after being ACKed",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "tcp_segs_sent_clean",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "pacer rate shouldn't be 0, CCA is %s (cwnd=%u, smoothed rtt=%u ms)",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "tcp_pacer_get_packet_tx_time",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "bytes_retransmitted (%u) can't be smaller than already retransmited segment length (%u)",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "tcp_seg_delete_acked",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "bytes_lost (%u) and/or bytes_retransmitted (%u) can't be smaller than already lost/retransmitted segment length (%u)",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "tcp_seg_mark_sacked",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: probe_if_index %u conflicts with %u, tcps_probe_if_conflict %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: timer list already running for if_index %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: timer will fire sooner than needed for if_index %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "tcp_interface_send_probe",
            "prototype": "",
            "backtrace": [
                "if_state_update",
                "ifioctl_ifreq",
                "ifioctl"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "connect address error %d for %s process %s:%u",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "tcp_log_address_error",
            "prototype": "",
            "backtrace": [
                "tcp_usr_connect_common"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "16 {curProtocol: 100, prevProtocol: %hhu, prevUUID: %02X%02X%02X%02X-%02X%02X-%02X%02X-%02X%02X-%02X%02X%02X%02X%02X%02X, localPort: %hu, remotePort: %hu, tcpSeq: %u, length: %u, pid: %hu, logSeqn: %hhu}",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mpkl_tcp_send",
            "prototype": "",
            "backtrace": [
                "tcp_usr_send"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: error %d for proc %s[%u] out ifp is not set\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: error %d for proc %s[%u] if_tcp_kao_max %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "tcp_set_keep_alive_offload",
            "prototype": "",
            "backtrace": [
                "tcp_ctloutput"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Prague CC: Cubic origin point should be greater than 0",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "tcp_prague_ack_rcvd",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "new CE count (%u) can't be less than current CE count (%u)OR newly ACKed (%u) can't be less that current ACKed (%u)",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%u packets were newly CE marked",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "one RTT hasn't elapsed, not doing CWR",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "one RTT hasn't elapsed, not updating alpha",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "currently in loss recovery, no need to do CWR",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "tcp_prague_process_ecn",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "tcp_rtt_info (%s:%d) [%s:%u<->%s:%u] interface: %s (skipped: %lu)\nso_gencnt: %llu t_state: %s process: %s:%u base_rtt: %u ms rttcur: %u ms srtt: %u ms rttvar: %u ms rttmin: %u ms rxtcur: %u rxtshift: %u",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "tcp_log_rtt_info",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "tcp_rt_rtt (%s:%d) [%s:%u<->%s:%u] interface: %s (skipped: %lu)\nso_gencnt: %llu t_state: %s process: %s:%u rt_rmx: RTV_RTT: %d ms rtt: %u ms rttvar: %u ms",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "tcp_log_rt_rtt",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "tcp_rtt_change (%s:%d) [%s:%u<->%s:%u] interface: %s (skipped: %lu)\nso_gencnt: %llu t_state: %s process: %s:%u srtt: %u ms old_rtt: %u ms rttvar: %u old_rttvar: %u ms ",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "tcp_log_rtt_change",
            "prototype": "",
            "backtrace": [
                "tcp_xmit_timer",
                "tcp_compute_rtt"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "tcp_keepalive (%s:%d) [%s:%u<->%s:%u] interface: %s (skipped: %lu)\nso_gencnt: %llu t_state: %s process: %s:%u snd_una: %u snd_max: %u SO_KA: %d RSTALL: %d TFOPRB: %d idle_time: %u KIDLE: %d KINTV: %d KCNT: %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "tcp_log_keepalive",
            "prototype": "",
            "backtrace": [
                "tcp_timers"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "tcp %s: [%s:%u<->%s:%u] interface: %s (skipped: %lu)\nso_gencnt: %llu t_state: %s process: %s:%u SYN in/out: %u/%u bytes in/out: %llu/%llu pkts in/out: %llu/%llu rtt: %u.%u ms rttvar: %u.%u ms base_rtt: %u ms error: %d so_error: %d svc/tc: %u flow: 0x%x",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "tcp %s: [%s:%u<->%s:%u] interface: %s (skipped: %lu)\nso_gencnt: %llu t_state: %s process: %s:%u SYN in/out: %u/%u bytes in/out: %llu/%llu pkts in/out: %llu/%llu rtt: %u.%u ms rttvar: %u.%u ms base_rtt: %u ms error: %d so_error: %d svc/tc: %u flow: 0x%x\nso_qlimit: %d so_qlen: %d so_incqlen: %d ",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "tcp_log_connection",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "tcp listen: [%s:%u<->%s:%u] interface: %s (skipped: %lu)\nso_gencnt: %llu t_state: %s process: %s:%u so_qlimit: %d error: %d so_error: %d svc/tc: %u",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "tcp_log_listen",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "tcp_connection_summary [%s:%u<->%s:%u] interface: %s (skipped: %lu)\nso_gencnt: %llu t_state: %s process: %s:%u Duration: %u.%03u sec Conn_Time: %u.%03u sec bytes in/out: %llu/%llu pkts in/out: %llu/%llu pkt rxmit: %u ooo pkts: %u dup bytes in: %u ACKs delayed: %u delayed ACKs sent: %u\nrtt: %u.%03u ms rttvar: %u.%03u ms base rtt: %u ms so_error: %d svc/tc: %u flow: 0x%x",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "tcp_connection_summary [%s:%u<->%s:%u] interface: %s (skipped: %lu)\nso_gencnt: %llu t_state: %s process: %s:%u flowctl: %lluus (%llux) SYN in/out: %u/%u FIN in/out: %u/%u RST in/out: %u/%u AccECN (client/server): %s/%s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "tcp_log_connection_summary",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "tcp drop incoming control packet tcp control %s %s%s%s%sreason: %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "tcp_log_drop_pkt",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "tcp (%s:%d) [%s:%u<->%s:%u] interface: %s (skipped: %lu)\nso_gencnt: %llu t_state: %s process: %s:%u bytes in/out: %llu/%llu pkts in/out: %llu/%llu %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "tcp_log_message",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "tcp (%s:%d) [%s:%u<->%s:%u] interface: %s (skipped: %lu)\nso_gencnt: %llu t_state: %s process: %s:%u flow %s %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "tcp_log_fsw_flow",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "tcp_state_changed [%s:%u<->%s:%u] interface: %s (skipped: %lu)\nso_gencnt: %llu t_state: %s process: %s:%u ",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "tcp_log_state_change",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "tcp (%s:%d) [%s:%u<->%s:%u] interface: %s (skipped: %lu)\nso_gencnt: %llu t_state: %s process: %s:%u bytes in/out: %llu/%llu pkts in/out: %llu/%llu rxmit pkts/bytes: %u/%u%s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "tcp_log_output",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "udp %s: [%s:%u<->%s:%u] interface: %s (skipped: %lu)\nso_gencnt: %llu so_state: 0x%04x process: %s:%u bytes in/out: %llu/%llu pkts in/out: %llu/%llu error: %d so_error: %d svc/tc: %u flow: 0x%x",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "udp_log_connection",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "udp_connection_summary [%s:%u<->%s:%u] interface: %s (skipped: %lu)\nso_gencnt: %llu so_state: 0x%04x process: %s:%u Duration: %lu.%03d sec Conn_Time: %lu.%03d sec bytes in/out: %llu/%llu pkts in/out: %llu/%llu rxnospace pkts/bytes: %llu/%llu so_error: %d svc/tc: %u flow: 0x%x",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "udp_connection_summary [%s:%u<->%s:%u] interface: %s (skipped: %lu)\nso_gencnt: %llu so_state: 0x%04x process: %s:%u flowctl: %lluus (%llux) ",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "udp_log_connection_summary",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(%u): Detaching, ref count = %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "flow_divert_detach",
            "prototype": "",
            "backtrace": [
                "sofreelastref"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "(%u): flow_divert_init failed (%d), cannot use flow divert\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Failed to get the key unit from the token: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Failed to get the control socket unit from the token: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Failed to get the aggregate unit from the token: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): HMAC verfication failed: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "flow_divert_token_set",
            "prototype": "",
            "backtrace": [
                "sosetoptlock"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "(%u): Send buffer is NULL, but size is supposed to be %lu\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): failed to find type MT_DATA in the mbuf chain.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): mbuf_copym() data_len = %lu\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): sent %lu bytes of buffered data\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "flow_divert_send_buffered_data",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(%u): mbuf_copyback(hdr) failed: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "flow_divert_packet_init",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(%u): no provider, cannot send packet\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): flow_divert_send_packet: ctl_enqueuembuf returned an error: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "flow_divert_send_packet",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(%u): flow_divert_append_target_endpoint_tlv() failed: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): flow_divert_packet_append_tlv(FLOW_DIVERT_TLV_IS_FRAGMENT) failed: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): flow_divert_packet_append_tlv(FLOW_DIVERT_TLV_DATAGRAM_SIZE) failed: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "flow_divert_send_datagram_packet",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "(%u): Invalid target address, family = %u, length = %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "flow_divert_append_target_endpoint_tlv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(%u): sending close, how = %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): failed to create a close packet: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): failed to add the error code TLV: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): failed to add the how flag: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "flow_divert_send_close_if_needed",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(%u): Removing from group %d, ref count = %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "flow_divert_pcb_remove",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(%u): Destroying, app tx %llu, tunnel tx %llu, tunnel rx %llu\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "flow_divert_pcb_destroy",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(%u): Connecting\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): No destination address available when creating connect packet\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Destination address is not valid when creating connect packet\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Failed to dup the remote endpoint\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): failed to get a local IPv6 address: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): failed to get a local IPv4 address: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): target address has an unsupported family: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Delaying sending the connect packet until send or receive\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Sending saved connect packet\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "flow_divert_connect_out_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(%u): Constrained is denied\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "flow_divert_check_no_constrained",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(%u): Got %s from token\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Failed to add source proc info: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): failed to find the real proc record for %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Looking for process with UUID %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "flow_divert_create_connect_packet",
            "prototype": "",
            "backtrace": [
                "flow_divert_connect_out_internal"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "(%u): Found multiple processes with UUID %s with different signing identifiers\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Failed to find a process with UUID %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "flow_divert_find_proc_by_uuid_callout",
            "prototype": "",
            "backtrace": [
                "flow_divert_create_connect_packet",
                "flow_divert_connect_out_internal"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(%u): Found process %d with signing identifier %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "flow_divert_find_proc_by_uuid_filter",
            "prototype": "",
            "backtrace": [
                "flow_divert_create_connect_packet",
                "flow_divert_connect_out_internal"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "(%u): Signature of proc is invalid\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): %s did not match\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): %s matched\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): failed to append the signing ID: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): failed to append the cdhash: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): failed to get the cdhash\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): failed to append app audit token: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "flow_divert_add_proc_info",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(%u): Failed to append %s: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "flow_divert_append_domain_name",
            "prototype": "",
            "backtrace": [
                "flow_divert_create_connect_packet",
                "flow_divert_connect_out_internal"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(%u): Failed to copy the connect packet\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "flow_divert_send_connect_packet",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "(%u): provider is no longer accepting writes, cannot send data\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Using remote address from CFIL saved state: %p\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): implicit connect\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): app wrote %lu bytes\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): sbappendstream failed with pkt_data, send buffer size = %u, send_window = %u\n\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): sbappendstream failed with remaining_data, send buffer size = %u, send_window = %u\n\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): flow_divert_send_datagram_packet failed with error %d, send data size = %lu\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): sbappendaddr failed. send buffer size = %u, send_window = %u, error = %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): sbappendrecord failed. send buffer size = %u, send_window = %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): flow_divert_send_datagram_packet failed with error %d, send data size = %lu, dropping the datagram\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "flow_divert_data_out",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(%u): No valid group is available, cannot init flow divert\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Created\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): pcb insert failed: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Failed to create a unique hash\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "flow_divert_pcb_init_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "(%u): Group %u already contains a PCB with hash %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Group %u is defunct, cannot insert\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "flow_divert_pcb_insert",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(%u): Length of %u TLV (%u) is larger than remaining packet data (%lu)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "flow_divert_packet_get_tlv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "(%u): Failed to lookup group for control unit %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): HMAC in token does not match computed HMAC\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "flow_divert_packet_verify_hmac",
            "prototype": "",
            "backtrace": [
                "flow_divert_token_set",
                "sosetoptlock"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "(%u): failed to append the type (%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): failed to append the length (%u)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): failed to append the value\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "flow_divert_packet_append_tlv",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(%u): No active groups, flow divert cannot be used for this socket\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Cannot lookup group with invalid control unit (%u)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): No active non-in-process groups, flow divert cannot be used for this socket\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Group for control unit %u is NULL, flow divert cannot be used for this socket\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): No active in-process groups, flow divert cannot be used for this socket\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Group for control unit %u not found, flow divert cannot be used for this socket\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Cannot access group for control unit %u, mismatched PID (%u != %u)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "flow_divert_group_lookup",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(%u): Destroying group %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "flow_divert_group_destroy",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(%u): Closing\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "flow_divert_close",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(%u): app read bytes, space = %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Sent a read notification\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): failed to create a read notification packet: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "flow_divert_rcvd",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(%u): Can't send more\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "flow_divert_shutdown",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(%u): Pre-connect read: sending saved connect packet\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "flow_divert_preconnect",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(%u): failed to create a properties update packet: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): failed to add the traffic class: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "flow_divert_ctloutput",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "(%u): Flow divert connect fail, unit mismatch %u != %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "flow_divert_kctl_connect",
            "prototype": "",
            "backtrace": [
                "flow_divert_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "(%u): got a bad packet, length (%lu) < sizeof hdr (%lu)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): mbuf_copydata failed for the header: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): got a %s message from group %d for an unknown pcb: %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): failed to get the key size: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Invalid key size: %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Skipping (re)initialization of defunct group %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): failed to get the token key: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): group %u order is %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Invalid prefix count (%d) or an error occurred while reading the prefix count: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Failed to get the length of the signing identifier at offset %d: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Overflow while incrementing number of bytes\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): No signing identifiers\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Overflow while computing the number of nodes\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Overflow while computing the number of maps\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Invalid bytes count (%lu), nodes count (%lu) or maps count (%lu)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Nodes count = %lu, child maps count = %lu, bytes_count = %lu\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Trie memory size (%lu) is too big (maximum is %u)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Failed to allocate %lu bytes of memory for the signing ID trie\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Failed to get the length of the signing identifier at offset %d while building: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Failed to read the signing identifier at offset %d: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): No place to put signing ID for insertion\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Ran out of trie nodes while splitting an existing node\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Ran out of child maps while splitting an existing node\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Ran out of trie nodes while inserting a new leaf\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Ran out of bytes while inserting a new leaf\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Ran out of child maps while inserting a new leaf\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): flow_divert_packet_init failed: %d, cannot send flow states\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): flow_divert_handle_flow_states_request: group send queue is not empty\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Failed to add a flow state: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "socket_lock"
                },
                {
                    "string": "(%u): flow_divert_handle_flow_states_request: ctl_enqueuembuf returned an error: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): failed to get the connect result: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): received connect result %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): failed to get the send window: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): No control unit provided in the connect result\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): No local address provided\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): No output if index provided\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): No application data provided in connect result\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): socket is not attached any more, ignoring connect result\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): TCP socket is not in the connecting state, ignoring connect result\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Got %u bytes of app data from the connect result\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Failed to copy %u bytes of application data from the connect result packet\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Failed to allocate a buffer of size %u to hold the application data from the connect result\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Connect result contains an invalid control unit: %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): sending connect result\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): failed to create a connect result packet: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Next control unit is the same as the current control unit, disabling flow divert\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): No more valid control units, disabling flow divert\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Group for control unit %u does not exist\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Moving from %u to %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Failed to send the connect packet to %u, disabling flow divert\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Skipped all flow divert services, disabling flow divert\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Failed to connect using the socket's original protocol: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Failed to copy the mbuf chain in the socket's send buffer\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Failed to send queued TCP data using the socket's original protocol: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Failed to get the remote address from the buffer\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Buffered record does not contain any data\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Buffered data does not have a packet header\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Failed to send queued UDP data using the socket's original protocol: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): failed to get the close error: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): failed to get the close how flag: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): close received, how = %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): socket is not attached any more, ignoring close from provider\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): socket is not attached any more, ignoring inbound data\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Receive buffer is full, will send read notification when app reads some data\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Remote address is invalid\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): app cannot receive any more data, dropping %lu bytes of data\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): socket has an unsupported type: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): received %lu bytes of data\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): failed to dup the socket address.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): failed to append %lu bytes of data: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): failed to get the read count: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): received a read notification for %u bytes\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): socket is not attached any more, ignoring read notification\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): received a properties update\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): No output if index provided in properties update\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): No application data provided in properties update\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): socket is not attached any more, ignoring properties update\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Failed to copy %u bytes of application data from the properties update packet\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): Failed to allocate a buffer of size %u to hold the application data from the properties update\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "flow_divert_kctl_send",
            "prototype": "",
            "backtrace": [
                "flow_divert_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "(%u): failed to scope to %d because inp_bindif returned %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): failed to derive a new local address from %d because in_pcbladdr returned %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "flow_divert_scope",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "(%u): trying ctl_enqueuembuf again\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "(%u): flow_divert_kctl_rcvd: ctl_enqueuembuf returned an error: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "flow_divert_kctl_rcvd",
            "prototype": "",
            "backtrace": [
                "flow_divert_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%u sysctl net.inet.tcp.mptcp_preferred_version: %d -> %d)",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "sysctl_mptcp_version_check",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s - %lx: mismatched address ids %d %d \n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: dup SYN_ACK %d %d \n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mptcp_set_raddr_rand",
            "prototype": "",
            "backtrace": [
                "tcp_do_mptcp_options",
                "tcp_dooptions"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s - %lx: skt_unit is still 0\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: Couldn't find proc for uuid %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: asked symptoms about pid %u, taskprio %u, prio %u, err %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mptcp_ask_symptoms",
            "prototype": "",
            "backtrace": [
                "mptcp_check_subflows_and_add"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s - %lx: unable to create subflow socket error %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: necp_client_register_socket_flow failed with error %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: state changed during unlock: %u flags %#x\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: so_set_effective_pid failed with error %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: so_set_effective_uuid failed with error %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: sopt %s val %d interim record removed\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mptcp_subflow_socreate",
            "prototype": "",
            "backtrace": [
                "mptcp_subflow_add"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s - %lx: Cell should be set (count is %u), but it's zero!\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: Setting cellicon failed with %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: successfully set the cellicon\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mptcp_set_cellicon",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "%s - %lx: copyout failed: %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: Asking for too many ifindex: %u subcount %u, mpts? %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mptcp_getconninfo",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s - %lx: ADD_ADDR length for v4 but version is %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: ADD_ADDR length for v6 but version is %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: Received ADD_ADDRv0\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mptcp_do_add_addr_opt_v0",
            "prototype": "",
            "backtrace": [
                "tcp_do_mptcp_options",
                "tcp_dooptions"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s - %lx: Received ADD_ADDR with echo bit\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: ADD_ADDR addr: %x invalid HMAC\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: ADD_ADDR addr: %s invalid HMAC\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s - %lx: Received ADD_ADDRv1\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mptcp_do_add_addr_opt_v1",
            "prototype": "",
            "backtrace": [
                "tcp_do_mptcp_options",
                "tcp_dooptions"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ah_schedule %s: error %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ah_schedule",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "ah4_calccksum: invalid IP option (type=%02x)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ah4_calccksum: invalid IP option (type=%02x len=%02x)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ah4_calccksum",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ah_hmac_mature: no key is given.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ah_hmac_mature: unsupported algorithm.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ah_hmac_mature: invalid key length %d.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ah_hmac_mature",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ah_none_mature: protocol and algorithm mismatch.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ah_none_mature",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "IPv6 AH input: AH with IPv6 jumbogram is not supported.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "IPv6 AH input: no key association found for spi %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "IPv6 AH input: non-mature/dying SA found for spi %u; ",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "IPv6 AH input: unsupported authentication algorithm for spi %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "sum length too short in IPv6 AH input (%u, should be at least %u): %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "sum length mismatch in IPv6 AH input (%d should be %u): %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "replay packet in IPv6 AH input: %s %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "IPv6 AH input: couldn't alloc temporary region for cksum\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "checksum mismatch in IPv6 AH input: %s %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec tunnel protocol mismatch in IPv6 AH input: %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ah6_input",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ah6_output: first mbuf too short\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ah6_output: md is not in chain\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ip6_output: AH with IPv6 jumbogram is not supported\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ah6_output: internal error: sav->replay is null: SPI=%u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ah6_output: unsupported algorithm: SPI=%u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ah6_output",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "esp_schedule %s: unsupported key length %d: needs %d to %d bits\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "esp_schedule %s: implicit IV not allowed\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "esp_schedule %s: error %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "esp_schedule",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "esp_cbc_mature: algorithm incompatible with 4 octets IV length\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "esp_descbc_mature: no key is given.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "esp_descbc_mature: unsupported algorithm.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "esp_descbc_mature: invalid key length %d.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "esp_descbc_mature: weak key was passed.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "esp_descbc_mature",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "esp_cbc_encrypt %s: payload length must be multiple of %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "esp_cbc_encrypt",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d payload length %zu must be a multiple of ESP_CBC_DES_BLOCKLEN, SPI 0x%08x",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "esp_cbc_des_decrypt_data",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "esp_cbc_mature: algorithm incompatible with esp-old\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "esp_cbc_mature: algorithm incompatible with derived\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "esp_cbc_mature: no key is given.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "esp_cbc_mature: unsupported algorithm.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "esp_cbc_mature %s: weak key was passed.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "esp_cbc_mature",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d payload length %zu must be a multiple of ESP_CBC_3DES_BLOCKLEN, SPI 0x%08x",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "esp_cbc_3des_decrypt_data",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "esp_gcm_mature: algorithm incompatible with esp-old\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "esp_gcm_mature: algorithm incompatible with derived\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "esp_gcm_mature: no key is given.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "esp_gcm_mature: unsupported algorithm.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "esp_gcm_mature %s: invalid algo %d.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "esp_gcm_mature",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "19 {curProtocol: 80 spi: 0x%X, espSeq: %u, PayloadProtocol: 100, localPort: %hu, remotePort: %hu, tcpSeq: %u, tcpLen: %hu}",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "esp_input_log",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "esp4_output: first mbuf too short\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "esp4_output",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "esp6_output: first mbuf too short\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "esp6_output",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "esp_cbc_encrypt %s: payload length must be multiple of %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "esp_cbc_encrypt_aes",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: gcm reset failure\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: iv generation failure\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: iv set failure\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: packet encryption ESP header AAD failure\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: packet encryption IV AAD failure\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: failed to encrypt\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "esp_gcm_encrypt_aes",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: failed to set IV\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: packet decryption ESP header AAD failure\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: packet decryption IV AAD failure\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: failed to decrypt\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "esp_gcm_decrypt_aes",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d ChaChaPoly chacha20poly1305_verify failed %d, SPI 0x%08x",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "esp_chachapoly_decrypt_finalize",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s:%d ChaChaPoly Packet too short %d < %u, SPI 0x%08x",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d chacha20poly1305_decrypt failed %d, SPI 0x%08x",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s:%d not enough mbufs %d %d, SPI 0x%08x",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "esp_chachapoly_decrypt",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "ipsec4_set_policy: invalid direction=%u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ipsec4_set_policy",
            "prototype": "",
            "backtrace": [
                "ip_ctloutput"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "ipsec6_set_policy: invalid direction=%u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ipsec6_set_policy",
            "prototype": "",
            "backtrace": [
                "ip6_ctloutput"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ipsec_hdrsiz: unknown protocol %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": null
                },
                {
                    "string": "ipsec_hdrsiz: unknown AF %d in IPsec tunnel SA\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": null
                }
            ],
            "symbol": "ipsec_hdrsiz",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "replay counter made %d cycle. %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ipsec_updatereplay",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ipsec4 interface kpipe output: source buffer shorter than ip header, %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec4 interface kpipe output: failed to find outbound sav\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec4 interface kpipe output: sah is NULL\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec4 interface kpipe output: buflet size shorter than hlen %u, SPI=%x\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ipsec4_interface_kpipe_output",
            "prototype": "",
            "backtrace": [
                "ipsec_kpipe_sync_rx"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ipsec6 interface kpipe output: source buffer shorter than ipv6 header, %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec6 interface kpipe output: failed to find outbound sav\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec6 interface kpipe output: sah is NULL\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec6 interface kpipe outputbuflet size shorter than hlen %u, SPI=%x\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ipsec6_interface_kpipe_output",
            "prototype": "",
            "backtrace": [
                "ipsec_kpipe_sync_rx"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ipsec6_tunnel_validate invalid nxt(%u) protocol",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ipsec6_tunnel_validate",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nat keepalive: invalid address family %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ipsec_send_natt_keepalive",
            "prototype": "",
            "backtrace": [
                "key_timehandler"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: ifnet_get_local_ports_extended(%s) failed %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "ifnet_get_local_ports_extended"
                }
            ],
            "symbol": "ipsec_get_local_ports",
            "prototype": "",
            "backtrace": [
                "ipsec_sleep_wake_handler",
                "ipsec_monitor_sleep_wake",
                "key_newsav"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: unknown ipsec protocol %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: IPsec with IPv6 jumbogram is not supported\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ipsec6_update_routecache_and_output",
            "prototype": "",
            "backtrace": [
                "ipsec4_output_internal"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "ipsec6_output_trans: unknown ipsec protocol %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec6_output_trans: IPsec with IPv6 jumbogram is not supported\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ipsec6_output_trans_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ipsec6_output_tunnel: unsupported inner family, spi=%u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec6_output_tunnel: unknown ipsec protocol %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ipsec6_output_tunnel: IPsec with IPv6 jumbogram is not supported\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ipsec6_output_tunnel_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ipsec: monitoring sleep wake",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ipsec_monitor_sleep_wake",
            "prototype": "",
            "backtrace": [
                "key_newsav"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ENOBUFS in icmp6_error %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "icmp6_error_flag",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ICMP6 redirect sent from %s rejected; must be from linklocal\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ICMP6 redirect sent from %s rejected; hlim=%d (must be 255)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ICMP6 redirect rejected; no route with inet6 gateway found for redirect dst: %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ICMP6 redirect rejected; not equal to gw-for-src=%s (must be same): %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ICMP6 redirect rejected; no route found for redirect dst: %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ICMP6 redirect rejected; redirect dst must be unicast: %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ICMP6 redirect rejected; neither router case nor onlink case: %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "icmp6_redirect_input: invalid ND option, rejected: %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "icmp6_redirect_input: lladdrlen mismatch for %s (if %d, icmp6 packet %d): %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "icmp6_redirect_input",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "eventhandler_invoke(\"in6_event\")",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "in6_event_callback",
            "prototype": "",
            "backtrace": [
                "in6_event_enqueue_nwk_wq_entry"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: IID derived from HW interface.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: IID from alterate HW interface %s.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: borrowed IID from %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: IID from PRNG.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: IID: %02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "in6_select_iid_from_all_hw",
            "prototype": "",
            "backtrace": [
                "in6_ifattach_aliasreq"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "%s src %s dst %s ifscope %d is_direct %d select_srcif %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s %s->%s ifscope %d->%d ifa_if %s ro_if %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s %s->%s ifscope %d->%d ifa_if %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s %s->%s ifscope %d ifa_if %s",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s %s->%s ifscope %d ifa_if NULL",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s->%s ifscope %d ro_if %s != ifa_if %s (cached route cleared)",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s->%s ifscope %d ro_if %s (no ifa_if found)",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s %s->%s ifscope %d ifa_if %s ro_if %s (error=%d)",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "selectroute",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: unable to insert route to %s:%s, flags=0x%x, due to existing ND6 route %s->%s flags=0x%x, attempting to delete\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "in6_addroute",
            "prototype": "",
            "backtrace": [
                "in6_inithead"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: ignore v2 query on ifp %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: input v2 query on ifp %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: GS query throttled\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: process v2 group query on ifp %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: v2 general query response scheduled in T+%d seconds on ifp %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "mld_v2_input_query",
            "prototype": "",
            "backtrace": [
                "mld_input"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "Reinit'd ND information for interface %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "nd6_ifattach",
            "prototype": "",
            "backtrace": [
                "in6_ifattach_prelim"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: timer scheduled in T+%llus.%lluu (demand %d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: timer scheduled in T+%llus.%lluu with %llus.%lluu leeway (demand %d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: fast timer scheduled in T+%llus.%lluu (demand %d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: not scheduling timer: timers %d, fast_timer %d, T+%llus.%lluu\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: not scheduling timer: timers %d, fast_timer %d, T+%llus.%lluu with %llus.%lluu leeway\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "nd6_sched_timeout",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 5,
            "anchors": [
                {
                    "string": "%s: route %s on %s%d gateway address not AF_LINK\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: route %s on %s%d sdl_alen == 0\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "nd6_lookup_ipv6",
            "prototype": "",
            "backtrace": [
                "ether_inet6_pre_output",
                "ether_attach_inet6"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "nd6_ns_input: invalid hlim (%d) from %s to %s on %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "nd6_ns_input: bad DAD packet (wrong ip6 dst)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "nd6_ns_input: NS packet from non-neighbor\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "nd6_ns_input: bad NS target (multicast)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "nd6_ns_input: invalid ND option, ignored\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "nd6_ns_input: bad DAD packet (link-layer address option)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "nd6_ns_input: lladdrlen mismatch for %s (if %d, NS packet %d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "nd6_ns_input: duplicate IP6 address %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "nd6_ns_input: src=%s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "nd6_ns_input: dst=%s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "nd6_ns_input: tgt=%s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "nd6_ns_input",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nd6_ns_output: source can't be determined: dst=%s, error=%d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "nd6_ns_output: no preferred source available: dst=%s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "nd6_ns_output: preferred source available is optimistic: dst=%s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "nd6_ns_output",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "nd6_na_input: on ND6ALT interface!\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "nd6_na_input: invalid hlim (%d) from %s to %s on %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "nd6_na_input: invalid target address %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "nd6_na_input: a solicited adv is multicasted\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "nd6_na_input: invalid ND option, ignored\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "nd6_na_input: lladdrlen mismatch for %s (if %d, NA packet %d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "nd6_na_input",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "nd6_na_output: source can't be determined: dst=%s, error=%d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "nd6_na_output",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: host route to %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Successfully deleted host route to %s for interface %s.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Failed to delete host route to %s for interface %s with error :%d.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "nd6_alt_node_absent",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: sending unsolicited NA\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "nd6_unsol_na_output",
            "prototype": "",
            "backtrace": [
                "nd6_dad_timer"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "%s: ignoring duplicate NA on replicated interface %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: ignoring duplicate NA on %s [DAD not in progress]\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: ignoring duplicate NA on %s [eh_src != tgtlladdr]\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: no DAD structure for %s on %s.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: duplicate IPv6 address %s [processing NA on %s]\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "nd6_dad_na_input",
            "prototype": "",
            "backtrace": [
                "nd6_na_input"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "%s: sending NS who has %s on ALL\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: sending NS who has %s on ALL (except %s)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: Sending cloned NS who has %s, originally on %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "nd6_prproxy_ns_output",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "nd6_rs_input: invalid hlim (%d) from %s to %s on %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "nd6_rs_input: RS packet from non-neighbor\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "nd6_rs_input: invalid ND option, ignored\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "nd6_rs_input: lladdrlen mismatch for %s (if %d, RS packet %d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "nd6_rs_input",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: skipping RA from %s to %s on %s, accept RA: %d local RA=%d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "nd6_ra_input: invalid hlim (%d) from %s to %s on %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "nd6_ra_input: src %s is not link-local\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: accepting RA from %s to %s on %s, local RA=%d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "nd6_ra_input: invalid ND option, ignored\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "RA with a lower CurHopLimit sent from %s on %s (current = %d, received = %d). Ignored.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: invalid option len %d for route information option, ignored\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: invalid prefix length %d in the route information option, ignored\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: using reserved preference mask, ignored\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: received RA with route opt, prefix %s/%u pref %u lifetime %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "nd6_ra_input: invalid option len %d for prefix information option, ignored\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "nd6_ra_input: invalid prefix len %d for prefix information option, ignored\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: invalid prefix %s, ignored\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "nd6_ra_input: no SLAAC on prefix %s [not RFC 4193]\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: no SLAAC on prefix %s [6to4]\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "nd6_ra_input: bogus mtu option mtu=%d sent from %s, ignoring\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "nd6_ra_input: bogus mtu mtu=%d sent from %s; exceeds maxmtu %d, ignoring\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "nd6_ra_input: mtu option mtu=%d sent from %s; maxmtu unknown, ignoring\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "nd6_ra_input: lladdrlen mismatch for %s (if %d, RA packet %d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "nd6_ra_input",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "prelist_update: failed to make the prefix %s/%d on-link on %s (errno=%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "prelist_update: nd6_prelist_add failed for %s/%d on %s errno=%d, returnpr=0x%llx\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "prelist_update: failed to create a temporary address, errno=%d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "prelist_update",
            "prototype": "",
            "backtrace": [
                "nd6_ra_input"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s: is now the default interface (was %s)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "No default interface set\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: scoped %s/%d on %s has no matching unscoped prefix\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: failed to make %s/%d scoped onlink on %s, errno=%d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: error promoting %s/%d to %s from %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s: %s/%d promoted, previously on %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "nd6_setdefaultiface",
            "prototype": "",
            "backtrace": [
                "nd6_ioctl",
                "in6_control"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "protocol family mismatched %d != %d\n.",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "key_gettunnel",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "key_checksa_present: invalid sav->state (state: %d SA: %d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "key_sockaddrcmp"
                }
            ],
            "symbol": "key_checksa_present",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "register custom ipsec: invalid address\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "register custom ipsec: address family mismatched\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "register custom ipsec: address struct size mismatched\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "register custom ipsec: invalid ipsec token\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "register custom esp: invalid proto %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "register custom esp: SA exists\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "key_reserve_custom_ipsec",
            "prototype": "",
            "backtrace": [
                "flow_req_prepare_namespace",
                "flow_mgr_flow_add",
                "fsw_flow_add"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "key_setsadbaddr: bad prefix length %zu",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "key_setsadbaddr",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "key_parse: upper layer protocol mismatched.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_parse: address family mismatched.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_parse: address struct size mismatched.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_parse: unsupported address family.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_parse: illegal prefixlen.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "key_validate_address_ext_pair",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "key_getsaddbaddr: mhp is NULL\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "key_getsaddbaddr",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "key_checkspidup: address family mismatched.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "key_checkspidup",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "key_mature: illegal range of SPI %u.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_mature: invalid flag (derived) given to old-esp.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_mature: invalid flag (derived) given to AH SA.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_mature: protocol and algorithm mismated.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_mature: Invalid satype.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_mature: unknown authentication algorithm.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_mature: invalid AH key length %d (%d-%d allowed)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_mature: no satisfy algorithm for AH\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_mature: unknown encryption algorithm.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_mature: invalid ESP key length %d (%d-%d allowed)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_mature: no satisfy algorithm for ESP\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "key_mature",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "key_getnewspid: to allocate policy id is failed.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "key_getnewspid",
            "prototype": "",
            "backtrace": [
                "key_spdadd"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "key_setdumpsastats: length too nbug: %u",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "key_setsadbsastat: length is too big: %zu\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "key_setdumpsastats",
            "prototype": "",
            "backtrace": [
                "key_getsastat"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "key_send_delsp: length too big: %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "key_delsp_for_ipsec_if",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d set net_mpklog_enabled to %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "sysctl_net_mpklog_enabled",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "%s:%d set net_mpklog_type to %u (%s)",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "sysctl_net_mpklog_type",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ktrace: manually setting owning process",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ktrace_set_owning_pid",
            "prototype": "",
            "backtrace": [
                "kperf_sysctl_bless_handler"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ktrace: promoting background tool",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ktrace_reset_internal",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "ktrace: changing state from %d to %d, owned by %s[%d]",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "ktrace_set_owning_proc",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "ERROR: Must provide a login name for a new persona!",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ERROR: Invalid type: %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "ERROR: too many active personas!",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "persona_alloc",
            "prototype": "",
            "backtrace": [
                "kpersona_alloc_syscall",
                "persona"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "build_userspace_exit_reason: failed to allocate exit reason\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "build_userspace_exit_reason: exit reason with namespace %u, nonzero payload but zero length\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "build_userspace_exit_reason: failed to allocate signal reason buffer\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "build_userspace_exit_reason: failed to allocate space for reason string\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "build_userspace_exit_reason: failed to copy in payload data with error %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "build_userspace_exit_reason: failed to allocate space for payload data\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "build_userspace_exit_reason",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "memorystatus: WARNING %s [%d] is receiving an entitled debugging memory limit. This is intended only for debugging and can result in unstable device behavior.",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "memorystatus_act_on_entitled_developer_task_limit",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "memorystatus_list_add(): adding pid %d with priority %d.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "memorystatus_add",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "memorystatus: setting %s(%d) to priority %d, inserting at %s\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "memstat_update_priority_locked",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "memorystatus: changing (%s) pid %d: priority %d, user_data 0x%llx\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "memorystatus_update: effective change specified for pid %d, but change already occurred.\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "memorystatus_set_priority",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "memorystatus_list_remove: removing pid %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "memorystatus_remove",
            "prototype": "",
            "backtrace": [
                "proc_prepareexit"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "memorystatus: Denying dirty-tracking opt-in for managed %s [%d]\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "%s [%d] enrolled in ActivityTracking tracked %d / idle-exit %d / defer %d / dirty %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "memorystatus_dirty_track",
            "prototype": "",
            "backtrace": [
                "proc_dirtycontrol",
                "proc_info_internal"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "memorystatus_dirty_set(): %d %d 0x%x 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "memorystatus_dirty_set",
            "prototype": "",
            "backtrace": [
                "proc_dirtycontrol",
                "proc_info_internal"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "memorystatus_dirty_clear(): %d 0x%x 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "memorystatus_dirty_clear",
            "prototype": "",
            "backtrace": [
                "proc_dirtycontrol",
                "proc_info_internal"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "memorystatus_on_ledger_footprint_exceeded: failed to warn %s [%d] (exiting, or no handler registered?).\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "task_exceeded footprint: failed to allocate jetsam reason\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "task_exceeded_footprint: failed to kill the current task (exiting?).\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "memorystatus_on_ledger_footprint_exceeded",
            "prototype": "",
            "backtrace": [
                "task_footprint_exceeded",
                "init_task_ledgers",
                "coalitions_init",
                "kernel_bootstrap",
                "machine_startup",
                "arm_init",
                "_start_first_cpu",
                "_LowResetVectorEnd"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "memorystatus_allowed_vm_map_fork: corpse for pid %d blocked by jetsam).\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "memorystatus disallowed vm_map_fork %lld  %lld\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "memorystatus_allowed_vm_map_fork",
            "prototype": "",
            "backtrace": [
                "task_duplicate_map_and_threads",
                "task_generate_corpse_internal"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "%lu.%03d memorystatus: killing_top_process_elevated%d pid %d [%s] (%s %d) %lluKB - memorystatus_available_pages: %llu\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "memorystatus_kill_elevated_process",
            "prototype": "",
            "backtrace": [
                "memorystatus_thread"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "memorystatus_perform_idle_demotion()\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "memorystatus_perform_idle_demotion() found %s [%d]\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "memorystatus_perform_idle_demotion() found stuck process %d [%s], moving to JETSAM_PRIORITY_AGING_BAND1_STUCK\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "memorystatus_perform_idle_demotion",
            "prototype": "",
            "backtrace": [
                "memorystatus_init",
                "bsd_init",
                "kernel_bootstrap_thread"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "memorystatus: new limit on pid %d (%dMB %s)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "memorystatus: error (%d) setting memlimit in ledger for %s [%d]\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "_memstat_write_memlimit_to_ledger_locked",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "memorystatus: setting memlimit for %s [%d], Active(%dMB %s), Inactive(%dMB, %s)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "memstat_set_memlimits_locked",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "memorystatus: jetsam is approaching JETSAM_PRIORITY_FOREGROUND\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "memorystatus: purging kernel memory caches\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "memorystatus: recovered %llu pages from pmap\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "memorystatus: purging all corpses\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "memorystatus: no corpses to purge\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "memorystatus: reclaiming all deferred user memory\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "memorystatus: trimming kernel zone allocator\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "memstat_approaching_fg_band",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "kill_idle_exit_proc: failed to allocate jetsam reason\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "memorystatus: killing_idle_process pid %d [%s] jetsam_reason->osr_code: %llu\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "memorystatus_idle_exit_from_VM",
            "prototype": "",
            "backtrace": [
                "memorystatus_update_vm_pressure"
            ]
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "%lu.%03d memorystatus: killing_specific_process pid %d [%s] (%s %d) %lluKB - memorystatus_available_pages: %llu\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "memorystatus_kill_process_sync",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "memorystatus_init_jetsam_snapshot_stats: host_statistics64 failed with %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "memorystatus_init_snapshot_vmstats",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "memorystatus: WARNING snapshot buffer is full, count %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "memorystatus_update_jetsam_snapshot_entry_locked: failed to update pid %d, priority %d, count %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "memorystatus_update_jetsam_snapshot_entry_locked",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 2,
            "anchors": [
                {
                    "string": "memorystatus_get_priority_list: returning %lu for size\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "memorystatus_cmd_get_priority_list",
            "prototype": "",
            "backtrace": [
                "memorystatus_control"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "memorystatus_get_jetsam_snapshot: returned inputsize (%ld), snapshot_size(%ld), listcount(%ld)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "memorystatus_get_on_demand_snapshot: returned inputsize (%ld), snapshot_size(%ld), listcount(%ld)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "memorystatus_get_at_boot_snapshot: returned inputsize (%ld), snapshot_size(%ld), listcount(%d)\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "memorystatus_cmd_get_jetsam_snapshot",
            "prototype": "",
            "backtrace": [
                "memorystatus_control"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "memorystatus: process %s [%d] opted in to both Management and ActivityTracking\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "memorystatus_set_process_is_managed",
            "prototype": "",
            "backtrace": [
                "memorystatus_control"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "memorystatus_bg_pressure_eligible: pid %d, state 0x%x\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "memorystatus_update_vm_pressure",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "eventhandler_invoke(\"protoctl_event\")",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "protoctl_event_callback",
            "prototype": "",
            "backtrace": [
                "protoctl_event_enqueue_nwk_wq_entry"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "sosend_list: so->so_type != SOCK_DGRAM error %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "sosend_list: atomic == 0 error %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "sosend_list: SS_ISCONNECTED not set error: %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "sosend_list: flags 0x%x error %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "sosend_list: sosendcheck error %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "sosend_list: sflt_data_out error %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "sosend_list: cfil_sock_data_out error %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "sosend_list: pru_send_list error %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "sosend_list: pru_send error %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "sosend_list: m_freem_list(top) with error %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "sosend_list",
            "prototype": "",
            "backtrace": [
                "sendit_x",
                "sendmsg_x"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "sendit_x: mbuf_packet_from_uio error %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "sendit_x: sockargs error %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "sendit_x: sosend_list error %d\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "mbuf_packet_from_uio: mbuf_allocpacket %zu error %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "mbuf_packet_from_uio: len %d error %d",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "sendit_x",
            "prototype": "",
            "backtrace": [
                "sendmsg_x"
            ]
        },
        {
            "args": 1,
            "anchors": [
                {
                    "string": "TRACKER - %s:%d No tracker attribute of type %d found in parameters\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "TRACKER - %s:%d Wrong size for tracker attribute type %d size %zu <got size %zu>\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "TRACKER - %s:%d Exceeded max size (%zu) - tracker attribute type %d size %zu\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "TRACKER - %s:%d Failed to get value for tracker attribute type %d size %zu\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "tracker_retrieve_attribute",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "TRACKER - %s:%d Missing remote address\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "TRACKER - %s:%d Invalid address family <%d>\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "fill_hash_entry",
            "prototype": "",
            "backtrace": []
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "SOFLOW - %s:%d <pid %d so %llx> ifflagsp set to 0x%X\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "SOFLOW - %s:%d <pid %d so %llx> Collected NSTAT counts: rxpackets %llu rxbytes %llu txpackets %llu txbytes %llu\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "SOFLOW - %s:%d <pid %d so %llx> Collected NSTAT metadata: eupid %llu epid %d euuid %x%x%x%x-%x%x%x%x-%x%x%x%x-%x%x%x%x outifp %d properties 0x%X lport %d fport %d laddr %s faddr %s rcvbufsize %u rcvbufused %u traffic_class %u\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "soflow_nstat_provider_request_vals",
            "prototype": "",
            "backtrace": [
                "soflow_get_flow"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "eventhandler_invoke(\"net_filter_event\")",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "net_filter_event_enqueue_callback",
            "prototype": "",
            "backtrace": [
                "net_filter_event_mark"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "eventhandler_deregister event_type=ifnet_event",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "eventhandler_deregister event_type=protoctl_event",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "fsw_uninit",
            "prototype": "",
            "backtrace": [
                "nx_fsw_dom_terminate"
            ]
        },
        {
            "args": 0,
            "anchors": [
                {
                    "string": "EXT_PANICLOG: instance is NULL\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "EXT_PANICLOG: init failed\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                },
                {
                    "string": "EXT_PANICLOG: Handle alloc failed\n",
                    "segment": "__TEXT",
                    "section": "__os_log",
                    "caller": "_os_log_internal"
                }
            ],
            "symbol": "__ZN20IOExtensiblePaniclog14createWithUUIDEPhPKcj29ext_paniclog_create_options_tPPS_",
            "prototype": "",
            "backtrace": []
        }
    ]
}